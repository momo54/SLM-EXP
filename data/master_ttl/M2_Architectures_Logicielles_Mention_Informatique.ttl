@prefix ns1: <http://example.org/masters/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

ns1:Architectures_et_styles_d_architectures rdfs:label "Architectures et styles d'architectures" ;
    ns1:content """
- Introduction aux paradigmes objet, composant,agent, service et modèle dans les Architectures logicielles
- Introduction aux styles Architecturaux
- Un Modèle de style d'architecture
- Dimensions quantitative et qualitative d'une architecture
- Usage des styles d'architectures
- Modèle d'évolution d'une architecture
""" ;
    ns1:level "Master" ;
    ns1:objective """
- Comprendre les concepts clés des Architectures Logicielles (I)
- Comprendre et savoir classifier les langages de modèlisation d'architectures en soulignant leurs différents modes de représentation, leurs supports de conception et leurs mécanismes d'adaptation (M)
- Etre capable d'identifier et de développer différents styles architecturaux   (A)
- Comprendre les principales difficultés qui interviennent lors du passage à l'echelle(A)
- Etre capable de maitriser la complexité des architectures logicielles à un haut niveau d'abstraction   (M)
- Comprendre et distinguer les différents styles architecturaux orientés agents, objets, composants et modèles.(M)
""" ;
    ns1:parcours "M2 Architectures Logicielles (ALMA)" ;
    ns1:semester "3" .

ns1:Deep_Learning_and_Intensive_Software_Systems__EMN_ ns1:level "Master" ;
    ns1:objective """
• To understand how big are big data and how distributed infrastructures are able to handle them
• To understand why traditional databases cannot handle big data
• To know online transaction processing, online analytical processing and streaming processing on big data.
• To know representative distributed datastore for big data OLTP ie. CouchBase, Google BigTable...
• To know how to program with Map-Reduce, resilient data structures, and stream processing ie. Hadoop, SPARK, Flink
• To know consistent hashing, linear hashing, distributed linear hashing, sharding
• To know multi-version concurrency control and consistency issues in large scale datastore
• To be able to understand how current datastore are built, what they can do and what are their limitations.
• To be able to use large scale datastore for OLTP, OLAP and stream processing.
""" ;
    ns1:parcours "M2 Architectures Logicielles (ALMA)" ;
    ns1:semester "3" .

ns1:Gestion_des_logiciels rdfs:label "Gestion des logiciels" ;
    ns1:level "Master" ;
    ns1:objective """
- Etre capable d'appliquer les méthodes et outils pour développer un "Senior Capstone Project" t (A)
- Etre capable d'identifier les différentes étapes de gestion d'un projet   (M)
- Etre capable d'estimer les couts et durées d'un projet (M)
- Comprendre les outils et l'organisation d'un travail collaboratif   (M).
""" ;
    ns1:parcours "M2 Architectures Logicielles (ALMA)" ;
    ns1:semester "3" .

ns1:Ingénierie_dirigée_par_les_modèles rdfs:label "Ingénierie dirigée par les modèles" ;
    ns1:level "Master" ;
    ns1:objective """
1. Comprendre les principes et les objectifs de l'ingénierie dirigée par sur les modèles.
2. Comprendre les différences entre la modélisation et la méta-modélisation.
3. Comprendre les différences entre les langages spécifiques au domaine et les langages génériques.
4. Connaître les différences entre la syntaxe abstraite , la syntaxe concrète et la sémantique d'un langage.
5. Être capable de concevoir un langage spécifique au domaine.
6. Être capable d'intégrer l'ingénierie basée sur les modèles dans le processus de développement logiciel.
7. Être capable de réaliser des transformations de modèle à modèle.
8. Être capable de réaliser effectuer des transformations de modèle à texte (génération de code).
""" ;
    ns1:parcours "M2 Architectures Logicielles (ALMA)" ;
    ns1:semester "3" .

ns1:Master_2_M2_Architectures_Logicielles__ALMA__Année_universitaire ns1:parcours "master Informatique" .

ns1:Middleware ns1:level "Master" ;
    ns1:objective """
- Comprendre les fondements de la synchronisation liés à la concurrence
- Comprendre les architecture n-tiers (e.g. J2E) et les technologies associées
- Connaître les limites théoriques des applications distribuées
- Etre capable de mettre en place une architecture client/serveur utilisant des objets distants
- Comprendre les principe de HTTP et Websocket
- Etre capable de concevoir une API fondée sur REST
- Etre capable de créer un web service en utilisant le framework Spring
- Comprendre les concepts d'authentification et de sécurité
- Comprendre les concepts de services basés composants et de micro services
""" ;
    ns1:parcours "M2 Architectures Logicielles (ALMA)" ;
    ns1:semester "3" .

ns1:Modélisation_et_vérification_des_systèmes_concurrents rdfs:label "Modélisation et vérification des systèmes concurrents" ;
    ns1:content """
Le cours est consacré à la modélisation et à la vérification par model-checking de systèmes concurrents
""" ;
    ns1:level "Master" ;
    ns1:parcours "M2 Architectures Logicielles (ALMA)" ;
    ns1:semester "3" .

ns1:Stage rdfs:label "Stage" ;
    ns1:level "Master" ;
    ns1:objective """
- S'intégrer dans le milieu professionel de son stage, mettre en oeuvre sa capacité d'analyse sur le sujet proposé, et être force de proposition.
- Synthétiser le travail effectué dans un compte rendu de manière concise, correcte, et complète.
- Préparer des supports puis présenter oralement le travail effectué de manière dynamique et convaincante.
""" ;
    ns1:parcours """
M2 Architectures Logicielles (ALMA),M2 Optimisation en Recherche Opérationnelle (ORO),M2 Apprentissage et Traitement Automatique de la Langue (ATAL),M2 CMI-OPTIM
""" ;
    ns1:semester "4" .

