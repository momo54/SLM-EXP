<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/e0a7d0c60e8621aaad9274bfcdd6b6af439e70f7e38659b332f0a52ede8e37f3> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/e0a7d0c60e8621aaad9274bfcdd6b6af439e70f7e38659b332f0a52ede8e37f3> .
_:N2e18fecc75ce4095959f843f052a72e8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/e0a7d0c60e8621aaad9274bfcdd6b6af439e70f7e38659b332f0a52ede8e37f3> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:N2e18fecc75ce4095959f843f052a72e8 <http://groq.org/e0a7d0c60e8621aaad9274bfcdd6b6af439e70f7e38659b332f0a52ede8e37f3> .
_:N2e18fecc75ce4095959f843f052a72e8 <http://schema.org/answer> "1" <http://groq.org/e0a7d0c60e8621aaad9274bfcdd6b6af439e70f7e38659b332f0a52ede8e37f3> .
_:N2e18fecc75ce4095959f843f052a72e8 <http://schema.org/explain> "The lecture covers most of the knowledge unit's topics, including algorithm implementation, problem-solving, and complexity calculation." <http://groq.org/e0a7d0c60e8621aaad9274bfcdd6b6af439e70f7e38659b332f0a52ede8e37f3> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,\nAL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.\nSome common algorithms (e.g., sorting, searching, tree traversal, graph\ntraversal) 3\\. Impact of algorithms on time-space efficiency of programs\nIllustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms\nfor writing programs. 2\\. Demonstrate how a problem may be solved by different\nalgorithms, each with different properties. 3\\. Explain some common algorithms\n(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the\nimpact on space/time performance of some algorithms.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/e0a7d0c60e8621aaad9274bfcdd6b6af439e70f7e38659b332f0a52ede8e37f3> .
_:N43e1ff24eef740a9836fe282f3fbfb47 <http://schema.org/answer> "0" <http://groq.org/edfdbad7d74f21fe4ffebd49170efd78ff672f255eeb4281b6997ea81e5518d7> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:N43e1ff24eef740a9836fe282f3fbfb47 <http://groq.org/edfdbad7d74f21fe4ffebd49170efd78ff672f255eeb4281b6997ea81e5518d7> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 131-132-133 HOURS CS Core = 4 KA Core = 3 FPL-Functional: Functional\nProgramming CS Core: 1\\. Lambda expressions and evaluation: (See also: AL-\nModels, FPL-Formalism) a. Variable binding and scope rules. (See also: SDF-\nFundamentals) b. Parameter-passing. (See also: SDF-Fundamentals) c. Nested\nlambda expressions and reduction order. 2\\. Effect-free programming: a.\nFunction calls have no side effects, facilitating compositional reasoning. b.\nImmutable variables and data copying vs reduction. c. Use of recursion vs\nloops vs pipelining (map/reduce). 3\\. Processing structured data (e.g., trees)\nvia functions with cases for each data variant: a. Functions defined over\ncompound data in terms of functions applied to the constituent pieces. b.\nPersistent data structures. 4\\. Using higher-order functions (taking,\nreturning, and storing functions). KA Core: 5\\. Metaprogramming and\nreflection. 6\\. Function closures (functions using variables in the enclosing\nlexical environment). a. Basic meaning and definition - creating closures at\nrun-time by capturing the environment. b. Canonical idioms: call-backs,\narguments to iterators, reusable code via function arguments. c. Using a\nclosure to encapsulate data in its environment. d. Delayed versus eager\nevaluation. Non-core: 7\\. Graph reduction machine and call-by-need. 8\\.\nImplementing delayed evaluation. 9\\. Integration with logic programming\nparadigm using concepts such as equational logic, narrowing, residuation and\nsemantic unification. (See also: FPL-Logic) 10\\. Integration with other\nprogramming paradigms such as imperative and object-oriented. Illustrative\nlearning outcomes: CS Core: 1\\. Develop basic algorithms that avoid assigning\nto mutable states or considering reference equality. 2\\. Develop useful\nfunctions that take and return other functions. 3\\. Compare and contrast how\ncomputational solutions to a problem differ in procedural, functional, and\nobject-oriented approaches. 4\\. Compare and contrast mechanisms to define and\nprotect data elements within procedural, functional, and object-oriented\napproaches. KA Core: 5\\. Explain a simple example of lambda expression being\nimplemented using a virtual machine, such as a SECD machine, showing storage\nand reclaim of the environment. 6\\. Correctly interpret variables and lexical\nscope in a program using function closures. 7\\. Use functional encapsulation\nmechanisms such as closures and modular interfaces. 8\\. Compare and contrast\nstateful vs stateless execution. 9\\. Define and use iterators and other\noperations on aggregates, including operations that take functions as\narguments, in multiple programming languages, selecting the most natural\nidioms for each language. (See also: FPL-OOP) Non-core: 10\\. Illustrate graph\nreduction using a l-expression using a shared subexpression. 11\\. Illustrate\nthe execution of a simple nested l-expression using an abstract machine, such\nas an ABC machine. 12\\. Illustrate narrowing, residuation, and semantic\nunification using simple illustrative examples. 13\\. Illustrate the\nconcurrency constructs using simple programming examples of known concepts\nsuch as a buffer being read and written concurrently or sequentially. (See\nalso: FPL-OOP)</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/edfdbad7d74f21fe4ffebd49170efd78ff672f255eeb4281b6997ea81e5518d7> .
_:N43e1ff24eef740a9836fe282f3fbfb47 <http://schema.org/explain> "Lecture focuses on decidability, recursion, induction, and unification, while KU emphasizes functional programming concepts like closures, higher-order functions, and evaluation strategies not explicitly covered." <http://groq.org/edfdbad7d74f21fe4ffebd49170efd78ff672f255eeb4281b6997ea81e5518d7> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/edfdbad7d74f21fe4ffebd49170efd78ff672f255eeb4281b6997ea81e5518d7> .
_:N43e1ff24eef740a9836fe282f3fbfb47 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/edfdbad7d74f21fe4ffebd49170efd78ff672f255eeb4281b6997ea81e5518d7> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/edfdbad7d74f21fe4ffebd49170efd78ff672f255eeb4281b6997ea81e5518d7> .
_:N7e34601684ce4d93ac14bf624722a44f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1713abb0acb18c93c7cdebb5cabe6e5c46e0b282f23c4afaf8fa7bbaacb28578> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/1713abb0acb18c93c7cdebb5cabe6e5c46e0b282f23c4afaf8fa7bbaacb28578> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages:93-95 HOURS CS Core = 9 KA Core = 23 AL-Models: Computational Models and\nFormal Languages CS Core: 1\\. Formal automata a. Finite State b. Pushdown c.\nLinear Bounded d. Turing Machine 2\\. Formal languages, grammars and Chomsky\nHierarchy (See also: FPL-Translation, FPL-Syntax) a. Regular (Type-3) i.\nRegular Expressions b. Context-Free (Type-2) c. Context-Sensitive (Type-1) d.\nRecursively Enumerable (Type-0) 3\\. Relations among formal automata,\nlanguages, and grammars 4\\. Decidability, (un)computability, and halting 5\\.\nThe Church-Turing thesis 6\\. Algorithmic correctness a. Invariants (e.g., in\niteration, recursion, tree search) KA Core: 7\\. Deterministic and\nnondeterministic automata 8\\. Pumping Lemma proofs a. Proof of Finite\nState/Regular-Language limitation b. Pushdown Automata/Context-Free-Language\nlimitation 9\\. Decidability a. Arithmetization and diagonalization 10\\.\nReducibility and reductions 11\\. Time complexity based on Turing Machine 12\\.\nSpace complexity (e.g., Pspace, Savitch's Theorem) 13\\. Equivalent models of\nalgorithmic computation a. Turing Machines and Variations (e.g., multi-tape,\nnon-deterministic) b. Lambda Calculus (See also: FPL-Functional) c. Mu-\nRecursive Functions Non-core: 14\\. Quantum computation (See also: AR-Quantum)\na. Postulates of quantum mechanics i. State space 94 ii. State evolution iii.\nState composition iv. State measurement b. Column vector representations of\nqubits c. Matrix representations of quantum operations d. Simple quantum gates\n(e.g., XNOT, CNOT) Illustrative Learning Outcomes: CS Core: 1\\. For each\nformal automaton in this unit: a. Explain its definition comparing its\ncharacteristics with this unit's other automata, b. Using an example, explain\nstep-by-step how the automaton operates on input including whether it accepts\nthe associated input, c. Explain an example of inputs that can and cannot be\naccepted by the automaton. 2\\. Given a problem, develop an appropriate\nautomaton that addresses the problem. 3\\. Develop a regular expression for a\ngiven regular language expressed in natural language. 4\\. Explain the\ndifference between regular expressions (Type-3 acceptors) and the regular\nexpressions (Type-2 acceptors) used in programming languages. 5\\. For each\nformal model in this unit: a. Explain its definition comparing its\ncharacteristics with the others in this unit, b. Explain example inputs that\nare and cannot be accepted by the language/grammar. 6\\. Explain a universal\nTuring Machine and its operation. 7\\. Present to an audience of co-workers and\nmanagers the impossibility of providing them a program that checks all other\nprograms, including some seemingly simple ones, for infinite loops including\nan explanation of the Halting problem, why it has no algorithmic solution, and\nits significance for real-world algorithmic computation. 8\\. Explain examples\nof classic uncomputable problems. 9\\. Explain the Church-Turing Thesis and its\nsignificance for algorithmic computation. 10\\. Explain how (loop) invariants\ncan be used to prove the correctness of an algorithm. Illustrative Learning\nOutcomes: KA Core: 11\\. For each formal automaton in this unit explain\n(compare/contrast) its deterministic and nondeterministic capabilities. 12\\.\nApply pumping lemmas, or alternative means, to prove the limitations of Finite\nState and Pushdown automata. 13\\. Apply arithmetization and diagonalization to\nprove the Halting Problem for Turing Machines is Undecidability. 14\\. Given a\nknown undecidable language, apply a mapping reduction or computational history\nto prove that another language is undecidable. 15\\. Convert among equivalently\npowerful notations for a language, including among DFAs, NFAs, and regular\nexpressions, and between PDAs and CFGs. 16\\. Explain Rice's theorem and its\nsignificance. 95 17\\. Explain an example proof of a problem that is\nuncomputable by reducing a classic known uncomputable problem to it. 18\\.\nExplain the Primitive and General Recursive functions (zero, successor,\nselection, primitive recursion, composition, and Mu), their significance, and\nTuring Machine implementations. 19\\. Explain how computation is performed in\nLambda Calculus (e.g., Alpha conversion and Beta reduction) Non-core: 20\\. For\na quantum system give examples that explain the following postulates. a. State\nSpace - system state represented as a unit vector in Hilbert space, b. State\nEvolution - the use of unitary operators to evolve system state, c. State\nComposition - the use of tensor product to compose systems states, d. State\nMeasurement - the probabilistic output of measuring a system state. 21\\.\nExplain the operation of a quantum XNOT or CNOT gate on a quantum bit\nrepresented as a matrix and column vector, respectively</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1713abb0acb18c93c7cdebb5cabe6e5c46e0b282f23c4afaf8fa7bbaacb28578> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:N7e34601684ce4d93ac14bf624722a44f <http://groq.org/1713abb0acb18c93c7cdebb5cabe6e5c46e0b282f23c4afaf8fa7bbaacb28578> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/1713abb0acb18c93c7cdebb5cabe6e5c46e0b282f23c4afaf8fa7bbaacb28578> .
_:N7e34601684ce4d93ac14bf624722a44f <http://schema.org/answer> "0" <http://groq.org/1713abb0acb18c93c7cdebb5cabe6e5c46e0b282f23c4afaf8fa7bbaacb28578> .
_:N7e34601684ce4d93ac14bf624722a44f <http://schema.org/explain> "The lecture covers some aspects of formal automata and grammars but does not address the full scope of the KU, particularly missing key topics like Turing machines, decidability, and the Church-Turing thesis." <http://groq.org/1713abb0acb18c93c7cdebb5cabe6e5c46e0b282f23c4afaf8fa7bbaacb28578> .
_:Ne6ba87acd36e4dcaa9143ce41b2d5625 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Abstraction_Program_Abstraction_and_Representation.txt> <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
<http://example.org/course/UE_X32I030> <http://example.org/is_aligned_with> _:Ne6ba87acd36e4dcaa9143ce41b2d5625 <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
_:Ne6ba87acd36e4dcaa9143ce41b2d5625 <http://example.org/has_chunk> ".\n3. Explain side-effect using global and nonlocal variables and how to fix such programs.\n4. Explain how programs that process other programs treat the other programs as their input data.\n5. Describe a grammar and an abstract syntax tree for a small language.\n6. Describe the benefits of having program representations other than strings of source code.\n7. Implement a program to process some representation of code for some purpose, such as an\ninterpreter, an expression optimizer, or a documentation generator" <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
_:Nb2334e32832247509a7978653f30100a <http://example.org/has_score> "0.6225283"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
_:Ne6ba87acd36e4dcaa9143ce41b2d5625 <http://example.org/has_score> "0.6306107"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
_:Nb2334e32832247509a7978653f30100a <http://example.org/has_chunk> ". Lambda calculus, variable binding, and variable renaming. (See also: AL-Models, FPL-Formalism)\n17. Types of semantics: operational, axiomatic, denotational, behavioral; define and use abstract\nsyntax trees; contrast with concrete syntax.\nIllustrative learning outcomes:\nKA Core:\n1. Illustrate the scope of variables and visibility using simple programs.\n2. Illustrate different types of parameter-passing using simple pseudo programming language.\n3" <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
<http://example.org/course/UE_X32I030> <http://example.org/is_aligned_with> _:Nb50941a13a0d44079164903bbf116699 <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
<http://example.org/course/UE_X32I030> <http://example.org/is_aligned_with> _:Nb2334e32832247509a7978653f30100a <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
_:Nb50941a13a0d44079164903bbf116699 <http://example.org/has_chunk> ". CS applications: gradient descent for machine learning, forward and inverse kinematics,\napplications of calculus to probability\nNote: the calculus topics listed above are aligned with computer science goals rather than with\ntraditional calculus courses. For example, multivariate calculus is often a course by itself, but computer\nscience undergraduates only need parts of it for machine learning.\nIllustrative Learning Outcomes:\nKA Core:\n1. Sequences, series, limits\na" <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
<http://example.org/faiss> <http://example.org/input> "Label: Recherche opérationnelle Objectif: (résultats d'apprentissage)\n(A-M)\n- Connaître les notions de calendrier au plus tôt, calendrier au plus tard pour un ensemble de\ntâche, et la notion de marge d'une tâche dans le contexte d'un problème d'ordonnancement simple\n(M)\n- Etre capable de déterminer un calendrier au plus tôt, un calendrier au plus tard et les marges\ndes tâches, dans le contexte d'un problème d'ordonnancement simple (A)\n- Introduction à la problématique de l'optimisation multi-objectif : connaissance de la notion de\nsolution efficace, limite de l'utilisation de la somme pondérée (I)\n- Utilisation d'un langage de modélisation algébrique : comprendre la différence entre un modèle\nexplicite et un modèle implicite (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'écrire un modèle implicite\n(A)\n- Utilisation d'un langage de modélisation algébrique : comprendre l'utilisation d'une structure de\nmatrice creuse pour décrire des contraintes (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'utiliser une structure de\nmatrice creuse pour décrire des contraintes (A)\n- Utilisation d'un langage de modélisation algébrique : être capable de détermine si le choix d'une\nmatrice creuse est pertinent ou pas pour décrire des contraintes (A)\n- Utilisation d'un solveur MIP : comprendre l'utilisation d'un solveur MIP en tant que bibliothèque\nde fonction et être capable de l'utiliser pour résoudre un unique problème de programmation\nlinéaire en variables mixtes (A)\n- Utilisation d'un solveur MIP : être capable d'implémenter un algorithme donné, en faisant des\nappels successifs à un solveur MIP pour résoudre un problème de programmation linéaire en\nvariables mixtes (A) Course content: fondamental :\n- Course name: http://example.org/course/UE_X32I030" <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
_:Nb50941a13a0d44079164903bbf116699 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Mathematical_and_Statistical_Foundations_MSF/MSF-Calculus.txt> <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
_:Nb2334e32832247509a7978653f30100a <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Abstraction_Program_Abstraction_and_Representation.txt> <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
_:Nb50941a13a0d44079164903bbf116699 <http://example.org/has_score> "0.6273762"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/6b4d68f9b5cd7be8769e2c8b39eee1913b12e97ee9eb5767d19b302216296e0c> .
<http://example.org/course/UE_X32I050> <http://example.org/is_aligned_with> _:Nde54dd04f81e41e48dd5dbbb6d5fb8f9 <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:N516e415858ac4c9b8b1ecb24d49fc0a5 <http://example.org/has_score> "0.7228141"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:N516e415858ac4c9b8b1ecb24d49fc0a5 <http://example.org/has_chunk> ". (See also: AI-LRR)\n13. Integration with other programming paradigms such as object-oriented programming.\n14. Advance programming constructs such as difference-lists, creating user defined data structures, set\nof, etc.\nIllustrative learning outcomes:\nKA Core:\n1. Use a logic language to implement a conventional algorithm.\n2. Use a logic language to implement an algorithm employing implicit search using clauses, relations,\nand cuts.\n3" <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:Nde54dd04f81e41e48dd5dbbb6d5fb8f9 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-LRR_Logical_Representation_and_Reasoning.txt> <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:N516e415858ac4c9b8b1ecb24d49fc0a5 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:Nf3916768965e442896bfa780d32f703d <http://example.org/has_score> "0.70751655"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
<http://example.org/faiss> <http://example.org/input> "Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050" <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:Nde54dd04f81e41e48dd5dbbb6d5fb8f9 <http://example.org/has_chunk> ".g., situation and event calculus)\n8. Temporal and spatial reasoning\n9. Logic programming\na. Prolog, Answer Set Programming\n10. Rule-based Expert Systems\n11. Semantic networks\n12. Model-based and Case-based reasoning\nIllustrative Learning Outcomes:\n1. Translate a natural language (e.g., English) sentence into a predicate logic statement.\n2. Convert a logic statement into clausal form.\n3. Apply resolution to a set of logic statements to answer a query.\n4" <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
<http://example.org/course/UE_X32I050> <http://example.org/is_aligned_with> _:Nf3916768965e442896bfa780d32f703d <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:Nf3916768965e442896bfa780d32f703d <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Fundamental_Programming_Concepts_and_Practices.txt> <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:Nde54dd04f81e41e48dd5dbbb6d5fb8f9 <http://example.org/has_score> "0.70038986"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
_:Nf3916768965e442896bfa780d32f703d <http://example.org/has_chunk> ". Libraries and frameworks provided by the language (when/where applicable) \n8. Recursion \n9. Dealing with runtime errors in programs (e.g., exception handling). \n10. Basic concepts of programming errors, testing, and debugging (See also:  SE-Construction, SEC-Coding)  \n11. Documenting/commenting code at the program and module level.(See also:  SE-Construction)   \n12. Develop a security mindset. (See also: SEC-Foundations)" <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
<http://example.org/course/UE_X32I050> <http://example.org/is_aligned_with> _:N516e415858ac4c9b8b1ecb24d49fc0a5 <http://faiss.org/da587d7957a42a770f89a4dac7484e5adb2aa7d4eb4561cfa8653f27c3ebd7ef> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:N72d2932d2314470995748af6f7006114 <http://groq.org/1f1f9ae72034e7d23d86c5afdc32b98eb2caed2405f514cdbfd74d08ce6abe44> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/1f1f9ae72034e7d23d86c5afdc32b98eb2caed2405f514cdbfd74d08ce6abe44> .
_:N72d2932d2314470995748af6f7006114 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1f1f9ae72034e7d23d86c5afdc32b98eb2caed2405f514cdbfd74d08ce6abe44> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/1f1f9ae72034e7d23d86c5afdc32b98eb2caed2405f514cdbfd74d08ce6abe44> .
_:N72d2932d2314470995748af6f7006114 <http://schema.org/answer> "0" <http://groq.org/1f1f9ae72034e7d23d86c5afdc32b98eb2caed2405f514cdbfd74d08ce6abe44> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1f1f9ae72034e7d23d86c5afdc32b98eb2caed2405f514cdbfd74d08ce6abe44> .
_:N72d2932d2314470995748af6f7006114 <http://schema.org/explain> "No overlap in subject matter; lecture focuses on teaching methods while KU is about formal methods in SE" <http://groq.org/1f1f9ae72034e7d23d86c5afdc32b98eb2caed2405f514cdbfd74d08ce6abe44> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/a31446b6d4e91ac70f90a6570f88c22918445a4dc264f62b5aea45ca752ee41c> .
_:Na9a3d57bf458488e93ebda9022391a54 <http://schema.org/explain> "Lecture focuses on teaching methods, while KU covers technical platform/programming concepts." <http://groq.org/a31446b6d4e91ac70f90a6570f88c22918445a4dc264f62b5aea45ca752ee41c> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:Na9a3d57bf458488e93ebda9022391a54 <http://groq.org/a31446b6d4e91ac70f90a6570f88c22918445a4dc264f62b5aea45ca752ee41c> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/a31446b6d4e91ac70f90a6570f88c22918445a4dc264f62b5aea45ca752ee41c> .
_:Na9a3d57bf458488e93ebda9022391a54 <http://schema.org/answer> "0" <http://groq.org/a31446b6d4e91ac70f90a6570f88c22918445a4dc264f62b5aea45ca752ee41c> .
_:Na9a3d57bf458488e93ebda9022391a54 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/a31446b6d4e91ac70f90a6570f88c22918445a4dc264f62b5aea45ca752ee41c> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/a31446b6d4e91ac70f90a6570f88c22918445a4dc264f62b5aea45ca752ee41c> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/a29c13f5615c89c724a0723f98bd8a99d52c853cee2f247b09659750a83e0d38> .
_:N42621bedb7fe4338b1ad0ba38669c2e3 <http://schema.org/answer> "1" <http://groq.org/a29c13f5615c89c724a0723f98bd8a99d52c853cee2f247b09659750a83e0d38> .
_:N42621bedb7fe4338b1ad0ba38669c2e3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/a29c13f5615c89c724a0723f98bd8a99d52c853cee2f247b09659750a83e0d38> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Bases de données 2 Objectif: (résultats d'apprentissage) • Savoir déterminer des contraintes d’intégrité\n• Savoir appliquer un contrôle d’accès basique à une base de données\n• Comprendre la notion de vue\n• Connaître la structuration physique des données\n• Comprendre la notion de transaction\n• Comprendre la notion d’ordonnancement sérialisable\n• Comprendre la technique de contrôle de concurrence par verrouillage\n• Comprendre les fonctions d’un optimiseur de requêtes\n• Comprendre un plan d’exécution d’une requête\n• Connaître les structures accélératrices d’accès aux données (indexes) Course content: Extension procédurale de SQL (PL/SQL) , BD actives (Déclencheurs) Interrogation d'une base avec Course name: http://example.org/course/UE_X32I040</page1>\n        <page2>Pages: 117-118 HOURS CS Core = 1 KA Core = 3 DM-Relational: Relational\nDatabases CS Core: 1\\. Entity and referential integrity: Candidate key,\nsuperkeys 2\\. Relational database design KA Core: 3\\. Mapping conceptual\nschema to a relational schema 4\\. Physical database design: file and storage\nstructures (See also: OS-Files) 5\\. Introduction to Functional dependency\ntheory 6\\. Normalization Theory a. Decomposition of a schema; lossless-join,\nand dependency-preservation properties of a decomposition b. Normal forms\n(BCNF) c. Denormalization (for efficiency) Non-core: 7\\. Functional dependency\ntheory a. Closure of a set of attributes b. Canonical Cover 8\\. Normalization\ntheory a. Multi-valued dependency (4NF) b. Join dependency (PJNF, 5NF) c.\nRepresentation theory Illustrative Learning Outcomes: CS Core: 1\\. Describe\nthe defining characteristics behind the relational data model. 2\\. Comment on\nthe difference between a foreign key and a superkey. 3\\. Enumerate the\ndifferent types of integrity constraints. KA Core: 4\\. Compose a relational\nschema from a conceptual schema which contains 1:1, 1:n, and n:m\nrelationships. 5\\. Map appropriate file structure to relations and indices.\n6\\. Describe how functional dependency theory generalizes the notion of key.\n7\\. Defend a given decomposition as lossless and or dependency preserving. 8\\.\nDetect which normal form a given decomposition yields. 9\\. Comment on reasons\nfor denormalizing a relation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/a29c13f5615c89c724a0723f98bd8a99d52c853cee2f247b09659750a83e0d38> .
_:N42621bedb7fe4338b1ad0ba38669c2e3 <http://schema.org/explain> "The lecture covers most of the knowledge units, including entity and referential integrity, relational database design, normalization theory, and functional dependency theory." <http://groq.org/a29c13f5615c89c724a0723f98bd8a99d52c853cee2f247b09659750a83e0d38> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I040" <http://groq.org/a29c13f5615c89c724a0723f98bd8a99d52c853cee2f247b09659750a83e0d38> .
<http://example.org/course/UE_X32I040> <http://example.org/has_schema_type> _:N42621bedb7fe4338b1ad0ba38669c2e3 <http://groq.org/a29c13f5615c89c724a0723f98bd8a99d52c853cee2f247b09659750a83e0d38> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I050" <http://groq.org/65e21be961c003052b01fbed302cbe50d12caef3b46c327670bca1ac1afccac1> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/65e21be961c003052b01fbed302cbe50d12caef3b46c327670bca1ac1afccac1> .
_:N46710e45923e48bfa6c25d7189c020c2 <http://schema.org/answer> "1" <http://groq.org/65e21be961c003052b01fbed302cbe50d12caef3b46c327670bca1ac1afccac1> .
_:N46710e45923e48bfa6c25d7189c020c2 <http://schema.org/explain> "The lecture covers the fundamental building blocks of computers, programming abstractions, and pipelining, which are all key concepts in the KU." <http://groq.org/65e21be961c003052b01fbed302cbe50d12caef3b46c327670bca1ac1afccac1> .
_:N46710e45923e48bfa6c25d7189c020c2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/65e21be961c003052b01fbed302cbe50d12caef3b46c327670bca1ac1afccac1> .
<http://example.org/course/UE_X31I050> <http://example.org/has_schema_type> _:N46710e45923e48bfa6c25d7189c020c2 <http://groq.org/65e21be961c003052b01fbed302cbe50d12caef3b46c327670bca1ac1afccac1> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Architecture des ordinateurs Objectif: (résultats d'apprentissage)\nl'implémentation des éléments logiques de base (mux/demux, registres, ...);\n• connaître les principes de la programmation dans un langage d'assemblage et savoir traduire les\nappels de fonctions et de procédures en respectant les conventions dictées par l'environnement;\n• savoir mettre en oeuvre un processeur monocycle simple en définissant les chemins de données\nde son jeu d'instructions;\n• connaître les principes sous-tendant les processeurs multicycles et les architectures pipelinées\n• connaître la notion de cache mémoire et ses différentes implémentations, et en connaître les\nimpacts sur les algorithmes. Course content: données et de\ncontrôle).\n* Les mémoires: communication par bus, principe de localité, cache, virtualisation\n* Multiprocesseurs, multicœurs et GPU [optionnel, en fonction du temps disponible] Course name: http://example.org/course/UE_X31I050</page1>\n        <page2>Pages : 230-231 CS Core : 3, KA Core : 0 CS Core: 1\\. Basic building blocks\nand components of a computer (gates, flip-flops, registers, interconnections;\ndatapath + control + memory) 2\\. Hardware as a computational paradigm:\nFundamental logic building blocks; Logic expressions, minimization, sum of\nproduct forms (See also: AR-Logic) 3\\. Programming abstractions, interfaces,\nuse of libraries (See also: PDC-Programs) 4\\. Distinction and interaction\nbetween application and OS services, remote procedure call (See also: OS-\nPurpose) 5\\. Basic concept of pipelining, overlapped processing stages (See\nalso: AR-Organization) 6\\. Basic concept of scaling: performance vs problem\nsize Illustrative Learning Outcomes: CS Core: 1\\. Describe the basic building\nblocks of computers and their role in the historical development of computer\narchitecture. 2\\. Design a simple logic circuit using the fundamental building\nblocks of logic design to solve a simple problem (e.g., adder). 3\\. Describe\nhow computing systems are constructed of layers upon layers, based on\nseparation of concerns, with well-defined interfaces, hiding details of low\nlayers from the higher layers. 4\\. Describe that hardware, OS, VM, and\napplication are additional layers of interpretation/processing. 5\\. Describe\nthe mechanisms of how errors are detected, signaled back, and handled through\nthe layers. 6\\. Construct a simple program (e.g., a TCP client/server) using\nmethods of layering, error detection and recovery, and reflection of error\nstatus across layers. 7\\. Identify bugs in a layered program by using tools\nfor program tracing, single stepping, and debugging. 8\\. Understand the\nconcept of strong vs weak scaling, i.e., how performance is affected by the\nscale of the problem vs the scale of resources to solve the problem. This can\nbe motivated by simple, real-world examples.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/65e21be961c003052b01fbed302cbe50d12caef3b46c327670bca1ac1afccac1> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:N46f859220c7141a9a089ecffbaaf1c5c <http://groq.org/82299212beb505c5440320ddeb6136417c6bcacf00a95ac9021cd729a350228a> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/82299212beb505c5440320ddeb6136417c6bcacf00a95ac9021cd729a350228a> .
_:N46f859220c7141a9a089ecffbaaf1c5c <http://schema.org/explain> "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." <http://groq.org/82299212beb505c5440320ddeb6136417c6bcacf00a95ac9021cd729a350228a> .
_:N46f859220c7141a9a089ecffbaaf1c5c <http://schema.org/answer> "1" <http://groq.org/82299212beb505c5440320ddeb6136417c6bcacf00a95ac9021cd729a350228a> .
_:N46f859220c7141a9a089ecffbaaf1c5c <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/82299212beb505c5440320ddeb6136417c6bcacf00a95ac9021cd729a350228a> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/82299212beb505c5440320ddeb6136417c6bcacf00a95ac9021cd729a350228a> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/82299212beb505c5440320ddeb6136417c6bcacf00a95ac9021cd729a350228a> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/d9d8bd209dbcd023b7959c7387ad9da3bc2ac8ae5d8f21b0fce393a8c8d33d0a> .
_:Nd405ef1e0d7b447b8373f8f526d3c6c1 <http://schema.org/explain> "The lecture covers topics such as automates and transducteurs, which align with the KU's focus on scripting and system tasks." <http://groq.org/d9d8bd209dbcd023b7959c7387ad9da3bc2ac8ae5d8f21b0fce393a8c8d33d0a> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS\nCore: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-\nOverview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface\nwith operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment\nvariables (See also: SF-Overview) 5\\. File abstraction and operators (See\nalso: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as\narrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-\nStructures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and\nprocesses (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:\nCS Core: 1\\. Create and execute automated scripts to manage various system\ntasks. 2\\. Solve various text processing problems through scripting.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/d9d8bd209dbcd023b7959c7387ad9da3bc2ac8ae5d8f21b0fce393a8c8d33d0a> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/d9d8bd209dbcd023b7959c7387ad9da3bc2ac8ae5d8f21b0fce393a8c8d33d0a> .
_:Nd405ef1e0d7b447b8373f8f526d3c6c1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/d9d8bd209dbcd023b7959c7387ad9da3bc2ac8ae5d8f21b0fce393a8c8d33d0a> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:Nd405ef1e0d7b447b8373f8f526d3c6c1 <http://groq.org/d9d8bd209dbcd023b7959c7387ad9da3bc2ac8ae5d8f21b0fce393a8c8d33d0a> .
_:Nd405ef1e0d7b447b8373f8f526d3c6c1 <http://schema.org/answer> "1" <http://groq.org/d9d8bd209dbcd023b7959c7387ad9da3bc2ac8ae5d8f21b0fce393a8c8d33d0a> .
_:Ne86baf5dcddf49678535c49b69e29d8f <http://schema.org/explain> "The lecture focuses on scientific communication in English, while the KU covers programming language design principles." <http://groq.org/20a6fef5fe9e15efa36ae538d42e10bd99a9b574a5862f1f15110e12b9523fdc> .
_:Ne86baf5dcddf49678535c49b69e29d8f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/20a6fef5fe9e15efa36ae538d42e10bd99a9b574a5862f1f15110e12b9523fdc> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages: 146-147 HOURS CS Core = 0 KA Core = 0 FPL-Design: Design Principles of\nProgramming Languages Non-core: 1\\. Language design principles a. Simplicity\nb. Security (See also: SEC-Coding) c. Fast translation d. Efficient object\ncode e. Orthogonality f. Readability g. Completeness h. Implementation\nstrategies 2\\. Designing a language to fit a specific domain or problem 3\\.\nInteroperability between programming languages 4\\. Language portability 5\\.\nFormal description of a programming language 6\\. Green computing principles\n(See also: SEP-Sustainability) Illustrative Learning Outcomes: Non-core: 1\\.\nUnderstand what constitutes good language design and apply that knowledge to\nevaluate a real programming language.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/20a6fef5fe9e15efa36ae538d42e10bd99a9b574a5862f1f15110e12b9523fdc> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/20a6fef5fe9e15efa36ae538d42e10bd99a9b574a5862f1f15110e12b9523fdc> .
_:Ne86baf5dcddf49678535c49b69e29d8f <http://schema.org/answer> "0" <http://groq.org/20a6fef5fe9e15efa36ae538d42e10bd99a9b574a5862f1f15110e12b9523fdc> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/20a6fef5fe9e15efa36ae538d42e10bd99a9b574a5862f1f15110e12b9523fdc> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:Ne86baf5dcddf49678535c49b69e29d8f <http://groq.org/20a6fef5fe9e15efa36ae538d42e10bd99a9b574a5862f1f15110e12b9523fdc> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Architecture des ordinateurs Objectif: (résultats d'apprentissage)\nl'implémentation des éléments logiques de base (mux/demux, registres, ...);\n• connaître les principes de la programmation dans un langage d'assemblage et savoir traduire les\nappels de fonctions et de procédures en respectant les conventions dictées par l'environnement;\n• savoir mettre en oeuvre un processeur monocycle simple en définissant les chemins de données\nde son jeu d'instructions;\n• connaître les principes sous-tendant les processeurs multicycles et les architectures pipelinées\n• connaître la notion de cache mémoire et ses différentes implémentations, et en connaître les\nimpacts sur les algorithmes. Course content: données et de\ncontrôle).\n* Les mémoires: communication par bus, principe de localité, cache, virtualisation\n* Multiprocesseurs, multicœurs et GPU [optionnel, en fonction du temps disponible] Course name: http://example.org/course/UE_X31I050</page1>\n        <page2>Pages:103-104 HOURS CS Core = 1 KA Core = 2 AR-Assembly: Assembly Level\nMachine Organization CS Core: 1\\. von Neumann machine architecture 2\\. Control\nunit: instruction fetch, decode, and execution (See also: OS-Principles) 3\\.\nIntroduction to SIMD vs MIMD and the Flynn taxonomy (See also: PDC-Programs,\nOS-Scheduling, OS-Process) 104 4\\. Shared memory multiprocessors/multicore\norganization (See also: PDC-Programs, OS-Scheduling) KA Core: 5\\. Instruction\nset architecture (ISA) (e.g., x86, ARM and RISC-V) a. Fixed vs variable-width\ninstruction sets b. Instruction formats c. Data manipulation, control, I/O d.\nAddressing modes e. Machine language programming f. Assembly language\nprogramming 6\\. Subroutine call and return mechanisms (See also: FPL-\nTranslation, OS-Principles) 7\\. I/O and interrupts (See also: OS-Principles)\n8\\. Heap, static, stack, and code segments (See also: FPL-Translation, OS-\nProcess) Illustrative Learning Outcomes: CS Core: 1\\. Discuss how the\nclassical von Neumann functional units are implemented in embedded systems,\nparticularly on-chip and off-chip memory. 2\\. Describe how instructions are\nexecuted in a classical von Neumann machine, with extensions for threads,\nmultiprocessor synchronization, and SIMD execution. 3\\. Assess an example\ndiagram with instruction-level parallelism and hazards to describe how they\nare managed in typical processor pipelines. KA Core: 4\\. Discuss how\ninstructions are represented at the machine level and in the context of a\nsymbolic assembler. 5\\. Map an example of high-level language patterns into\nassembly/machine language notations. 6\\. Contrast different instruction\nformats considering aspects such as addresses per instruction and variable-\nlength vs fixed-length formats. 7\\. Analyze a subroutine diagram to comment on\nhow subroutine calls are handled at the assembly level. 8\\. Describe basic\nconcepts of interrupts and I/O operations. 9\\. Write a simple assembly\nlanguage program for string/array processing and manipulation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/501061df9f5538b7209d6bbeb328abffcd669f21eedaf7030d2ab9d293ef98fe> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I050" <http://groq.org/501061df9f5538b7209d6bbeb328abffcd669f21eedaf7030d2ab9d293ef98fe> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/501061df9f5538b7209d6bbeb328abffcd669f21eedaf7030d2ab9d293ef98fe> .
<http://example.org/course/UE_X31I050> <http://example.org/has_schema_type> _:N6f12c099005547bea82b94287e736e73 <http://groq.org/501061df9f5538b7209d6bbeb328abffcd669f21eedaf7030d2ab9d293ef98fe> .
_:N6f12c099005547bea82b94287e736e73 <http://schema.org/answer> "1" <http://groq.org/501061df9f5538b7209d6bbeb328abffcd669f21eedaf7030d2ab9d293ef98fe> .
_:N6f12c099005547bea82b94287e736e73 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/501061df9f5538b7209d6bbeb328abffcd669f21eedaf7030d2ab9d293ef98fe> .
_:N6f12c099005547bea82b94287e736e73 <http://schema.org/explain> "The lecture covers most of the knowledge units, including architecture, programming, and memory organization, with some overlap in topics." <http://groq.org/501061df9f5538b7209d6bbeb328abffcd669f21eedaf7030d2ab9d293ef98fe> .
_:Nc0fe6a9e1f7943eab8dab005378cb70c <http://schema.org/explain> "Lecture focuses on professional skills and basic ML concepts (e.g., overfitting, data preprocessing), but lacks depth on algorithms, mathematical foundations, and extensive evaluation/ethical analysis required by the KU." <http://groq.org/6d2549e02d31c611cf7eb328110635a42910fd16f03f5ce7a23fbb31d41f3b11> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:Nc0fe6a9e1f7943eab8dab005378cb70c <http://groq.org/6d2549e02d31c611cf7eb328110635a42910fd16f03f5ce7a23fbb31d41f3b11> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages:71-75 HOURS CS Core = 4 KA Core = 6 AI-ML: Machine Learning CS Core: 1\\.\nDefinition and examples of a broad variety of machine learning tasks a.\nSupervised learning i. Classification ii. Regression b. Reinforcement learning\nc. Unsupervised learning i. Clustering 2\\. Fundamental ideas: a. No free lunch\ntheorem: no one learner can solve all problems; representational design\ndecisions have consequences. b. Sources of error and undecidability in machine\nlearning 3\\. A simple statistical-based supervised learning such as linear\nregression or decision trees a. Focus on how they work without going into\nmathematical or optimization details; enough to understand and use existing\nimplementations correctly 4\\. The overfitting problem/controlling solution\ncomplexity (regularization, pruning - intuition only) a. The bias\n(underfitting) - variance (overfitting) tradeoff 5\\. Working with Data a. Data\npreprocessing i. Importance and pitfalls of preprocessing choices b. Handling\nmissing values (imputing, flag-as-missing) i. Implications of imputing vs\nflag-as-missing c. Encoding categorical variables, encoding real-valued data\nd. Normalization/standardization e. Emphasis on real data, not textbook\nexamples 6\\. Representations a. Hypothesis spaces and complexity b. Simple\nbasis feature expansion, such as squaring univariate features c. Learned\nfeature representations 7\\. Machine learning evaluation a. Separation of\ntrain, validation, and test sets b. Performance metrics for classifiers c.\nEstimation of test performance on held-out data d. Tuning the parameters of a\nmachine learning model with a validation set e. Importance of understanding\nwhat a model is doing, where its pitfalls/shortcomings are, and the\nimplications of its decisions 8\\. Basic neural networks a. Fundamentals of\nunderstanding how neural networks work and their training process, without\ndetails of the calculations b. Basic introduction to generative neural\nnetworks (e.g., large language models) 9\\. Ethics for Machine Learning (See\nalso: SEP-Context) a. Focus on real data, real scenarios, and case studies b.\nDataset/algorithmic/evaluation bias and unintended consequences 72 KA Core:\n10\\. Formulation of simple machine learning as an optimization problem, such\nas least squares linear regression or logistic regression a. Objective\nfunction b. Gradient descent c. Regularization to avoid overfitting\n(mathematical formulation) 11\\. Ensembles of models a. Simple weighted\nmajority combination 12\\. Deep learning a. Deep feed-forward networks\n(intuition only, no mathematics) b. Convolutional neural networks (intuition\nonly, no mathematics) c. Visualization of learned feature representations from\ndeep nets d. Other architectures (generative NN, recurrent NN, transformers,\netc.) 13\\. Performance evaluation a. Other metrics for classification (e.g.,\nerror, precision, recall) b. Performance metrics for regressors c. Confusion\nmatrix d. Cross-validation i. Parameter tuning (grid/random search, via cross-\nvalidation) 14\\. Overview of reinforcement learning methods 15\\. Two or more\napplications of machine learning algorithms a. E.g., medicine and health,\neconomics, vision, natural language, robotics, game play 16\\. Ethics for\nMachine Learning a. Continued focus on real data, real scenarios, and case\nstudies (See also: SEP-Context) b. Privacy (See also: SEP-Privacy) c. Fairness\n(See also: SEP-Privacy) d. Intellectual property e. Explainability Non-core:\n17\\. General statistical-based learning, parameter estimation (maximum\nlikelihood) 18\\. Supervised learning a. Decision trees b. Nearest-neighbor\nclassification and regression c. Learning simple neural networks / multi-layer\nperceptrons d. Linear regression e. Logistic regression f. Support vector\nmachines (SVMs) and kernels g. Gaussian Processes 19\\. Overfitting a. The\ncurse of dimensionality b. Regularization (mathematical computations, L2 and\nL1 regularization) 20\\. Experimental design 73 a. Data preparation (e.g.,\nstandardization, representation, one-hot encoding) b. Hypothesis space c.\nBiases (e.g., algorithmic, search) d. Partitioning data: stratification,\ntraining set, validation set, test set e. Parameter tuning (grid/random\nsearch, via cross-validation) f. Performance evaluation i. Cross-validation\nii. Metric: error, precision, recall, confusion matrix iii. Receiver operating\ncharacteristic (ROC) curve and area under ROC curve 21\\. Bayesian learning\n(Cross-Reference AI/Reasoning Under Uncertainty) a. Naive Bayes and its\nrelationship to linear models b. Bayesian networks c. Prior/posterior d.\nGenerative models 22\\. Deep learning a. Deep feed-forward networks b. Neural\ntangent kernel and understanding neural network training c. Convolutional\nneural networks d. Autoencoders e. Recurrent networks f. Representations and\nknowledge transfer g. Adversarial training and generative adversarial networks\nh. Attention mechanisms 23\\. Representations a. Manually crafted\nrepresentations b. Basis expansion c. Learned representations (e.g., deep\nneural networks) 24\\. Unsupervised learning and clustering a. K-means b.\nGaussian mixture models c. Expectation maximization (EM) d. Self-organizing\nmaps 25\\. Graph analysis (e.g., PageRank) 26\\. Semi-supervised learning 27\\.\nGraphical models (See also: AI-Probability) 28\\. Ensembles a. Weighted\nmajority b. Boosting/bagging c. Random forest d. Gated ensemble 29\\. Learning\ntheory a. General overview of learning theory / why learning works b. VC\ndimension c. Generalization bounds 74 30\\. Reinforcement learning a.\nExploration vs exploitation tradeoff b. Markov decision processes c. Value and\npolicy iteration d. Policy gradient methods e. Deep reinforcement learning f.\nLearning from demonstration and inverse RL 31\\. Explainable / interpretable\nmachine learning a. Understanding feature importance (e.g., LIME, Shapley\nvalues) b. Interpretable models and representations 32\\. Recommender systems\n33\\. Hardware for machine learning a. GPUs / TPUs 34\\. Application of machine\nlearning algorithms to: a. Medicine and health b. Economics c. Education d.\nVision e. Natural language f. Robotics g. Game play h. Data mining (Cross-\nreference DM/Data Analytics) 35\\. Ethics for Machine Learning a. Continued\nfocus on real data, real scenarios, and case studies (See also: SEP-Context)\nb. In depth exploration of dataset/algorithmic/evaluation bias, data privacy,\nand fairness (See also: SEP-Privacy, SEP-Context) c. Trust / explainability\nIllustrative Learning Outcomes: 1\\. Describe the differences among the three\nmain styles of learning (supervised, reinforcement, and unsupervised) and\ndetermine which is appropriate to a particular problem domain. 2\\.\nDifferentiate the terms of AI, machine learning, and deep learning. 3\\. Frame\nan application as a classification problem, including the available input\nfeatures and output to be predicted (e.g., identifying alphabetic characters\nfrom pixel grid input). 4\\. Apply two or more simple statistical learning\nalgorithms to a classification task and measure the classifiers' accuracy. 5\\.\nIdentify overfitting in the context of a problem and learning curves and\ndescribe solutions to overfitting. 6\\. Explain how machine learning works as\nan optimization/search process. 7\\. Implement a statistical learning algorithm\nand the corresponding optimization process to train the classifier and obtain\na prediction on new data. 8\\. Describe the neural network training process and\nresulting learned representations. 75 9\\. Explain proper ML evaluation\nprocedures, including the differences between training and testing\nperformance, and what can go wrong with the evaluation process leading to\ninaccurate reporting of ML performance. 10\\. Compare two machine learning\nalgorithms on a dataset, implementing the data preprocessing and evaluation\nmethodology (e.g., metrics and handling of train/test splits) from scratch.\n11\\. Visualize the training progress of a neural network through learning\ncurves in a well-established toolkit (e.g., TensorBoard) and visualize the\nlearned features of the network. 12\\. Compare and contrast several learning\ntechniques (e.g., decision trees, logistic regression, naive Bayes, neural\nnetworks, and belief networks), providing examples of when each strategy is\nsuperior. 13\\. Evaluate the performance of a simple learning system on a real-\nworld dataset. 14\\. Characterize the state of the art in learning theory,\nincluding its achievements and shortcomings. 15\\. Explain the problem of\noverfitting, along with techniques for detecting and managing the problem.\n16\\. Explain the triple tradeoff among the size of a hypothesis space, the\nsize of the training set, and performance accuracy. 17\\. Given a real-world\napplication of machine learning, describe ethical issues regarding the choices\nof data, preprocessing steps, algorithm selection, and\nvisualization/presentation of results</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/6d2549e02d31c611cf7eb328110635a42910fd16f03f5ce7a23fbb31d41f3b11> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/6d2549e02d31c611cf7eb328110635a42910fd16f03f5ce7a23fbb31d41f3b11> .
_:Nc0fe6a9e1f7943eab8dab005378cb70c <http://schema.org/answer> "0" <http://groq.org/6d2549e02d31c611cf7eb328110635a42910fd16f03f5ce7a23fbb31d41f3b11> .
_:Nc0fe6a9e1f7943eab8dab005378cb70c <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/6d2549e02d31c611cf7eb328110635a42910fd16f03f5ce7a23fbb31d41f3b11> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/6d2549e02d31c611cf7eb328110635a42910fd16f03f5ce7a23fbb31d41f3b11> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 130-131 HOURS CS Core = 4 + 1 (SDF) KA Core = 1 FPL-OOP: Object-\nOriented Programming CS Core: 1\\. Imperative programming as a subset of\nobject-oriented programming. 2\\. Object-oriented design: a. Decomposition into\nobjects carrying state and having behavior. b. Class-hierarchy design for\nmodeling. 3\\. Definition of classes: fields, methods, and constructors. (See\nalso: SDF-Fundamentals) 4\\. Subclasses, inheritance (including multiple\ninheritance), and method overriding. 5\\. Dynamic dispatch: definition of\nmethod-call. 6\\. Exception handling. (See also: SDF-Fundamentals, PDC-\nCoordination, SE-Construction) 7\\. Object-oriented idioms for encapsulation:\na. Privacy, data hiding, and visibility of class members. b. Interfaces\nrevealing only method signatures. c. Abstract base classes, traits and mixins.\n8\\. Dynamic vs static properties. 9\\. Composition vs inheritance. 10\\.\nSubtyping: a. Subtype polymorphism; implicit upcasts in typed languages. b.\nNotion of behavioral replacement: subtypes acting like supertype. c.\nRelationship between subtyping and inheritance. KA Core: 11\\. Collection\nclasses, iterators, and other common library components. 12\\. Metaprogramming\nand reflection. Illustrative Learning Outcomes: CS Core: 1\\. Enumerate the\ndifferences between imperative and object-oriented programming paradigms. 2\\.\nCompose a class through design, implementation, and testing to meet behavioral\nrequirements. 3\\. Build a simple class hierarchy utilizing subclassing that\nallows code to be reused for distinct subclasses. 4\\. Predict and validate\ncontrol flow in a program using dynamic dispatch. 5\\. Compare and contrast how\ncomputational solutions to a problem differ in procedural, functional, and\nobject-oriented approaches. 6\\. Compare and contrast mechanisms to define and\nprotect data elements within procedural, functional, and object-oriented\napproaches. 7\\. Compare and contrast the benefits and costs/impact of using\ninheritance (subclasses) and composition (specifically, how to base\ncomposition on higher order functions). 8\\. Explain the relationship between\nobject-oriented inheritance (code-sharing and overriding) and subtyping (the\nidea of a subtype being usable in a context that expects the supertype). 9\\.\nUse object-oriented encapsulation mechanisms such as interfaces and private\nmembers. 10\\. Define and use iterators and other operations on aggregates,\nincluding operations that take functions as arguments, in multiple programming\nlanguages, selecting the most natural idioms for each language. (See also:\nFPL-Functional) KA Core: 11\\. Use collection classes and iterators effectively\nto solve a problem.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/cd07dc866b0b1f8ae608af4f47d7daf8363fd4691734479dea908cefeb12fbcb> .
_:Na16ac7c05a63472faa93073505fe5b04 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/cd07dc866b0b1f8ae608af4f47d7daf8363fd4691734479dea908cefeb12fbcb> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:Na16ac7c05a63472faa93073505fe5b04 <http://groq.org/cd07dc866b0b1f8ae608af4f47d7daf8363fd4691734479dea908cefeb12fbcb> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/cd07dc866b0b1f8ae608af4f47d7daf8363fd4691734479dea908cefeb12fbcb> .
_:Na16ac7c05a63472faa93073505fe5b04 <http://schema.org/explain> "Lecture focuses on theoretical CS (decidability, recursion), while KU addresses object-oriented programming concepts, which are unrelated." <http://groq.org/cd07dc866b0b1f8ae608af4f47d7daf8363fd4691734479dea908cefeb12fbcb> .
_:Na16ac7c05a63472faa93073505fe5b04 <http://schema.org/answer> "0" <http://groq.org/cd07dc866b0b1f8ae608af4f47d7daf8363fd4691734479dea908cefeb12fbcb> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/cd07dc866b0b1f8ae608af4f47d7daf8363fd4691734479dea908cefeb12fbcb> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/57e6028404ea1e25f6a27d984abc18252b6b093497973c8cb46054af3e37fc21> .
_:N960f532fc18c4b4bbffc0f865dd61297 <http://schema.org/explain> "The lecture focuses on communication skills in English for scientific purposes, whereas the KU discusses design principles of programming languages, which are unrelated topics." <http://groq.org/57e6028404ea1e25f6a27d984abc18252b6b093497973c8cb46054af3e37fc21> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages: 146-147 HOURS CS Core = 0 KA Core = 0 FPL-Design: Design Principles of\nProgramming Languages Non-core: 1\\. Language design principles a. Simplicity\nb. Security (See also: SEC-Coding) c. Fast translation d. Efficient object\ncode e. Orthogonality f. Readability g. Completeness h. Implementation\nstrategies 2\\. Designing a language to fit a specific domain or problem 3\\.\nInteroperability between programming languages 4\\. Language portability 5\\.\nFormal description of a programming language 6\\. Green computing principles\n(See also: SEP-Sustainability) Illustrative Learning Outcomes: Non-core: 1\\.\nUnderstand what constitutes good language design and apply that knowledge to\nevaluate a real programming language.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/57e6028404ea1e25f6a27d984abc18252b6b093497973c8cb46054af3e37fc21> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:N960f532fc18c4b4bbffc0f865dd61297 <http://groq.org/57e6028404ea1e25f6a27d984abc18252b6b093497973c8cb46054af3e37fc21> .
_:N960f532fc18c4b4bbffc0f865dd61297 <http://schema.org/answer> "0" <http://groq.org/57e6028404ea1e25f6a27d984abc18252b6b093497973c8cb46054af3e37fc21> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/57e6028404ea1e25f6a27d984abc18252b6b093497973c8cb46054af3e37fc21> .
_:N960f532fc18c4b4bbffc0f865dd61297 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/57e6028404ea1e25f6a27d984abc18252b6b093497973c8cb46054af3e37fc21> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/98ec04900b2bda07b7970c29aff5485c7f4ec4bc870d60448ae9638b404198a2> .
_:Nc408456145944d99a8dbccd79799ab14 <http://schema.org/answer> "0" <http://groq.org/98ec04900b2bda07b7970c29aff5485c7f4ec4bc870d60448ae9638b404198a2> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/98ec04900b2bda07b7970c29aff5485c7f4ec4bc870d60448ae9638b404198a2> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:Nc408456145944d99a8dbccd79799ab14 <http://groq.org/98ec04900b2bda07b7970c29aff5485c7f4ec4bc870d60448ae9638b404198a2> .
_:Nc408456145944d99a8dbccd79799ab14 <http://schema.org/explain> "Lecture focuses on teaching methods/learning outcomes, while KU covers technical platform-specific programming constraints and languages." <http://groq.org/98ec04900b2bda07b7970c29aff5485c7f4ec4bc870d60448ae9638b404198a2> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/98ec04900b2bda07b7970c29aff5485c7f4ec4bc870d60448ae9638b404198a2> .
_:Nc408456145944d99a8dbccd79799ab14 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/98ec04900b2bda07b7970c29aff5485c7f4ec4bc870d60448ae9638b404198a2> .
_:N1d1d55c458f348c89902ec87d5b9e383 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1390e147dccf9315ae4d9a20651f5b3e2d050d4dcc3d1f8c6ada4b3980f28530> .
_:N1d1d55c458f348c89902ec87d5b9e383 <http://schema.org/answer> "0" <http://groq.org/1390e147dccf9315ae4d9a20651f5b3e2d050d4dcc3d1f8c6ada4b3980f28530> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:N1d1d55c458f348c89902ec87d5b9e383 <http://groq.org/1390e147dccf9315ae4d9a20651f5b3e2d050d4dcc3d1f8c6ada4b3980f28530> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/1390e147dccf9315ae4d9a20651f5b3e2d050d4dcc3d1f8c6ada4b3980f28530> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Pages:93-95 HOURS CS Core = 9 KA Core = 23 AL-Models: Computational Models and\nFormal Languages CS Core: 1\\. Formal automata a. Finite State b. Pushdown c.\nLinear Bounded d. Turing Machine 2\\. Formal languages, grammars and Chomsky\nHierarchy (See also: FPL-Translation, FPL-Syntax) a. Regular (Type-3) i.\nRegular Expressions b. Context-Free (Type-2) c. Context-Sensitive (Type-1) d.\nRecursively Enumerable (Type-0) 3\\. Relations among formal automata,\nlanguages, and grammars 4\\. Decidability, (un)computability, and halting 5\\.\nThe Church-Turing thesis 6\\. Algorithmic correctness a. Invariants (e.g., in\niteration, recursion, tree search) KA Core: 7\\. Deterministic and\nnondeterministic automata 8\\. Pumping Lemma proofs a. Proof of Finite\nState/Regular-Language limitation b. Pushdown Automata/Context-Free-Language\nlimitation 9\\. Decidability a. Arithmetization and diagonalization 10\\.\nReducibility and reductions 11\\. Time complexity based on Turing Machine 12\\.\nSpace complexity (e.g., Pspace, Savitch's Theorem) 13\\. Equivalent models of\nalgorithmic computation a. Turing Machines and Variations (e.g., multi-tape,\nnon-deterministic) b. Lambda Calculus (See also: FPL-Functional) c. Mu-\nRecursive Functions Non-core: 14\\. Quantum computation (See also: AR-Quantum)\na. Postulates of quantum mechanics i. State space 94 ii. State evolution iii.\nState composition iv. State measurement b. Column vector representations of\nqubits c. Matrix representations of quantum operations d. Simple quantum gates\n(e.g., XNOT, CNOT) Illustrative Learning Outcomes: CS Core: 1\\. For each\nformal automaton in this unit: a. Explain its definition comparing its\ncharacteristics with this unit's other automata, b. Using an example, explain\nstep-by-step how the automaton operates on input including whether it accepts\nthe associated input, c. Explain an example of inputs that can and cannot be\naccepted by the automaton. 2\\. Given a problem, develop an appropriate\nautomaton that addresses the problem. 3\\. Develop a regular expression for a\ngiven regular language expressed in natural language. 4\\. Explain the\ndifference between regular expressions (Type-3 acceptors) and the regular\nexpressions (Type-2 acceptors) used in programming languages. 5\\. For each\nformal model in this unit: a. Explain its definition comparing its\ncharacteristics with the others in this unit, b. Explain example inputs that\nare and cannot be accepted by the language/grammar. 6\\. Explain a universal\nTuring Machine and its operation. 7\\. Present to an audience of co-workers and\nmanagers the impossibility of providing them a program that checks all other\nprograms, including some seemingly simple ones, for infinite loops including\nan explanation of the Halting problem, why it has no algorithmic solution, and\nits significance for real-world algorithmic computation. 8\\. Explain examples\nof classic uncomputable problems. 9\\. Explain the Church-Turing Thesis and its\nsignificance for algorithmic computation. 10\\. Explain how (loop) invariants\ncan be used to prove the correctness of an algorithm. Illustrative Learning\nOutcomes: KA Core: 11\\. For each formal automaton in this unit explain\n(compare/contrast) its deterministic and nondeterministic capabilities. 12\\.\nApply pumping lemmas, or alternative means, to prove the limitations of Finite\nState and Pushdown automata. 13\\. Apply arithmetization and diagonalization to\nprove the Halting Problem for Turing Machines is Undecidability. 14\\. Given a\nknown undecidable language, apply a mapping reduction or computational history\nto prove that another language is undecidable. 15\\. Convert among equivalently\npowerful notations for a language, including among DFAs, NFAs, and regular\nexpressions, and between PDAs and CFGs. 16\\. Explain Rice's theorem and its\nsignificance. 95 17\\. Explain an example proof of a problem that is\nuncomputable by reducing a classic known uncomputable problem to it. 18\\.\nExplain the Primitive and General Recursive functions (zero, successor,\nselection, primitive recursion, composition, and Mu), their significance, and\nTuring Machine implementations. 19\\. Explain how computation is performed in\nLambda Calculus (e.g., Alpha conversion and Beta reduction) Non-core: 20\\. For\na quantum system give examples that explain the following postulates. a. State\nSpace - system state represented as a unit vector in Hilbert space, b. State\nEvolution - the use of unitary operators to evolve system state, c. State\nComposition - the use of tensor product to compose systems states, d. State\nMeasurement - the probabilistic output of measuring a system state. 21\\.\nExplain the operation of a quantum XNOT or CNOT gate on a quantum bit\nrepresented as a matrix and column vector, respectively</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1390e147dccf9315ae4d9a20651f5b3e2d050d4dcc3d1f8c6ada4b3980f28530> .
_:N1d1d55c458f348c89902ec87d5b9e383 <http://schema.org/explain> "Lecture focuses on algorithm analysis/proofs, while KU requires extensive automata theory, formal languages, and undecidability proofs not fully covered." <http://groq.org/1390e147dccf9315ae4d9a20651f5b3e2d050d4dcc3d1f8c6ada4b3980f28530> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/1390e147dccf9315ae4d9a20651f5b3e2d050d4dcc3d1f8c6ada4b3980f28530> .
_:Naf88d243c3c442949deaec29177124b6 <http://schema.org/explain> "The lecture does not cover the technical content described in the KU." <http://groq.org/b0bef7c07f66b672791cc383b60047edd364dd1c6025d6a553153ef96faebe3c> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/b0bef7c07f66b672791cc383b60047edd364dd1c6025d6a553153ef96faebe3c> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/b0bef7c07f66b672791cc383b60047edd364dd1c6025d6a553153ef96faebe3c> .
_:Naf88d243c3c442949deaec29177124b6 <http://schema.org/answer> "0" <http://groq.org/b0bef7c07f66b672791cc383b60047edd364dd1c6025d6a553153ef96faebe3c> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b0bef7c07f66b672791cc383b60047edd364dd1c6025d6a553153ef96faebe3c> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:Naf88d243c3c442949deaec29177124b6 <http://groq.org/b0bef7c07f66b672791cc383b60047edd364dd1c6025d6a553153ef96faebe3c> .
_:Naf88d243c3c442949deaec29177124b6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b0bef7c07f66b672791cc383b60047edd364dd1c6025d6a553153ef96faebe3c> .
_:N416b8aa9805044728b3c293036f04f34 <http://schema.org/answer> "0" <http://groq.org/b38f7851dec40261fd4bf0fb7e691c7ae556f954a90afcac15e33eda6926be6c> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/b38f7851dec40261fd4bf0fb7e691c7ae556f954a90afcac15e33eda6926be6c> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:N416b8aa9805044728b3c293036f04f34 <http://groq.org/b38f7851dec40261fd4bf0fb7e691c7ae556f954a90afcac15e33eda6926be6c> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b38f7851dec40261fd4bf0fb7e691c7ae556f954a90afcac15e33eda6926be6c> .
_:N416b8aa9805044728b3c293036f04f34 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b38f7851dec40261fd4bf0fb7e691c7ae556f954a90afcac15e33eda6926be6c> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/b38f7851dec40261fd4bf0fb7e691c7ae556f954a90afcac15e33eda6926be6c> .
_:N416b8aa9805044728b3c293036f04f34 <http://schema.org/explain> "Lecture focuses on data structures/algorithms, while KU covers logic programming concepts (unification, predicate logic) not addressed." <http://groq.org/b38f7851dec40261fd4bf0fb7e691c7ae556f954a90afcac15e33eda6926be6c> .
_:Nfd53a73b31fd4b48bf1ea0770fe71316 <http://schema.org/answer> "0" <http://groq.org/1759179534333e1f321bcf73e0325a83bdf6b1828bb737dacc0cac2302893768> .
_:Nfd53a73b31fd4b48bf1ea0770fe71316 <http://schema.org/explain> "Lecture focuses on automata/grammars, while KU covers formal semantics, type systems, and proofs." <http://groq.org/1759179534333e1f321bcf73e0325a83bdf6b1828bb737dacc0cac2302893768> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/1759179534333e1f321bcf73e0325a83bdf6b1828bb737dacc0cac2302893768> .
_:Nfd53a73b31fd4b48bf1ea0770fe71316 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1759179534333e1f321bcf73e0325a83bdf6b1828bb737dacc0cac2302893768> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages: 145-146 HOURS CS Core = 0 KA Core = 0 FPL-Formalism: Formal Semantics\nNon-core: 1\\. Syntax vs semantics 2\\. Approaches to semantics: axiomatic,\noperational, denotational, type-based 3\\. Axiomatic semantics of abstract\nconstructs such as assignment, selection, iteration using precondition, post-\nconditions, and loop invariant 4\\. Operational semantics analysis of abstract\nconstructs and sequence of such as assignment, expression evaluation,\nselection, iteration using environment and store a. Symbolic execution b.\nConstraint checkers 5\\. Denotational semantics a. Lambda Calculus. (See also:\nAL-Models, FPL-Functional) 6\\. Proofs by induction over language semantics 7\\.\nFormal definitions and proofs for type systems (See also: FPL-Types) a.\nPropositions as types (implication as a function, conjunction as a product,\ndisjunction as a sum) b. Dependent types (universal quantification as\ndependent function, existential quantification as dependent product) c.\nParametricity Illustrative learning outcomes: Non-core: 1\\. Construct formal\nsemantics for a small language. 2\\. Write a lambda-calculus program and show\nits evaluation to a normal form. 3\\. Discuss the different approaches of\noperational, denotational, and axiomatic semantics. 4\\. Use induction to prove\nproperties of all programs in a language. 5\\. Use induction to prove\nproperties of all programs in a language that is well-typed according to a\nformally defined type system. 6\\. Use parametricity to establish the behavior\nof code given only its type.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1759179534333e1f321bcf73e0325a83bdf6b1828bb737dacc0cac2302893768> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/1759179534333e1f321bcf73e0325a83bdf6b1828bb737dacc0cac2302893768> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:Nfd53a73b31fd4b48bf1ea0770fe71316 <http://groq.org/1759179534333e1f321bcf73e0325a83bdf6b1828bb737dacc0cac2302893768> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/95c574dfedfc984efd710239d652dd22b394c589d1baf04e7105b9e9a55b0ee0> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental\nConcepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic\ngraphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.\nRasterization and rendering techniques. 5\\. Fundamental shading models. KA\nCore: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in\ndifferent fields. 8\\. Interaction methods for graphical environments.\nIllustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.\n2\\. Differentiate between rasterization and ray tracing. 3\\. Apply\ntransformations to 2D and 3D models.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/95c574dfedfc984efd710239d652dd22b394c589d1baf04e7105b9e9a55b0ee0> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:N7ac99449b90d4d7eab39e0170bf7f604 <http://groq.org/95c574dfedfc984efd710239d652dd22b394c589d1baf04e7105b9e9a55b0ee0> .
_:N7ac99449b90d4d7eab39e0170bf7f604 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/95c574dfedfc984efd710239d652dd22b394c589d1baf04e7105b9e9a55b0ee0> .
_:N7ac99449b90d4d7eab39e0170bf7f604 <http://schema.org/explain> "The lecture focuses on teaching methods, not the technical graphics content of the KU." <http://groq.org/95c574dfedfc984efd710239d652dd22b394c589d1baf04e7105b9e9a55b0ee0> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/95c574dfedfc984efd710239d652dd22b394c589d1baf04e7105b9e9a55b0ee0> .
_:N7ac99449b90d4d7eab39e0170bf7f604 <http://schema.org/answer> "0" <http://groq.org/95c574dfedfc984efd710239d652dd22b394c589d1baf04e7105b9e9a55b0ee0> .
<http://example.org/course/UE_X31I040> <http://example.org/is_aligned_with> _:N0a6d15281d1a4b70a4a10a81d9e43a41 <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:N0a6d15281d1a4b70a4a10a81d9e43a41 <http://example.org/has_score> "0.6934676"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
<http://example.org/course/UE_X31I040> <http://example.org/is_aligned_with> _:N0218ec9c3a01461cbd72c6ee95e39da7 <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:Na467d4e2208242e697cfec5fe845d817 <http://example.org/has_score> "0.6764391"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:Na467d4e2208242e697cfec5fe845d817 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
<http://example.org/faiss> <http://example.org/input> "Label: Réseaux et Télécoms Objectif: (résultats d'apprentissage)\n• Comprendre les mécanismes de base des protocoles de l’Internet (http, tcp, ip, arp);\n• Connaître les défis techniques et sociétaux liés aux déploiements des réseaux; Course content: de l'UE : Internet : comment ça marche.\n• Introduction : les chiffres de l'Internet, histoire et perspectives.\n• Les protocoles applicatifs (http, smtp, dns, ...)\n• Le problème du transport fiable de bout en bout. TCP.\n• Le problème du contrôle de flux et congestion. TCP. Course name: http://example.org/course/UE_X31I040" <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:N0218ec9c3a01461cbd72c6ee95e39da7 <http://example.org/has_score> "0.72909"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
<http://example.org/course/UE_X31I040> <http://example.org/is_aligned_with> _:Na467d4e2208242e697cfec5fe845d817 <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:N0218ec9c3a01461cbd72c6ee95e39da7 <http://example.org/has_chunk> ". Layering principles (e.g., encapsulation and hourglass model) (See also: SF-Foundations)\n6. Network elements (e.g., routers, switches, hubs, access points, and hosts)\n7. Basic queueing concepts (e.g., relationship with latency, congestion, service levels, etc.)\nIllustrative Learning Outcomes:\nCS Core:\n1. Articulate the organization of the internet.\n2. List and define the appropriate network terminology\n3. Describe the layered structure of a typical networked architecture.\n4" <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:N0a6d15281d1a4b70a4a10a81d9e43a41 <http://example.org/has_chunk> ".g., HTTP)\n5. Interactions with TCP, UDP, and Socket APIs (See also: PDC-Programs)\nIllustrative Learning Outcomes:\nCS Core:\n1. Define the principles of naming, addressing, resource location.\n2. Analyze the needs of specific networked application demands.\n3. Describe the details of one application layer protocol.\n4. Implement a simple client-server socket-based application." <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:Na467d4e2208242e697cfec5fe845d817 <http://example.org/has_chunk> "NC-Fundamentals: Fundamentals\nCS Core:\n1. Importance of networking in contemporary computing, and associated challenges. (See also: SEPContext, SEP-Privacy)\n2. Organization of the internet (e.g., users, Internet Service Providers, autonomous systems, content\nproviders, content delivery networks)\n3. Switching techniques (e.g., circuit and packet)\n4. Layers and their roles (application, transport, network, datalink, and physical)\n5. Layering principles (e.g" <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:N0a6d15281d1a4b70a4a10a81d9e43a41 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Applications_Networked_Applications.txt> <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
_:N0218ec9c3a01461cbd72c6ee95e39da7 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> <http://faiss.org/5d2a20c5a2a48d9270b7f2f91cda85cc0ab3a8dd2f199ece9513326df7deba3b> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/39340c9aa728cd8ed2ddd0433bf56aeb52f3d1fe7948e92d5f6074cc713f39d5> .
_:N82bfecbfc95349fcb6c4cba7f2b220a8 <http://schema.org/explain> "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of this topic in computing, aligning with the KU's learning outcomes." <http://groq.org/39340c9aa728cd8ed2ddd0433bf56aeb52f3d1fe7948e92d5f6074cc713f39d5> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/39340c9aa728cd8ed2ddd0433bf56aeb52f3d1fe7948e92d5f6074cc713f39d5> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/39340c9aa728cd8ed2ddd0433bf56aeb52f3d1fe7948e92d5f6074cc713f39d5> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:N82bfecbfc95349fcb6c4cba7f2b220a8 <http://groq.org/39340c9aa728cd8ed2ddd0433bf56aeb52f3d1fe7948e92d5f6074cc713f39d5> .
_:N82bfecbfc95349fcb6c4cba7f2b220a8 <http://schema.org/answer> "1" <http://groq.org/39340c9aa728cd8ed2ddd0433bf56aeb52f3d1fe7948e92d5f6074cc713f39d5> .
_:N82bfecbfc95349fcb6c4cba7f2b220a8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/39340c9aa728cd8ed2ddd0433bf56aeb52f3d1fe7948e92d5f6074cc713f39d5> .
<http://example.org/course/UE_X31I030> <http://example.org/is_aligned_with> _:Na40f2b22b9444e15873f1bcb70e1f54c <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Nfbdda093f6fd47209f89094be3c1c18f <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Na40f2b22b9444e15873f1bcb70e1f54c <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Algorithmic_Foundations_AL/AL-Models_Computational_Models_and_Formal_Languages.txt> <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Na40f2b22b9444e15873f1bcb70e1f54c <http://example.org/has_chunk> ".\n2. Given a problem, develop an appropriate automaton that addresses the problem.\n3. Develop a regular expression for a given regular language expressed in natural language.\n4. Explain the difference between regular expressions (Type-3 acceptors) and the regular expressions\n(Type-2 acceptors) used in programming languages.\n5. For each formal model in this unit:\na. Explain its definition comparing its characteristics with the others in this unit,\nb" <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Nad3b558cc5cc44c28608ba47130697ec <http://example.org/has_chunk> ". Parametricity\nIllustrative learning outcomes:\nNon-core:\n1. Construct formal semantics for a small language.\n2. Write a lambda-calculus program and show its evaluation to a normal form.\n3. Discuss the different approaches of operational, denotational, and axiomatic semantics.\n4. Use induction to prove properties of all programs in a language.\n5. Use induction to prove properties of all programs in a language that is well-typed according to a\nformally defined type system.\n6" <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Na40f2b22b9444e15873f1bcb70e1f54c <http://example.org/has_score> "0.7020704"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Nad3b558cc5cc44c28608ba47130697ec <http://example.org/has_score> "0.6712515"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Nfbdda093f6fd47209f89094be3c1c18f <http://example.org/has_chunk> ". Regular expressions (See also: AL-Models)\n8. Programs and processes (See also: OS-Process)\n9. Workflow\nIllustrative learning outcomes:\nCS Core:\n1. Create and execute automated scripts to manage various system tasks.\n2. Solve various text processing problems through scripting." <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Nfbdda093f6fd47209f89094be3c1c18f <http://example.org/has_score> "0.6711116"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:Nad3b558cc5cc44c28608ba47130697ec <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Formalism_Formal_Semantics.txt> <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
<http://example.org/faiss> <http://example.org/input> "Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030" <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
<http://example.org/course/UE_X31I030> <http://example.org/is_aligned_with> _:Nfbdda093f6fd47209f89094be3c1c18f <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
<http://example.org/course/UE_X31I030> <http://example.org/is_aligned_with> _:Nad3b558cc5cc44c28608ba47130697ec <http://faiss.org/bbdb16463f53d79c939f5498706f8fe37868f381928a9afebd3e1549a5f14f4c> .
_:N9c56c15cf91e464599aebc77faa6c8ef <http://schema.org/answer> "0" <http://groq.org/580fa3548f8cc5d5636eb0960324e885c71279a6b4d46890040480f97e426f48> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/580fa3548f8cc5d5636eb0960324e885c71279a6b4d46890040480f97e426f48> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages: 145-146 HOURS CS Core = 0 KA Core = 0 FPL-Formalism: Formal Semantics\nNon-core: 1\\. Syntax vs semantics 2\\. Approaches to semantics: axiomatic,\noperational, denotational, type-based 3\\. Axiomatic semantics of abstract\nconstructs such as assignment, selection, iteration using precondition, post-\nconditions, and loop invariant 4\\. Operational semantics analysis of abstract\nconstructs and sequence of such as assignment, expression evaluation,\nselection, iteration using environment and store a. Symbolic execution b.\nConstraint checkers 5\\. Denotational semantics a. Lambda Calculus. (See also:\nAL-Models, FPL-Functional) 6\\. Proofs by induction over language semantics 7\\.\nFormal definitions and proofs for type systems (See also: FPL-Types) a.\nPropositions as types (implication as a function, conjunction as a product,\ndisjunction as a sum) b. Dependent types (universal quantification as\ndependent function, existential quantification as dependent product) c.\nParametricity Illustrative learning outcomes: Non-core: 1\\. Construct formal\nsemantics for a small language. 2\\. Write a lambda-calculus program and show\nits evaluation to a normal form. 3\\. Discuss the different approaches of\noperational, denotational, and axiomatic semantics. 4\\. Use induction to prove\nproperties of all programs in a language. 5\\. Use induction to prove\nproperties of all programs in a language that is well-typed according to a\nformally defined type system. 6\\. Use parametricity to establish the behavior\nof code given only its type.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/580fa3548f8cc5d5636eb0960324e885c71279a6b4d46890040480f97e426f48> .
_:N9c56c15cf91e464599aebc77faa6c8ef <http://schema.org/explain> "The lecture focuses on formal language theory and automata, while the KU covers formal semantics and type systems, which are distinct areas." <http://groq.org/580fa3548f8cc5d5636eb0960324e885c71279a6b4d46890040480f97e426f48> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/580fa3548f8cc5d5636eb0960324e885c71279a6b4d46890040480f97e426f48> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:N9c56c15cf91e464599aebc77faa6c8ef <http://groq.org/580fa3548f8cc5d5636eb0960324e885c71279a6b4d46890040480f97e426f48> .
_:N9c56c15cf91e464599aebc77faa6c8ef <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/580fa3548f8cc5d5636eb0960324e885c71279a6b4d46890040480f97e426f48> .
_:N49b591e155ea4a3db90777bd3b03a135 <http://schema.org/explain> "The lecture focuses on operational research and optimization, while the KU covers programming fundamentals, with no overlapping content." <http://groq.org/bec57e2ffcc9fbba57f44ed93793e0c53ce81a4c156aa85172d2361872471299> .
<http://example.org/course/UE_X32I030> <http://example.org/has_schema_type> _:N49b591e155ea4a3db90777bd3b03a135 <http://groq.org/bec57e2ffcc9fbba57f44ed93793e0c53ce81a4c156aa85172d2361872471299> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/bec57e2ffcc9fbba57f44ed93793e0c53ce81a4c156aa85172d2361872471299> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Recherche opérationnelle Objectif: (résultats d'apprentissage)\n(A-M)\n- Connaître les notions de calendrier au plus tôt, calendrier au plus tard pour un ensemble de\ntâche, et la notion de marge d'une tâche dans le contexte d'un problème d'ordonnancement simple\n(M)\n- Etre capable de déterminer un calendrier au plus tôt, un calendrier au plus tard et les marges\ndes tâches, dans le contexte d'un problème d'ordonnancement simple (A)\n- Introduction à la problématique de l'optimisation multi-objectif : connaissance de la notion de\nsolution efficace, limite de l'utilisation de la somme pondérée (I)\n- Utilisation d'un langage de modélisation algébrique : comprendre la différence entre un modèle\nexplicite et un modèle implicite (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'écrire un modèle implicite\n(A)\n- Utilisation d'un langage de modélisation algébrique : comprendre l'utilisation d'une structure de\nmatrice creuse pour décrire des contraintes (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'utiliser une structure de\nmatrice creuse pour décrire des contraintes (A)\n- Utilisation d'un langage de modélisation algébrique : être capable de détermine si le choix d'une\nmatrice creuse est pertinent ou pas pour décrire des contraintes (A)\n- Utilisation d'un solveur MIP : comprendre l'utilisation d'un solveur MIP en tant que bibliothèque\nde fonction et être capable de l'utiliser pour résoudre un unique problème de programmation\nlinéaire en variables mixtes (A)\n- Utilisation d'un solveur MIP : être capable d'implémenter un algorithme donné, en faisant des\nappels successifs à un solveur MIP pour résoudre un problème de programmation linéaire en\nvariables mixtes (A) Course content: fondamental :\n- Course name: http://example.org/course/UE_X32I030</page1>\n        <page2>Pages: 140-141 HOURS CS Core = 0 KA Core = 3 FPL-Abstraction: Program\nAbstraction and Representation KA Core: 1\\. BNF and regular expressions 2\\.\nPrograms that take (other) programs as input such as interpreters, compilers,\ntype-checkers, documentation generators 3\\. Components of a language: a.\nDefinitions of alphabets, delimiters, sentences, syntax, and semantics b.\nSyntax vs semantics 4\\. Program as a set of non-ambiguous meaningful sentences\n5\\. Basic programming abstractions: constants, variables, declarations\n(including nested declarations), command, expression, assignment, selection,\ndefinite and indefinite iteration, iterators, function, procedure, modules,\nexception handling (See also: SDF-Fundamentals) 6\\. Mutable vs immutable\nvariables: advantages and disadvantages of reusing existing memory location vs\nadvantages of copying and keeping old values; storing partial computation vs\nrecomputation 7\\. Types of variables: static, local, nonlocal, global; need\nand issues with nonlocal and global variables. 8\\. Scope rules: static vs\ndynamic; visibility of variables; side-effects. 9\\. Side-effects induced by\nnonlocal variables, global variables and aliased variables. Non-core: 10\\.\nL-values and R-values: mapping mutable variable-name to L-values; mapping\nimmutable variablenames to R-values 11\\. Environment vs store and their\nproperties 12\\. Data and control abstraction 13\\. Mechanisms for information\nexchange between program units such as procedures, functions, and modules:\nnonlocal variables, global variables, parameter-passing, import-export between\nmodules 14\\. Data structures to represent code for execution, translation, or\ntransmission. 15\\. Low level instruction representation such as virtual\nmachine instructions, assembly language, and binary representation (See also:\nAR-Representation, AR-Assembly) 16\\. Lambda calculus, variable binding, and\nvariable renaming. (See also: AL-Models, FPL-Formalism) 17\\. Types of\nsemantics: operational, axiomatic, denotational, behavioral; define and use\nabstract syntax trees; contrast with concrete syntax. Illustrative learning\noutcomes: KA Core: 1\\. Illustrate the scope of variables and visibility using\nsimple programs. 2\\. Illustrate different types of parameter-passing using\nsimple pseudo programming language. 3\\. Explain side-effect using global and\nnonlocal variables and how to fix such programs. 4\\. Explain how programs that\nprocess other programs treat the other programs as their input data. 5\\.\nDescribe a grammar and an abstract syntax tree for a small language. 6\\.\nDescribe the benefits of having program representations other than strings of\nsource code. 7\\. Implement a program to process some representation of code\nfor some purpose, such as an interpreter, an expression optimizer, or a\ndocumentation generator.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/bec57e2ffcc9fbba57f44ed93793e0c53ce81a4c156aa85172d2361872471299> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I030" <http://groq.org/bec57e2ffcc9fbba57f44ed93793e0c53ce81a4c156aa85172d2361872471299> .
_:N49b591e155ea4a3db90777bd3b03a135 <http://schema.org/answer> "0" <http://groq.org/bec57e2ffcc9fbba57f44ed93793e0c53ce81a4c156aa85172d2361872471299> .
_:N49b591e155ea4a3db90777bd3b03a135 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/bec57e2ffcc9fbba57f44ed93793e0c53ce81a4c156aa85172d2361872471299> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:N16c46ff0db614391ab2f1ba0d8d1edea <http://groq.org/f56f3054bcdc1d12cd1b0198d209a2f2917a9e2cf2bb3ee37336d7aa2961a0ee> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/f56f3054bcdc1d12cd1b0198d209a2f2917a9e2cf2bb3ee37336d7aa2961a0ee> .
_:N16c46ff0db614391ab2f1ba0d8d1edea <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/f56f3054bcdc1d12cd1b0198d209a2f2917a9e2cf2bb3ee37336d7aa2961a0ee> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/f56f3054bcdc1d12cd1b0198d209a2f2917a9e2cf2bb3ee37336d7aa2961a0ee> .
_:N16c46ff0db614391ab2f1ba0d8d1edea <http://schema.org/answer> "0" <http://groq.org/f56f3054bcdc1d12cd1b0198d209a2f2917a9e2cf2bb3ee37336d7aa2961a0ee> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/f56f3054bcdc1d12cd1b0198d209a2f2917a9e2cf2bb3ee37336d7aa2961a0ee> .
_:N16c46ff0db614391ab2f1ba0d8d1edea <http://schema.org/explain> "The lecture focuses on functional programming, while the KU covers logic programming topics." <http://groq.org/f56f3054bcdc1d12cd1b0198d209a2f2917a9e2cf2bb3ee37336d7aa2961a0ee> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/6ebae3dcb1f03b11b0c1ed7adc2f74b788b0c08dbd4a586bc201d80612bff2e0> .
<http://example.org/course/UE_X32I030> <http://example.org/has_schema_type> _:N3bac4e349f334d799c91c125aca1aad9 <http://groq.org/6ebae3dcb1f03b11b0c1ed7adc2f74b788b0c08dbd4a586bc201d80612bff2e0> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Recherche opérationnelle Objectif: (résultats d'apprentissage)\n(A-M)\n- Connaître les notions de calendrier au plus tôt, calendrier au plus tard pour un ensemble de\ntâche, et la notion de marge d'une tâche dans le contexte d'un problème d'ordonnancement simple\n(M)\n- Etre capable de déterminer un calendrier au plus tôt, un calendrier au plus tard et les marges\ndes tâches, dans le contexte d'un problème d'ordonnancement simple (A)\n- Introduction à la problématique de l'optimisation multi-objectif : connaissance de la notion de\nsolution efficace, limite de l'utilisation de la somme pondérée (I)\n- Utilisation d'un langage de modélisation algébrique : comprendre la différence entre un modèle\nexplicite et un modèle implicite (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'écrire un modèle implicite\n(A)\n- Utilisation d'un langage de modélisation algébrique : comprendre l'utilisation d'une structure de\nmatrice creuse pour décrire des contraintes (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'utiliser une structure de\nmatrice creuse pour décrire des contraintes (A)\n- Utilisation d'un langage de modélisation algébrique : être capable de détermine si le choix d'une\nmatrice creuse est pertinent ou pas pour décrire des contraintes (A)\n- Utilisation d'un solveur MIP : comprendre l'utilisation d'un solveur MIP en tant que bibliothèque\nde fonction et être capable de l'utiliser pour résoudre un unique problème de programmation\nlinéaire en variables mixtes (A)\n- Utilisation d'un solveur MIP : être capable d'implémenter un algorithme donné, en faisant des\nappels successifs à un solveur MIP pour résoudre un problème de programmation linéaire en\nvariables mixtes (A) Course content: fondamental :\n- Course name: http://example.org/course/UE_X32I030</page1>\n        <page2>Pages: 140-141 HOURS CS Core = 0 KA Core = 3 FPL-Abstraction: Program\nAbstraction and Representation KA Core: 1\\. BNF and regular expressions 2\\.\nPrograms that take (other) programs as input such as interpreters, compilers,\ntype-checkers, documentation generators 3\\. Components of a language: a.\nDefinitions of alphabets, delimiters, sentences, syntax, and semantics b.\nSyntax vs semantics 4\\. Program as a set of non-ambiguous meaningful sentences\n5\\. Basic programming abstractions: constants, variables, declarations\n(including nested declarations), command, expression, assignment, selection,\ndefinite and indefinite iteration, iterators, function, procedure, modules,\nexception handling (See also: SDF-Fundamentals) 6\\. Mutable vs immutable\nvariables: advantages and disadvantages of reusing existing memory location vs\nadvantages of copying and keeping old values; storing partial computation vs\nrecomputation 7\\. Types of variables: static, local, nonlocal, global; need\nand issues with nonlocal and global variables. 8\\. Scope rules: static vs\ndynamic; visibility of variables; side-effects. 9\\. Side-effects induced by\nnonlocal variables, global variables and aliased variables. Non-core: 10\\.\nL-values and R-values: mapping mutable variable-name to L-values; mapping\nimmutable variablenames to R-values 11\\. Environment vs store and their\nproperties 12\\. Data and control abstraction 13\\. Mechanisms for information\nexchange between program units such as procedures, functions, and modules:\nnonlocal variables, global variables, parameter-passing, import-export between\nmodules 14\\. Data structures to represent code for execution, translation, or\ntransmission. 15\\. Low level instruction representation such as virtual\nmachine instructions, assembly language, and binary representation (See also:\nAR-Representation, AR-Assembly) 16\\. Lambda calculus, variable binding, and\nvariable renaming. (See also: AL-Models, FPL-Formalism) 17\\. Types of\nsemantics: operational, axiomatic, denotational, behavioral; define and use\nabstract syntax trees; contrast with concrete syntax. Illustrative learning\noutcomes: KA Core: 1\\. Illustrate the scope of variables and visibility using\nsimple programs. 2\\. Illustrate different types of parameter-passing using\nsimple pseudo programming language. 3\\. Explain side-effect using global and\nnonlocal variables and how to fix such programs. 4\\. Explain how programs that\nprocess other programs treat the other programs as their input data. 5\\.\nDescribe a grammar and an abstract syntax tree for a small language. 6\\.\nDescribe the benefits of having program representations other than strings of\nsource code. 7\\. Implement a program to process some representation of code\nfor some purpose, such as an interpreter, an expression optimizer, or a\ndocumentation generator.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/6ebae3dcb1f03b11b0c1ed7adc2f74b788b0c08dbd4a586bc201d80612bff2e0> .
_:N3bac4e349f334d799c91c125aca1aad9 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/6ebae3dcb1f03b11b0c1ed7adc2f74b788b0c08dbd4a586bc201d80612bff2e0> .
_:N3bac4e349f334d799c91c125aca1aad9 <http://schema.org/explain> "Lecture focuses on optimization modeling and scheduling, while KU covers programming language abstractions/semantics." <http://groq.org/6ebae3dcb1f03b11b0c1ed7adc2f74b788b0c08dbd4a586bc201d80612bff2e0> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I030" <http://groq.org/6ebae3dcb1f03b11b0c1ed7adc2f74b788b0c08dbd4a586bc201d80612bff2e0> .
_:N3bac4e349f334d799c91c125aca1aad9 <http://schema.org/answer> "0" <http://groq.org/6ebae3dcb1f03b11b0c1ed7adc2f74b788b0c08dbd4a586bc201d80612bff2e0> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:N1a3f049b3a8947f59959d1cdfac65f58 <http://groq.org/38335b8b6de3a7aa71b9a3ebc9384eead5b11cb31a4e017d58926dd8750c6a41> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/38335b8b6de3a7aa71b9a3ebc9384eead5b11cb31a4e017d58926dd8750c6a41> .
_:N1a3f049b3a8947f59959d1cdfac65f58 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/38335b8b6de3a7aa71b9a3ebc9384eead5b11cb31a4e017d58926dd8750c6a41> .
_:N1a3f049b3a8947f59959d1cdfac65f58 <http://schema.org/answer> "0" <http://groq.org/38335b8b6de3a7aa71b9a3ebc9384eead5b11cb31a4e017d58926dd8750c6a41> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages: 147 HOURS CS Core = SEP hours KA Core = SEP hours FPL-SEP: Society,\nEthics, and the Profession Non-core: 1\\. Impact of English-centric programming\nlanguages 2\\. Enhancing accessibility and inclusivity for people with\ndisabilities - Supporting assistive technologies 3\\. Human factors related to\nprogramming languages and usability a. Impact of syntax on accessibility b.\nSupporting cultural differences (e.g., currency, decimals, dates) c.\nNeurodiversity 4\\. Etymology of terms such as \"class,\" \"master,\" and \"slave\"\nin programming languages 5\\. Increasing accessibility by supporting multiple\nlanguages within applications (UTF) Illustrative learning outcomes: Non-core:\n1\\. Consciously design programming languages to be inclusive and non-\noffensive.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/38335b8b6de3a7aa71b9a3ebc9384eead5b11cb31a4e017d58926dd8750c6a41> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/38335b8b6de3a7aa71b9a3ebc9384eead5b11cb31a4e017d58926dd8750c6a41> .
_:N1a3f049b3a8947f59959d1cdfac65f58 <http://schema.org/explain> "The lecture focuses on professional English and presentation skills, while the KU covers programming language ethics and accessibility." <http://groq.org/38335b8b6de3a7aa71b9a3ebc9384eead5b11cb31a4e017d58926dd8750c6a41> .
_:N7862c265949c4ed988ce3c799e52b406 <http://schema.org/answer> "0" <http://groq.org/b48a72ac63c186b33888b13fbaa29ff330e95647c53bbec3745cc0de2b3b5c71> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:N7862c265949c4ed988ce3c799e52b406 <http://groq.org/b48a72ac63c186b33888b13fbaa29ff330e95647c53bbec3745cc0de2b3b5c71> .
_:N7862c265949c4ed988ce3c799e52b406 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b48a72ac63c186b33888b13fbaa29ff330e95647c53bbec3745cc0de2b3b5c71> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/b48a72ac63c186b33888b13fbaa29ff330e95647c53bbec3745cc0de2b3b5c71> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/b48a72ac63c186b33888b13fbaa29ff330e95647c53bbec3745cc0de2b3b5c71> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing\nNon-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.\nCFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.\nRepresenting meaning/Semantics a. Logic-based knowledge representations b.\nSemantic roles c. Temporal representations d. Beliefs, desires, and intentions\n4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.\nExamples of use: POS tagging and morphology 8\\. Information retrieval (See\nalso: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and\nrecall 9\\. Information extraction 10\\. Language translation 11\\. Text\nclassification, categorization a. Bag of words model 12\\. Deep learning for\nNLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,\nimages + text) d. Generative language models Illustrative Learning Outcomes:\n1\\. Define and contrast deterministic and stochastic grammars, providing\nexamples to show the adequacy of each. 2\\. Simulate, apply, or implement\nclassic and stochastic algorithms for parsing natural language. 3\\. Identify\nthe challenges of representing meaning. 4\\. List the advantages of using\nstandard corpora. Identify examples of current corpora for a variety of NLP\ntasks. 5\\. Identify techniques for information retrieval, language\ntranslation, and text classification. 6\\. Implement a TF/IDF transform, use it\nto extract features from a corpus, and train an off-the-shelf machine learning\nalgorithm using those features to do text classification.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b48a72ac63c186b33888b13fbaa29ff330e95647c53bbec3745cc0de2b3b5c71> .
_:N7862c265949c4ed988ce3c799e52b406 <http://schema.org/explain> "The lecture does not cover the detailed NLP topics outlined in the KU." <http://groq.org/b48a72ac63c186b33888b13fbaa29ff330e95647c53bbec3745cc0de2b3b5c71> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/ae06d36cef07376694699000c0b586b5c69e26b2e5d8d90c37e7a82bc24aab8e> .
_:N7ba8ac98121649cc9f1e3b2f4cbd71f4 <http://schema.org/answer> "1" <http://groq.org/ae06d36cef07376694699000c0b586b5c69e26b2e5d8d90c37e7a82bc24aab8e> .
_:N7ba8ac98121649cc9f1e3b2f4cbd71f4 <http://schema.org/explain> "The lecture covers the fundamental concepts of object-oriented programming, including classes, inheritance, polymorphism, and encapsulation, which aligns with the knowledge unit's objectives." <http://groq.org/ae06d36cef07376694699000c0b586b5c69e26b2e5d8d90c37e7a82bc24aab8e> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 130-131 HOURS CS Core = 4 + 1 (SDF) KA Core = 1 FPL-OOP: Object-\nOriented Programming CS Core: 1\\. Imperative programming as a subset of\nobject-oriented programming. 2\\. Object-oriented design: a. Decomposition into\nobjects carrying state and having behavior. b. Class-hierarchy design for\nmodeling. 3\\. Definition of classes: fields, methods, and constructors. (See\nalso: SDF-Fundamentals) 4\\. Subclasses, inheritance (including multiple\ninheritance), and method overriding. 5\\. Dynamic dispatch: definition of\nmethod-call. 6\\. Exception handling. (See also: SDF-Fundamentals, PDC-\nCoordination, SE-Construction) 7\\. Object-oriented idioms for encapsulation:\na. Privacy, data hiding, and visibility of class members. b. Interfaces\nrevealing only method signatures. c. Abstract base classes, traits and mixins.\n8\\. Dynamic vs static properties. 9\\. Composition vs inheritance. 10\\.\nSubtyping: a. Subtype polymorphism; implicit upcasts in typed languages. b.\nNotion of behavioral replacement: subtypes acting like supertype. c.\nRelationship between subtyping and inheritance. KA Core: 11\\. Collection\nclasses, iterators, and other common library components. 12\\. Metaprogramming\nand reflection. Illustrative Learning Outcomes: CS Core: 1\\. Enumerate the\ndifferences between imperative and object-oriented programming paradigms. 2\\.\nCompose a class through design, implementation, and testing to meet behavioral\nrequirements. 3\\. Build a simple class hierarchy utilizing subclassing that\nallows code to be reused for distinct subclasses. 4\\. Predict and validate\ncontrol flow in a program using dynamic dispatch. 5\\. Compare and contrast how\ncomputational solutions to a problem differ in procedural, functional, and\nobject-oriented approaches. 6\\. Compare and contrast mechanisms to define and\nprotect data elements within procedural, functional, and object-oriented\napproaches. 7\\. Compare and contrast the benefits and costs/impact of using\ninheritance (subclasses) and composition (specifically, how to base\ncomposition on higher order functions). 8\\. Explain the relationship between\nobject-oriented inheritance (code-sharing and overriding) and subtyping (the\nidea of a subtype being usable in a context that expects the supertype). 9\\.\nUse object-oriented encapsulation mechanisms such as interfaces and private\nmembers. 10\\. Define and use iterators and other operations on aggregates,\nincluding operations that take functions as arguments, in multiple programming\nlanguages, selecting the most natural idioms for each language. (See also:\nFPL-Functional) KA Core: 11\\. Use collection classes and iterators effectively\nto solve a problem.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/ae06d36cef07376694699000c0b586b5c69e26b2e5d8d90c37e7a82bc24aab8e> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/ae06d36cef07376694699000c0b586b5c69e26b2e5d8d90c37e7a82bc24aab8e> .
_:N7ba8ac98121649cc9f1e3b2f4cbd71f4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/ae06d36cef07376694699000c0b586b5c69e26b2e5d8d90c37e7a82bc24aab8e> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:N7ba8ac98121649cc9f1e3b2f4cbd71f4 <http://groq.org/ae06d36cef07376694699000c0b586b5c69e26b2e5d8d90c37e7a82bc24aab8e> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/bd05997efd3419856d7bda6ba5f60a5d99fe6e1b63bb88aa08ab01285b424fa9> .
_:N8597de6262e44f23bd5d8dcfa7be4fcf <http://schema.org/explain> "The lecture covers a significant portion of the KU, including scripting, error handling, piping, system commands, environment variables, file abstraction, data structures, and regular expressions." <http://groq.org/bd05997efd3419856d7bda6ba5f60a5d99fe6e1b63bb88aa08ab01285b424fa9> .
_:N8597de6262e44f23bd5d8dcfa7be4fcf <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/bd05997efd3419856d7bda6ba5f60a5d99fe6e1b63bb88aa08ab01285b424fa9> .
_:N8597de6262e44f23bd5d8dcfa7be4fcf <http://schema.org/answer> "1" <http://groq.org/bd05997efd3419856d7bda6ba5f60a5d99fe6e1b63bb88aa08ab01285b424fa9> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS\nCore: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-\nOverview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface\nwith operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment\nvariables (See also: SF-Overview) 5\\. File abstraction and operators (See\nalso: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as\narrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-\nStructures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and\nprocesses (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:\nCS Core: 1\\. Create and execute automated scripts to manage various system\ntasks. 2\\. Solve various text processing problems through scripting.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/bd05997efd3419856d7bda6ba5f60a5d99fe6e1b63bb88aa08ab01285b424fa9> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:N8597de6262e44f23bd5d8dcfa7be4fcf <http://groq.org/bd05997efd3419856d7bda6ba5f60a5d99fe6e1b63bb88aa08ab01285b424fa9> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/bd05997efd3419856d7bda6ba5f60a5d99fe6e1b63bb88aa08ab01285b424fa9> .
_:Nfb08f7b5b9e24f6c9ee76ee95a0689b7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/04ccc054e6a3eb5545882cc17ab0f3cd4c21d582cb932322116aecb058f2a650> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Bases de données 2 Objectif: (résultats d'apprentissage) • Savoir déterminer des contraintes d’intégrité\n• Savoir appliquer un contrôle d’accès basique à une base de données\n• Comprendre la notion de vue\n• Connaître la structuration physique des données\n• Comprendre la notion de transaction\n• Comprendre la notion d’ordonnancement sérialisable\n• Comprendre la technique de contrôle de concurrence par verrouillage\n• Comprendre les fonctions d’un optimiseur de requêtes\n• Comprendre un plan d’exécution d’une requête\n• Connaître les structures accélératrices d’accès aux données (indexes) Course content: Extension procédurale de SQL (PL/SQL) , BD actives (Déclencheurs) Interrogation d'une base avec Course name: http://example.org/course/UE_X32I040</page1>\n        <page2>Pages: 118 HOURS CS Core = 2 KA Core = 4 DM-Querying: Query Construction CS\nCore: 1\\. SQL Query Formation a. Interactive SQL execution b. Programmatic\nexecution of an SQL query KA Core: 2\\. Relational Algebra 3\\. SQL a. Data\ndefinition including integrity and other constraint specifications b. Update\nsublanguage Non-core: 4\\. Relational Calculus 5\\. QBE and 4th-generation\nenvironments 6\\. Different ways to invoke non-procedural queries in\nconventional languages 7\\. Introduction to other major query languages (e.g.,\nXPATH, SPARQL) 8\\. Stored procedures Illustrative Learning Outcomes: CS Core:\n1\\. Compose SQL queries that incorporate select, project, join, union,\nintersection, set difference, and set division. 2\\. Determine when a nested\nSQL query is correlated or not. 3\\. Iterate over data retrieved\nprogrammatically from a database via an SQL query. KA Core: 4\\. Define, in\nSQL, a relation schema, including all integrity constraints and delete/update\ntriggers. 5\\. Compose an SQL query to update a tuple in a relation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/04ccc054e6a3eb5545882cc17ab0f3cd4c21d582cb932322116aecb058f2a650> .
<http://example.org/course/UE_X32I040> <http://example.org/has_schema_type> _:Nfb08f7b5b9e24f6c9ee76ee95a0689b7 <http://groq.org/04ccc054e6a3eb5545882cc17ab0f3cd4c21d582cb932322116aecb058f2a650> .
_:Nfb08f7b5b9e24f6c9ee76ee95a0689b7 <http://schema.org/explain> "Covers constraints, triggers, transactions, and querying basics (views, SQL extensions). Partial overlap with core SQL query operations." <http://groq.org/04ccc054e6a3eb5545882cc17ab0f3cd4c21d582cb932322116aecb058f2a650> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I040" <http://groq.org/04ccc054e6a3eb5545882cc17ab0f3cd4c21d582cb932322116aecb058f2a650> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/04ccc054e6a3eb5545882cc17ab0f3cd4c21d582cb932322116aecb058f2a650> .
_:Nfb08f7b5b9e24f6c9ee76ee95a0689b7 <http://schema.org/answer> "1" <http://groq.org/04ccc054e6a3eb5545882cc17ab0f3cd4c21d582cb932322116aecb058f2a650> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:Nc54880cb05124abfade3f30e82bcdd1d <http://groq.org/abe75c4a1e1d472f4f5364031557b3a467162ed2f6fc49ae20ed6942a7873d3d> .
_:Nc54880cb05124abfade3f30e82bcdd1d <http://schema.org/explain> "No overlap; lecture focuses on English communication skills, while KU addresses programming language design and accessibility." <http://groq.org/abe75c4a1e1d472f4f5364031557b3a467162ed2f6fc49ae20ed6942a7873d3d> .
_:Nc54880cb05124abfade3f30e82bcdd1d <http://schema.org/answer> "0" <http://groq.org/abe75c4a1e1d472f4f5364031557b3a467162ed2f6fc49ae20ed6942a7873d3d> .
_:Nc54880cb05124abfade3f30e82bcdd1d <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/abe75c4a1e1d472f4f5364031557b3a467162ed2f6fc49ae20ed6942a7873d3d> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages: 147 HOURS CS Core = SEP hours KA Core = SEP hours FPL-SEP: Society,\nEthics, and the Profession Non-core: 1\\. Impact of English-centric programming\nlanguages 2\\. Enhancing accessibility and inclusivity for people with\ndisabilities - Supporting assistive technologies 3\\. Human factors related to\nprogramming languages and usability a. Impact of syntax on accessibility b.\nSupporting cultural differences (e.g., currency, decimals, dates) c.\nNeurodiversity 4\\. Etymology of terms such as \"class,\" \"master,\" and \"slave\"\nin programming languages 5\\. Increasing accessibility by supporting multiple\nlanguages within applications (UTF) Illustrative learning outcomes: Non-core:\n1\\. Consciously design programming languages to be inclusive and non-\noffensive.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/abe75c4a1e1d472f4f5364031557b3a467162ed2f6fc49ae20ed6942a7873d3d> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/abe75c4a1e1d472f4f5364031557b3a467162ed2f6fc49ae20ed6942a7873d3d> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/abe75c4a1e1d472f4f5364031557b3a467162ed2f6fc49ae20ed6942a7873d3d> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/af6b847dbbdec38ac725981b4c4f3a4f1484b9904cb98836c8c6b6ee0f142b18> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:N2be5c90c6d5d436d96c7cbb9566dee73 <http://groq.org/af6b847dbbdec38ac725981b4c4f3a4f1484b9904cb98836c8c6b6ee0f142b18> .
_:N2be5c90c6d5d436d96c7cbb9566dee73 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/af6b847dbbdec38ac725981b4c4f3a4f1484b9904cb98836c8c6b6ee0f142b18> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/af6b847dbbdec38ac725981b4c4f3a4f1484b9904cb98836c8c6b6ee0f142b18> .
_:N2be5c90c6d5d436d96c7cbb9566dee73 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including deterministic and stochastic grammars, parsing algorithms, and semantic representations, as well as information retrieval, language translation, and text classification." <http://groq.org/af6b847dbbdec38ac725981b4c4f3a4f1484b9904cb98836c8c6b6ee0f142b18> .
_:N2be5c90c6d5d436d96c7cbb9566dee73 <http://schema.org/answer> "1" <http://groq.org/af6b847dbbdec38ac725981b4c4f3a4f1484b9904cb98836c8c6b6ee0f142b18> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing\nNon-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.\nCFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.\nRepresenting meaning/Semantics a. Logic-based knowledge representations b.\nSemantic roles c. Temporal representations d. Beliefs, desires, and intentions\n4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.\nExamples of use: POS tagging and morphology 8\\. Information retrieval (See\nalso: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and\nrecall 9\\. Information extraction 10\\. Language translation 11\\. Text\nclassification, categorization a. Bag of words model 12\\. Deep learning for\nNLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,\nimages + text) d. Generative language models Illustrative Learning Outcomes:\n1\\. Define and contrast deterministic and stochastic grammars, providing\nexamples to show the adequacy of each. 2\\. Simulate, apply, or implement\nclassic and stochastic algorithms for parsing natural language. 3\\. Identify\nthe challenges of representing meaning. 4\\. List the advantages of using\nstandard corpora. Identify examples of current corpora for a variety of NLP\ntasks. 5\\. Identify techniques for information retrieval, language\ntranslation, and text classification. 6\\. Implement a TF/IDF transform, use it\nto extract features from a corpus, and train an off-the-shelf machine learning\nalgorithm using those features to do text classification.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/af6b847dbbdec38ac725981b4c4f3a4f1484b9904cb98836c8c6b6ee0f142b18> .
_:N11f7fc2a87e8447c8c6ea6f6ca09c3d6 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
_:N11f7fc2a87e8447c8c6ea6f6ca09c3d6 <http://example.org/has_chunk> ". (See also: AI-LRR)\n13. Integration with other programming paradigms such as object-oriented programming.\n14. Advance programming constructs such as difference-lists, creating user defined data structures, set\nof, etc.\nIllustrative learning outcomes:\nKA Core:\n1. Use a logic language to implement a conventional algorithm.\n2. Use a logic language to implement an algorithm employing implicit search using clauses, relations,\nand cuts.\n3" <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
_:N69ed7878a4ce468b8fe99eb6a5839894 <http://example.org/has_chunk> ".\nc. Model a variety of real-world problems in computer science using appropriate forms of graphs\nand trees, such as representing a network topology, the organization of a hierarchical file\nsystem, or a social network.\nd. Show how concepts from graphs and trees appear in data structures, algorithms, proof\ntechniques (structural induction), and counting" <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
_:N206b5357d20544c18e78f0936f546e33 <http://example.org/has_chunk> "Illustrative Learning Outcomes: \nCS Core: \n1. Explain the role of algorithms for writing programs.  \n2. Demonstrate how a problem may be solved by different algorithms, each with different properties. \n3. Explain some common algorithms (e.g., sorting, searching, tree traversal, graph traversal). \n4. Explain the impact on space/time performance of some algorithms." <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
<http://example.org/course/UE_X31I020> <http://example.org/is_aligned_with> _:N69ed7878a4ce468b8fe99eb6a5839894 <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
_:N69ed7878a4ce468b8fe99eb6a5839894 <http://example.org/has_score> "0.6974218"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
<http://example.org/course/UE_X31I020> <http://example.org/is_aligned_with> _:N206b5357d20544c18e78f0936f546e33 <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
_:N206b5357d20544c18e78f0936f546e33 <http://example.org/has_score> "0.7006189"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
<http://example.org/course/UE_X31I020> <http://example.org/is_aligned_with> _:N11f7fc2a87e8447c8c6ea6f6ca09c3d6 <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
_:N69ed7878a4ce468b8fe99eb6a5839894 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Mathematical_and_Statistical_Foundations_MSF/MSF-Discrete_Discrete_Mathematics.txt> <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
_:N11f7fc2a87e8447c8c6ea6f6ca09c3d6 <http://example.org/has_score> "0.6989193"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
<http://example.org/faiss> <http://example.org/input> "Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020" <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
_:N206b5357d20544c18e78f0936f546e33 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Algorithms.txt> <http://faiss.org/10b56e8985d3626e414aaf057c539f745f15dffbd2654effbc811ca2d2abce1c> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/246affb7c642dc3d479f5174f0c06f0a93cb4aedac89fb60b78b475fb695bcf1> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/246affb7c642dc3d479f5174f0c06f0a93cb4aedac89fb60b78b475fb695bcf1> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:Nda9a9a7717584ce4822899c9e33decd4 <http://groq.org/246affb7c642dc3d479f5174f0c06f0a93cb4aedac89fb60b78b475fb695bcf1> .
_:Nda9a9a7717584ce4822899c9e33decd4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/246affb7c642dc3d479f5174f0c06f0a93cb4aedac89fb60b78b475fb695bcf1> .
_:Nda9a9a7717584ce4822899c9e33decd4 <http://schema.org/explain> "The lecture does not cover any of the advanced programming constructs listed in the KU, and its focus is on English language skills and presentation techniques." <http://groq.org/246affb7c642dc3d479f5174f0c06f0a93cb4aedac89fb60b78b475fb695bcf1> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages: 144 HOURS CS Core = 0 KA Core = 0 FPL-Constructs: Advanced Programming\nConstructs Non-core: 1\\. Encapsulation mechanisms 2\\. Delayed evaluation and\ninfinite streams 3\\. Compare and contrast delayed evaluation vs eager\nevaluation 4\\. Unification vs assertion vs expression evaluation 5\\. Control\nabstractions: exception handling, continuations, monads. 6\\. Object-oriented\nabstractions: multiple inheritance, mixins, traits, multimethods 7\\.\nMetaprogramming: macros, generative programming, model-based development 8\\.\nString manipulation via pattern-matching (regular expressions) 9\\. Dynamic\ncode evaluation (\"eval\") 10\\. Language support for checking assertions,\ninvariants, and pre/post-conditions 11\\. Domain specific languages, such as\ndatabase languages, data science languages, embedded computing languages,\nsynchronous languages, hardware interface languages 12\\. Massive parallel high\nperformance computing models and languages Illustrative learning outcomes:\nNon-core: 1\\. Use various advanced programming constructs and idioms\ncorrectly. 2\\. Discuss how various advanced programming constructs aim to\nimprove program structure, software quality, and programmer productivity. 3\\.\nDiscuss how various advanced programming constructs interact with the\ndefinition and implementation of other language features.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/246affb7c642dc3d479f5174f0c06f0a93cb4aedac89fb60b78b475fb695bcf1> .
_:Nda9a9a7717584ce4822899c9e33decd4 <http://schema.org/answer> "0" <http://groq.org/246affb7c642dc3d479f5174f0c06f0a93cb4aedac89fb60b78b475fb695bcf1> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:N8cb65a2896554234a1d3a8d2e729efd8 <http://groq.org/0bf8ce40c2ce40e1605f66af2090d96f22f675025b90afee9c9f5d67032d8793> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/0bf8ce40c2ce40e1605f66af2090d96f22f675025b90afee9c9f5d67032d8793> .
_:N8cb65a2896554234a1d3a8d2e729efd8 <http://schema.org/explain> "No overlap in topics; lecture focuses on professional skills, not SE-TQA concepts." <http://groq.org/0bf8ce40c2ce40e1605f66af2090d96f22f675025b90afee9c9f5d67032d8793> .
_:N8cb65a2896554234a1d3a8d2e729efd8 <http://schema.org/answer> "0" <http://groq.org/0bf8ce40c2ce40e1605f66af2090d96f22f675025b90afee9c9f5d67032d8793> .
_:N8cb65a2896554234a1d3a8d2e729efd8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/0bf8ce40c2ce40e1605f66af2090d96f22f675025b90afee9c9f5d67032d8793> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/0bf8ce40c2ce40e1605f66af2090d96f22f675025b90afee9c9f5d67032d8793> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Testing and Quality Assurance:\nCore Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.\nPlaceholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder\nadvanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of\nSE-Testing and Quality Assurance. 2\\. Apply principles in practical scenarios.\n3\\. Analyze the importance of this topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/0bf8ce40c2ce40e1605f66af2090d96f22f675025b90afee9c9f5d67032d8793> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:Nb9fe9172274143f6b81ea3074b75a710 <http://groq.org/f57df37477cc230f79e0715a7b89abe0fc0da0fd06ef283c0dcde0180878b02a> .
_:Nb9fe9172274143f6b81ea3074b75a710 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/f57df37477cc230f79e0715a7b89abe0fc0da0fd06ef283c0dcde0180878b02a> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/f57df37477cc230f79e0715a7b89abe0fc0da0fd06ef283c0dcde0180878b02a> .
_:Nb9fe9172274143f6b81ea3074b75a710 <http://schema.org/answer> "1" <http://groq.org/f57df37477cc230f79e0715a7b89abe0fc0da0fd06ef283c0dcde0180878b02a> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/f57df37477cc230f79e0715a7b89abe0fc0da0fd06ef283c0dcde0180878b02a> .
_:Nb9fe9172274143f6b81ea3074b75a710 <http://schema.org/explain> "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." <http://groq.org/f57df37477cc230f79e0715a7b89abe0fc0da0fd06ef283c0dcde0180878b02a> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/f57df37477cc230f79e0715a7b89abe0fc0da0fd06ef283c0dcde0180878b02a> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/914331675d350119ba50a895084df5f751484cbdaf0482f0135364c4e210bd54> .
_:Nc57ee58aa99241158b618142e8791e08 <http://schema.org/answer> "1" <http://groq.org/914331675d350119ba50a895084df5f751484cbdaf0482f0135364c4e210bd54> .
<http://example.org/course/UE_X31I040> <http://example.org/has_schema_type> _:Nc57ee58aa99241158b618142e8791e08 <http://groq.org/914331675d350119ba50a895084df5f751484cbdaf0482f0135364c4e210bd54> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Réseaux et Télécoms Objectif: (résultats d'apprentissage)\n• Comprendre les mécanismes de base des protocoles de l’Internet (http, tcp, ip, arp);\n• Connaître les défis techniques et sociétaux liés aux déploiements des réseaux; Course content: de l'UE : Internet : comment ça marche.\n• Introduction : les chiffres de l'Internet, histoire et perspectives.\n• Les protocoles applicatifs (http, smtp, dns, ...)\n• Le problème du transport fiable de bout en bout. TCP.\n• Le problème du contrôle de flux et congestion. TCP. Course name: http://example.org/course/UE_X31I040</page1>\n        <page2>Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-\nFundamentals: Fundamentals CS Core: 1\\. Importance of networking in\ncontemporary computing, and associated challenges. (See also: SEPContext, SEP-\nPrivacy) 2\\. Organization of the internet (e.g., users, Internet Service\nProviders, autonomous systems, content providers, content delivery networks)\n3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles\n(application, transport, network, datalink, and physical) 5\\. Layering\nprinciples (e.g., encapsulation and hourglass model) (See also: SF-\nFoundations) 6\\. Network elements (e.g., routers, switches, hubs, access\npoints, and hosts) 7\\. Basic queueing concepts (e.g., relationship with\nlatency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS\nCore: 1\\. Articulate the organization of the internet. 2\\. List and define the\nappropriate network terminology 3\\. Describe the layered structure of a\ntypical networked architecture. 4\\. Identify the different types of complexity\nin a network (edges, core, etc.).</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/914331675d350119ba50a895084df5f751484cbdaf0482f0135364c4e210bd54> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I040" <http://groq.org/914331675d350119ba50a895084df5f751484cbdaf0482f0135364c4e210bd54> .
_:Nc57ee58aa99241158b618142e8791e08 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/914331675d350119ba50a895084df5f751484cbdaf0482f0135364c4e210bd54> .
_:Nc57ee58aa99241158b618142e8791e08 <http://schema.org/explain> "The lecture covers the fundamental concepts of networking, including the organization of the internet, switching techniques, layers, and network elements, which aligns with the KU's Fundamentals section." <http://groq.org/914331675d350119ba50a895084df5f751484cbdaf0482f0135364c4e210bd54> .
<http://example.org/faiss> <http://example.org/input> "Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020" <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N43fd00a731a349f7ab28545945ee06a4 <http://example.org/has_score> "0.6953278"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N054da5ababf046898e30eca8066fd446 <http://example.org/has_score> "0.6917418"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N054da5ababf046898e30eca8066fd446 <http://example.org/has_chunk> "Pages: TBD\nHOURS\n    CS Core = TBD\n    KA Core = TBD\n\nSE-Formal Methods: Core Concepts\nCS Core:\n1. Placeholder topic 1\n2. Placeholder topic 2\n3. Placeholder topic 3\n\nKA Core:\n4. Placeholder advanced topic 1\n5. Placeholder advanced topic 2\n\nIllustrative Learning Outcomes:\n1. Explain key concepts of SE-Formal Methods.\n2. Apply principles in practical scenarios.\n3. Analyze the importance of this topic in computing." <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N503a0ad046ec46e2a3807a2987c7d515 <http://example.org/has_chunk> "Illustrative Learning Outcomes: \nCS Core: \n1. Explain/understand some of the intellectual property issues relating to programs.  \n2. Explain/understand when code developed by others can be used and proper ways of disclosing their use. \n3. Explain/understand the responsibility of programmers when developing code for an overall solution (which may be developed by a team). \n4. Explain/understand one or more codes of conduct applicable to programmers." <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N43fd00a731a349f7ab28545945ee06a4 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N43fd00a731a349f7ab28545945ee06a4 <http://example.org/has_chunk> ". (See also: AI-LRR)\n13. Integration with other programming paradigms such as object-oriented programming.\n14. Advance programming constructs such as difference-lists, creating user defined data structures, set\nof, etc.\nIllustrative learning outcomes:\nKA Core:\n1. Use a logic language to implement a conventional algorithm.\n2. Use a logic language to implement an algorithm employing implicit search using clauses, relations,\nand cuts.\n3" <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N054da5ababf046898e30eca8066fd446 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N503a0ad046ec46e2a3807a2987c7d515 <http://example.org/has_score> "0.69681424"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
<http://example.org/course/UE_X32I020> <http://example.org/is_aligned_with> _:N43fd00a731a349f7ab28545945ee06a4 <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
_:N503a0ad046ec46e2a3807a2987c7d515 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
<http://example.org/course/UE_X32I020> <http://example.org/is_aligned_with> _:N054da5ababf046898e30eca8066fd446 <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
<http://example.org/course/UE_X32I020> <http://example.org/is_aligned_with> _:N503a0ad046ec46e2a3807a2987c7d515 <http://faiss.org/692943dabe52fe40e234592ca4302df0a89f70af5ff284b14dc6f61d31e4a9e0> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/2a85f9ec032bb3062253349b2672f794a739e22ce3a58ce96e3a7e4ae7d85175> .
_:N49a48bc950c1460980aa626c101cc569 <http://schema.org/explain> "The lecture covers the fundamental protocols of the Internet, including HTTP, TCP, IP, and ARP, which aligns with the KU's focus on naming and address schemes, distributed application paradigms, and application-layer protocols." <http://groq.org/2a85f9ec032bb3062253349b2672f794a739e22ce3a58ce96e3a7e4ae7d85175> .
_:N49a48bc950c1460980aa626c101cc569 <http://schema.org/answer> "1" <http://groq.org/2a85f9ec032bb3062253349b2672f794a739e22ce3a58ce96e3a7e4ae7d85175> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Réseaux et Télécoms Objectif: (résultats d'apprentissage)\n• Comprendre les mécanismes de base des protocoles de l’Internet (http, tcp, ip, arp);\n• Connaître les défis techniques et sociétaux liés aux déploiements des réseaux; Course content: de l'UE : Internet : comment ça marche.\n• Introduction : les chiffres de l'Internet, histoire et perspectives.\n• Les protocoles applicatifs (http, smtp, dns, ...)\n• Le problème du transport fiable de bout en bout. TCP.\n• Le problème du contrôle de flux et congestion. TCP. Course name: http://example.org/course/UE_X31I040</page1>\n        <page2>Pages: 199 HOURS CS Core = 3.5 + 0.25 (SEP) + 0.25 (PDC) KA Core = . NC-\nApplications: Networked Applications CS Core: 1\\. Naming and address schemes\n(e.g., DNS, and Uniform Resource Identifiers) 2\\. Distributed application\nparadigms (e.g., client/server, peer-to-peer, cloud, edge, and fog) (See also:\nPDC-Communication, PDC-Coordination) 3\\. Diversity of networked application\ndemands (e.g., latency, bandwidth, and loss tolerance) (See also: PDC-\nCommunication, SEP-Sustainability, SEP-Context) 4\\. Coverage of application-\nlayer protocols (e.g., HTTP) 5\\. Interactions with TCP, UDP, and Socket APIs\n(See also: PDC-Programs) Illustrative Learning Outcomes: CS Core: 1\\. Define\nthe principles of naming, addressing, resource location. 2\\. Analyze the needs\nof specific networked application demands. 3\\. Describe the details of one\napplication layer protocol. 4\\. Implement a simple client-server socket-based\napplication.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/2a85f9ec032bb3062253349b2672f794a739e22ce3a58ce96e3a7e4ae7d85175> .
<http://example.org/course/UE_X31I040> <http://example.org/has_schema_type> _:N49a48bc950c1460980aa626c101cc569 <http://groq.org/2a85f9ec032bb3062253349b2672f794a739e22ce3a58ce96e3a7e4ae7d85175> .
_:N49a48bc950c1460980aa626c101cc569 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/2a85f9ec032bb3062253349b2672f794a739e22ce3a58ce96e3a7e4ae7d85175> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I040" <http://groq.org/2a85f9ec032bb3062253349b2672f794a739e22ce3a58ce96e3a7e4ae7d85175> .
_:Nb92bea5081da45c1bd34814bba0b3211 <http://schema.org/answer> "0" <http://groq.org/31f0d56628eebbbad02dfff3329368afb6a8d61ef18e05bb3b3c0eceecbd66ce> .
_:Nb92bea5081da45c1bd34814bba0b3211 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/31f0d56628eebbbad02dfff3329368afb6a8d61ef18e05bb3b3c0eceecbd66ce> .
_:Nb92bea5081da45c1bd34814bba0b3211 <http://schema.org/explain> "Lecture focuses on teaching methods, not technical scripting topics" <http://groq.org/31f0d56628eebbbad02dfff3329368afb6a8d61ef18e05bb3b3c0eceecbd66ce> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:Nb92bea5081da45c1bd34814bba0b3211 <http://groq.org/31f0d56628eebbbad02dfff3329368afb6a8d61ef18e05bb3b3c0eceecbd66ce> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS\nCore: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-\nOverview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface\nwith operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment\nvariables (See also: SF-Overview) 5\\. File abstraction and operators (See\nalso: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as\narrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-\nStructures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and\nprocesses (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:\nCS Core: 1\\. Create and execute automated scripts to manage various system\ntasks. 2\\. Solve various text processing problems through scripting.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/31f0d56628eebbbad02dfff3329368afb6a8d61ef18e05bb3b3c0eceecbd66ce> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/31f0d56628eebbbad02dfff3329368afb6a8d61ef18e05bb3b3c0eceecbd66ce> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/31f0d56628eebbbad02dfff3329368afb6a8d61ef18e05bb3b3c0eceecbd66ce> .
_:Ne5dac6c755b2400ca0854fffc091134d <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/c68ff7c19a8a1f147fb179c6bd411796529699cceb4c2e996ad88a59d742fddc> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/c68ff7c19a8a1f147fb179c6bd411796529699cceb4c2e996ad88a59d742fddc> .
_:Ne5dac6c755b2400ca0854fffc091134d <http://schema.org/explain> "Lecture focuses on teaching methods/learning outcomes, not NLP technical content" <http://groq.org/c68ff7c19a8a1f147fb179c6bd411796529699cceb4c2e996ad88a59d742fddc> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:Ne5dac6c755b2400ca0854fffc091134d <http://groq.org/c68ff7c19a8a1f147fb179c6bd411796529699cceb4c2e996ad88a59d742fddc> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing\nNon-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.\nCFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.\nRepresenting meaning/Semantics a. Logic-based knowledge representations b.\nSemantic roles c. Temporal representations d. Beliefs, desires, and intentions\n4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.\nExamples of use: POS tagging and morphology 8\\. Information retrieval (See\nalso: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and\nrecall 9\\. Information extraction 10\\. Language translation 11\\. Text\nclassification, categorization a. Bag of words model 12\\. Deep learning for\nNLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,\nimages + text) d. Generative language models Illustrative Learning Outcomes:\n1\\. Define and contrast deterministic and stochastic grammars, providing\nexamples to show the adequacy of each. 2\\. Simulate, apply, or implement\nclassic and stochastic algorithms for parsing natural language. 3\\. Identify\nthe challenges of representing meaning. 4\\. List the advantages of using\nstandard corpora. Identify examples of current corpora for a variety of NLP\ntasks. 5\\. Identify techniques for information retrieval, language\ntranslation, and text classification. 6\\. Implement a TF/IDF transform, use it\nto extract features from a corpus, and train an off-the-shelf machine learning\nalgorithm using those features to do text classification.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/c68ff7c19a8a1f147fb179c6bd411796529699cceb4c2e996ad88a59d742fddc> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/c68ff7c19a8a1f147fb179c6bd411796529699cceb4c2e996ad88a59d742fddc> .
_:Ne5dac6c755b2400ca0854fffc091134d <http://schema.org/answer> "0" <http://groq.org/c68ff7c19a8a1f147fb179c6bd411796529699cceb4c2e996ad88a59d742fddc> .
_:N06fdd8fdd30c4541ab98f506f1e80dad <http://schema.org/explain> "The lecture covers topics such as algorithm verification, program verification, and logic programming, which are all relevant to the Knowledge Unit." <http://groq.org/926d5df832f1352ebcdef4a3bbc9333050f5aa2552c1fc2698f0c0d8cbad8894> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/926d5df832f1352ebcdef4a3bbc9333050f5aa2552c1fc2698f0c0d8cbad8894> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:N06fdd8fdd30c4541ab98f506f1e80dad <http://groq.org/926d5df832f1352ebcdef4a3bbc9333050f5aa2552c1fc2698f0c0d8cbad8894> .
_:N06fdd8fdd30c4541ab98f506f1e80dad <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/926d5df832f1352ebcdef4a3bbc9333050f5aa2552c1fc2698f0c0d8cbad8894> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/926d5df832f1352ebcdef4a3bbc9333050f5aa2552c1fc2698f0c0d8cbad8894> .
_:N06fdd8fdd30c4541ab98f506f1e80dad <http://schema.org/answer> "1" <http://groq.org/926d5df832f1352ebcdef4a3bbc9333050f5aa2552c1fc2698f0c0d8cbad8894> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/926d5df832f1352ebcdef4a3bbc9333050f5aa2552c1fc2698f0c0d8cbad8894> .
_:N3cba5c7d5c4d4647b3074e5e1bf0e427 <http://schema.org/explain> "The lecture covers topics such as algorithm implementation, graph theory, and data structures, which align with the knowledge unit's objectives and learning outcomes." <http://groq.org/0872a87888cf58558949e015d35ef057af18a0d65fafd549cdf21ef1f9f5cd06> .
_:N3cba5c7d5c4d4647b3074e5e1bf0e427 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/0872a87888cf58558949e015d35ef057af18a0d65fafd549cdf21ef1f9f5cd06> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/0872a87888cf58558949e015d35ef057af18a0d65fafd549cdf21ef1f9f5cd06> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/0872a87888cf58558949e015d35ef057af18a0d65fafd549cdf21ef1f9f5cd06> .
_:N3cba5c7d5c4d4647b3074e5e1bf0e427 <http://schema.org/answer> "1" <http://groq.org/0872a87888cf58558949e015d35ef057af18a0d65fafd549cdf21ef1f9f5cd06> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/0872a87888cf58558949e015d35ef057af18a0d65fafd549cdf21ef1f9f5cd06> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:N3cba5c7d5c4d4647b3074e5e1bf0e427 <http://groq.org/0872a87888cf58558949e015d35ef057af18a0d65fafd549cdf21ef1f9f5cd06> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:Nb4791926208443a2bb33de02dafeefac <http://groq.org/b447b8f47f409d18545a0c8ca2dc3ecea083b70d42e87fff0f1a71821ce4d038> .
_:Nb4791926208443a2bb33de02dafeefac <http://schema.org/answer> "0" <http://groq.org/b447b8f47f409d18545a0c8ca2dc3ecea083b70d42e87fff0f1a71821ce4d038> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 131-132-133 HOURS CS Core = 4 KA Core = 3 FPL-Functional: Functional\nProgramming CS Core: 1\\. Lambda expressions and evaluation: (See also: AL-\nModels, FPL-Formalism) a. Variable binding and scope rules. (See also: SDF-\nFundamentals) b. Parameter-passing. (See also: SDF-Fundamentals) c. Nested\nlambda expressions and reduction order. 2\\. Effect-free programming: a.\nFunction calls have no side effects, facilitating compositional reasoning. b.\nImmutable variables and data copying vs reduction. c. Use of recursion vs\nloops vs pipelining (map/reduce). 3\\. Processing structured data (e.g., trees)\nvia functions with cases for each data variant: a. Functions defined over\ncompound data in terms of functions applied to the constituent pieces. b.\nPersistent data structures. 4\\. Using higher-order functions (taking,\nreturning, and storing functions). KA Core: 5\\. Metaprogramming and\nreflection. 6\\. Function closures (functions using variables in the enclosing\nlexical environment). a. Basic meaning and definition - creating closures at\nrun-time by capturing the environment. b. Canonical idioms: call-backs,\narguments to iterators, reusable code via function arguments. c. Using a\nclosure to encapsulate data in its environment. d. Delayed versus eager\nevaluation. Non-core: 7\\. Graph reduction machine and call-by-need. 8\\.\nImplementing delayed evaluation. 9\\. Integration with logic programming\nparadigm using concepts such as equational logic, narrowing, residuation and\nsemantic unification. (See also: FPL-Logic) 10\\. Integration with other\nprogramming paradigms such as imperative and object-oriented. Illustrative\nlearning outcomes: CS Core: 1\\. Develop basic algorithms that avoid assigning\nto mutable states or considering reference equality. 2\\. Develop useful\nfunctions that take and return other functions. 3\\. Compare and contrast how\ncomputational solutions to a problem differ in procedural, functional, and\nobject-oriented approaches. 4\\. Compare and contrast mechanisms to define and\nprotect data elements within procedural, functional, and object-oriented\napproaches. KA Core: 5\\. Explain a simple example of lambda expression being\nimplemented using a virtual machine, such as a SECD machine, showing storage\nand reclaim of the environment. 6\\. Correctly interpret variables and lexical\nscope in a program using function closures. 7\\. Use functional encapsulation\nmechanisms such as closures and modular interfaces. 8\\. Compare and contrast\nstateful vs stateless execution. 9\\. Define and use iterators and other\noperations on aggregates, including operations that take functions as\narguments, in multiple programming languages, selecting the most natural\nidioms for each language. (See also: FPL-OOP) Non-core: 10\\. Illustrate graph\nreduction using a l-expression using a shared subexpression. 11\\. Illustrate\nthe execution of a simple nested l-expression using an abstract machine, such\nas an ABC machine. 12\\. Illustrate narrowing, residuation, and semantic\nunification using simple illustrative examples. 13\\. Illustrate the\nconcurrency constructs using simple programming examples of known concepts\nsuch as a buffer being read and written concurrently or sequentially. (See\nalso: FPL-OOP)</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b447b8f47f409d18545a0c8ca2dc3ecea083b70d42e87fff0f1a71821ce4d038> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/b447b8f47f409d18545a0c8ca2dc3ecea083b70d42e87fff0f1a71821ce4d038> .
_:Nb4791926208443a2bb33de02dafeefac <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b447b8f47f409d18545a0c8ca2dc3ecea083b70d42e87fff0f1a71821ce4d038> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/b447b8f47f409d18545a0c8ca2dc3ecea083b70d42e87fff0f1a71821ce4d038> .
_:Nb4791926208443a2bb33de02dafeefac <http://schema.org/explain> "The lecture covers foundational concepts but lacks depth in functional programming specifics." <http://groq.org/b447b8f47f409d18545a0c8ca2dc3ecea083b70d42e87fff0f1a71821ce4d038> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:Nd6e2184dae7a4a3d81eb9b42f07facb9 <http://groq.org/754bd7aa5420e59a3afc076d0a850272b66b060d0daddbf86278055b3bb64acf> .
_:Nd6e2184dae7a4a3d81eb9b42f07facb9 <http://schema.org/answer> "0" <http://groq.org/754bd7aa5420e59a3afc076d0a850272b66b060d0daddbf86278055b3bb64acf> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/754bd7aa5420e59a3afc076d0a850272b66b060d0daddbf86278055b3bb64acf> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/754bd7aa5420e59a3afc076d0a850272b66b060d0daddbf86278055b3bb64acf> .
_:Nd6e2184dae7a4a3d81eb9b42f07facb9 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/754bd7aa5420e59a3afc076d0a850272b66b060d0daddbf86278055b3bb64acf> .
_:Nd6e2184dae7a4a3d81eb9b42f07facb9 <http://schema.org/explain> "The lecture focuses on professional opening and entrepreneurship, whereas the KU covers SE-Testing and Quality Assurance, which are unrelated topics." <http://groq.org/754bd7aa5420e59a3afc076d0a850272b66b060d0daddbf86278055b3bb64acf> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Testing and Quality Assurance:\nCore Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.\nPlaceholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder\nadvanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of\nSE-Testing and Quality Assurance. 2\\. Apply principles in practical scenarios.\n3\\. Analyze the importance of this topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/754bd7aa5420e59a3afc076d0a850272b66b060d0daddbf86278055b3bb64acf> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/70ab95ded5cda2380726f57254d2937d0dc1dcc5cbd7af079a38ba7123bb2c78> .
_:N9d03f50fdf90411f9d0d0160e3152697 <http://schema.org/answer> "1" <http://groq.org/70ab95ded5cda2380726f57254d2937d0dc1dcc5cbd7af079a38ba7123bb2c78> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/70ab95ded5cda2380726f57254d2937d0dc1dcc5cbd7af079a38ba7123bb2c78> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental\nConcepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic\ngraphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.\nRasterization and rendering techniques. 5\\. Fundamental shading models. KA\nCore: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in\ndifferent fields. 8\\. Interaction methods for graphical environments.\nIllustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.\n2\\. Differentiate between rasterization and ray tracing. 3\\. Apply\ntransformations to 2D and 3D models.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/70ab95ded5cda2380726f57254d2937d0dc1dcc5cbd7af079a38ba7123bb2c78> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:N9d03f50fdf90411f9d0d0160e3152697 <http://groq.org/70ab95ded5cda2380726f57254d2937d0dc1dcc5cbd7af079a38ba7123bb2c78> .
_:N9d03f50fdf90411f9d0d0160e3152697 <http://schema.org/explain> "The lecture covers 7 out of 8 learning outcomes and 4 out of 5 fundamental concepts, substantially covering the knowledge described in the KU." <http://groq.org/70ab95ded5cda2380726f57254d2937d0dc1dcc5cbd7af079a38ba7123bb2c78> .
_:N9d03f50fdf90411f9d0d0160e3152697 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/70ab95ded5cda2380726f57254d2937d0dc1dcc5cbd7af079a38ba7123bb2c78> .
_:Nf81bb97d1ef148b5918e08e001240025 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/e72043a5cfa5d6ccafe528e835f69bfe72b0e1f8888c6ecb5bf0f6020ef8bd03> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/e72043a5cfa5d6ccafe528e835f69bfe72b0e1f8888c6ecb5bf0f6020ef8bd03> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:Nf81bb97d1ef148b5918e08e001240025 <http://groq.org/e72043a5cfa5d6ccafe528e835f69bfe72b0e1f8888c6ecb5bf0f6020ef8bd03> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/e72043a5cfa5d6ccafe528e835f69bfe72b0e1f8888c6ecb5bf0f6020ef8bd03> .
_:Nf81bb97d1ef148b5918e08e001240025 <http://schema.org/answer> "0" <http://groq.org/e72043a5cfa5d6ccafe528e835f69bfe72b0e1f8888c6ecb5bf0f6020ef8bd03> .
_:Nf81bb97d1ef148b5918e08e001240025 <http://schema.org/explain> "Lecture focuses on algorithm verification/complexity, while KU emphasizes logic programming fundamentals (unification, Horn clauses, etc.) not directly covered." <http://groq.org/e72043a5cfa5d6ccafe528e835f69bfe72b0e1f8888c6ecb5bf0f6020ef8bd03> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/e72043a5cfa5d6ccafe528e835f69bfe72b0e1f8888c6ecb5bf0f6020ef8bd03> .
<http://example.org/faiss> <http://example.org/input> "Label: Bases de données 2 Objectif: (résultats d'apprentissage) • Savoir déterminer des contraintes d’intégrité\n• Savoir appliquer un contrôle d’accès basique à une base de données\n• Comprendre la notion de vue\n• Connaître la structuration physique des données\n• Comprendre la notion de transaction\n• Comprendre la notion d’ordonnancement sérialisable\n• Comprendre la technique de contrôle de concurrence par verrouillage\n• Comprendre les fonctions d’un optimiseur de requêtes\n• Comprendre un plan d’exécution d’une requête\n• Connaître les structures accélératrices d’accès aux données (indexes) Course content: Extension procédurale de SQL (PL/SQL) , BD actives (Déclencheurs) Interrogation d'une base avec Course name: http://example.org/course/UE_X32I040" <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N4b4bafb55dcd44d39c249200b96ece55 <http://example.org/has_score> "0.68290746"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
<http://example.org/course/UE_X32I040> <http://example.org/is_aligned_with> _:N8afedf3983bc4d629ac6489d046515d5 <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N8afedf3983bc4d629ac6489d046515d5 <http://example.org/has_score> "0.685809"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N8c22f1447b4641039bfb08650c69c8ac <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Date_Management_DM/DM-Querying_Query_Construction.txt> <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N4b4bafb55dcd44d39c249200b96ece55 <http://example.org/has_chunk> "DM-Relational: Relational Databases\nCS Core:\n1. Entity and referential integrity: Candidate key, superkeys\n2. Relational database design\nKA Core:\n3. Mapping conceptual schema to a relational schema\n4. Physical database design: file and storage structures (See also: OS-Files)\n5. Introduction to Functional dependency theory\n6. Normalization Theory\na. Decomposition of a schema; lossless-join, and dependency-preservation properties of a\ndecomposition\nb. Normal forms (BCNF)\nc" <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N8afedf3983bc4d629ac6489d046515d5 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Date_Management_DM/DM-Querying_Query_Construction.txt> <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
<http://example.org/course/UE_X32I040> <http://example.org/is_aligned_with> _:N8c22f1447b4641039bfb08650c69c8ac <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N8c22f1447b4641039bfb08650c69c8ac <http://example.org/has_score> "0.7250526"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N8afedf3983bc4d629ac6489d046515d5 <http://example.org/has_chunk> ".g., XPATH, SPARQL)\n8. Stored procedures\nIllustrative Learning Outcomes:\nCS Core:\n1. Compose SQL queries that incorporate select, project, join, union, intersection, set difference, and\nset division.\n2. Determine when a nested SQL query is correlated or not.\n3. Iterate over data retrieved programmatically from a database via an SQL query.\nKA Core:\n4. Define, in SQL, a relation schema, including all integrity constraints and delete/update triggers.\n5. Compose an SQL query to update a tuple in a relation." <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
<http://example.org/course/UE_X32I040> <http://example.org/is_aligned_with> _:N4b4bafb55dcd44d39c249200b96ece55 <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N4b4bafb55dcd44d39c249200b96ece55 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Date_Management_DM/DM-Relational_Relational_Databases.txt> <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N8c22f1447b4641039bfb08650c69c8ac <http://example.org/has_chunk> "DM-Querying: Query Construction\nCS Core:\n1. SQL Query Formation\na. Interactive SQL execution\nb. Programmatic execution of an SQL query\nKA Core:\n2. Relational Algebra\n3. SQL\na. Data definition including integrity and other constraint specifications\nb. Update sublanguage\nNon-core:\n4. Relational Calculus\n5. QBE and 4th-generation environments\n6. Different ways to invoke non-procedural queries in conventional languages\n7. Introduction to other major query languages (e.g., XPATH, SPARQL)\n8" <http://faiss.org/abf2b7daec01e9814511e0cc962ff54d7e25888ed4941dd735162f983e0bb027> .
_:N79b594ddcf2849d9bdc4551c01f1ef9e <http://schema.org/answer> "0" <http://groq.org/f434c1d519bf605fccd00d54a48e8892b53a7fef41f0c06d7ee3d41a68e05305> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I030" <http://groq.org/f434c1d519bf605fccd00d54a48e8892b53a7fef41f0c06d7ee3d41a68e05305> .
_:N79b594ddcf2849d9bdc4551c01f1ef9e <http://schema.org/explain> "Lecture focuses on operational research methods (scheduling, MIP solvers), while KU requires calculus fundamentals (derivatives, integrals, ODEs) not covered." <http://groq.org/f434c1d519bf605fccd00d54a48e8892b53a7fef41f0c06d7ee3d41a68e05305> .
<http://example.org/course/UE_X32I030> <http://example.org/has_schema_type> _:N79b594ddcf2849d9bdc4551c01f1ef9e <http://groq.org/f434c1d519bf605fccd00d54a48e8892b53a7fef41f0c06d7ee3d41a68e05305> .
_:N79b594ddcf2849d9bdc4551c01f1ef9e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/f434c1d519bf605fccd00d54a48e8892b53a7fef41f0c06d7ee3d41a68e05305> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/f434c1d519bf605fccd00d54a48e8892b53a7fef41f0c06d7ee3d41a68e05305> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Recherche opérationnelle Objectif: (résultats d'apprentissage)\n(A-M)\n- Connaître les notions de calendrier au plus tôt, calendrier au plus tard pour un ensemble de\ntâche, et la notion de marge d'une tâche dans le contexte d'un problème d'ordonnancement simple\n(M)\n- Etre capable de déterminer un calendrier au plus tôt, un calendrier au plus tard et les marges\ndes tâches, dans le contexte d'un problème d'ordonnancement simple (A)\n- Introduction à la problématique de l'optimisation multi-objectif : connaissance de la notion de\nsolution efficace, limite de l'utilisation de la somme pondérée (I)\n- Utilisation d'un langage de modélisation algébrique : comprendre la différence entre un modèle\nexplicite et un modèle implicite (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'écrire un modèle implicite\n(A)\n- Utilisation d'un langage de modélisation algébrique : comprendre l'utilisation d'une structure de\nmatrice creuse pour décrire des contraintes (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'utiliser une structure de\nmatrice creuse pour décrire des contraintes (A)\n- Utilisation d'un langage de modélisation algébrique : être capable de détermine si le choix d'une\nmatrice creuse est pertinent ou pas pour décrire des contraintes (A)\n- Utilisation d'un solveur MIP : comprendre l'utilisation d'un solveur MIP en tant que bibliothèque\nde fonction et être capable de l'utiliser pour résoudre un unique problème de programmation\nlinéaire en variables mixtes (A)\n- Utilisation d'un solveur MIP : être capable d'implémenter un algorithme donné, en faisant des\nappels successifs à un solveur MIP pour résoudre un problème de programmation linéaire en\nvariables mixtes (A) Course content: fondamental :\n- Course name: http://example.org/course/UE_X32I030</page1>\n        <page2>Pages: 192-194 HOURS CS Core = 0 KA Core = 40 MSF-Calculus KA Core: 1\\.\nSequences, series, limits 2\\. Single-variable derivatives: definition,\ncomputation rules (chain rule etc.), derivatives of important functions,\napplications 3\\. Single-variable integration: definition, computation rules,\nintegrals of important functions, fundamental theorem of calculus, definite vs\nindefinite, applications (including in probability) 4\\. Parametric and polar\nrepresentations 5\\. Taylor series 6\\. Multivariate calculus: partial\nderivatives, gradient, chain-rule, vector valued functions, 7\\. Optimization:\nconvexity, global vs local minima, gradient descent, constrained optimization,\nand Lagrange multipliers. 8\\. Ordinary Differential Equations (ODEs):\ndefinition, Euler method, applications to simulation, Monte Carlo integration\n9\\. CS applications: gradient descent for machine learning, forward and\ninverse kinematics, applications of calculus to probability Note: the calculus\ntopics listed above are aligned with computer science goals rather than with\ntraditional calculus courses. For example, multivariate calculus is often a\ncourse by itself, but computer science undergraduates only need parts of it\nfor machine learning. Illustrative Learning Outcomes: KA Core: 1\\. Sequences,\nseries, limits a. Explain the difference between infinite sets and sequences.\nb. Explain the formal definition of a limit. c. Derive the limit for examples\nof sequences and series. d. Explain convergence and divergence. e. Apply\nL'Hospital's rule and other approaches to resolving limits. 2\\. Single-\nvariable derivatives: definition, computation rules (chain rule etc.),\nderivatives of important functions, applications a. Explain a derivative in\nterms of limits. b. Explain derivatives as functions. c. Perform elementary\nderivative calculations from limits. d. Apply sum, product, and quotient\nrules. e. Work through examples with important functions. 3\\. Single-variable\nintegration: definition, computation rules, integrals of important functions,\nfundamental theorem of calculus, definite vs indefinite, applications\n(including in probability) a. Explain the definitions of definite and\nindefinite integrals. b. Apply integration rules to examples with important\nfunctions. c. Explore the use of the fundamental theorem of calculus. d. Apply\nintegration to problems. 4\\. Parametric and polar representations a. Apply\nparametric representations of important curves. b. Apply polar\nrepresentations. 5\\. Taylor series a. Derive Taylor series for some important\nfunctions. b. Apply the Taylor series to approximations. 6\\. Multivariate\ncalculus: partial derivatives, gradient, chain-rule, vector valued functions,\napplications to optimization, convexity, global vs local minima. a. Compute\npartial derivatives and gradients. b. Work through examples with vector-valued\nfunctions with gradient notation. c. Explain applications to optimization. 7\\.\nODEs: definition, Euler method, applications to simulation a. Apply the Euler\nmethod to integration. b. Apply the Euler method to a single-variable\ndifferential equation. c. Apply the Euler method to multiple variables in an\nODE.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/f434c1d519bf605fccd00d54a48e8892b53a7fef41f0c06d7ee3d41a68e05305> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/efdbd75d2b6e511edf0df5684bd05f33ff873399dd798f8fe6e2fae0395b177d> .
_:Na49ec1e2697a4b368ccb8804bc0317d3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/efdbd75d2b6e511edf0df5684bd05f33ff873399dd798f8fe6e2fae0395b177d> .
_:Na49ec1e2697a4b368ccb8804bc0317d3 <http://schema.org/answer> "0" <http://groq.org/efdbd75d2b6e511edf0df5684bd05f33ff873399dd798f8fe6e2fae0395b177d> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/efdbd75d2b6e511edf0df5684bd05f33ff873399dd798f8fe6e2fae0395b177d> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/efdbd75d2b6e511edf0df5684bd05f33ff873399dd798f8fe6e2fae0395b177d> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:Na49ec1e2697a4b368ccb8804bc0317d3 <http://groq.org/efdbd75d2b6e511edf0df5684bd05f33ff873399dd798f8fe6e2fae0395b177d> .
_:Na49ec1e2697a4b368ccb8804bc0317d3 <http://schema.org/explain> "The lecture focuses on teaching methods, not the technical content of the KU." <http://groq.org/efdbd75d2b6e511edf0df5684bd05f33ff873399dd798f8fe6e2fae0395b177d> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/1d61421bf3c3f0ac08d5fd2b1716a7aaf8571dc6801b4a07f78ab931b9a5e3af> .
_:Na971ba6620eb41e9a367f8c115fe40f0 <http://schema.org/answer> "0" <http://groq.org/1d61421bf3c3f0ac08d5fd2b1716a7aaf8571dc6801b4a07f78ab931b9a5e3af> .
_:Na971ba6620eb41e9a367f8c115fe40f0 <http://schema.org/explain> "The lecture focuses on software construction and evolution, covering topics like maintenance, documentation, and exception handling, but does not substantially address the core programming concepts detailed in the KU." <http://groq.org/1d61421bf3c3f0ac08d5fd2b1716a7aaf8571dc6801b4a07f78ab931b9a5e3af> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages : 168-169 CS Core : 20, KA Core : None CS Core: 1\\. Basic concepts such\nas variables, primitive data types, expressions, and their evaluation 2\\. How\nimperative programs work: state and state transitions on execution of\nstatements, flow of control 3\\. Basic constructs such as assignment\nstatements, conditional and iterative statements, basic I/O 4\\. Key modularity\nconstructs such as functions (and methods and classes, if supported in the\nlanguage) and related concepts like parameter passing, scope, abstraction,\ndata encapsulation (See also: FPL-OOP) 5\\. Input and output using files and\nAPIs 6\\. Structured data types available in the chosen programming language\nlike sequences (e.g., arrays, lists), associative containers (e.g.,\ndictionaries, maps), others (e.g., sets, tuples) and when and how to use them\n(See also: AL-Foundational) 7\\. Libraries and frameworks provided by the\nlanguage (when/where applicable) 8\\. Recursion 9\\. Dealing with runtime errors\nin programs (e.g., exception handling). 10\\. Basic concepts of programming\nerrors, testing, and debugging (See also: SE-Construction, SEC-Coding) 11\\.\nDocumenting/commenting code at the program and module level.(See also: SE-\nConstruction) 12\\. Develop a security mindset. (See also: SEC-Foundations)\nIllustrative Learning Outcomes: CS Core: In these learning outcomes, the term\n\"develop\" means \"design, write, test, and debug.\" 1\\. Develop programs that\nuse the fundamental programming constructs: assignment and expressions, basic\nI/O, conditional and iterative statements. 2\\. Develop programs using\nfunctions with parameter passing. 3\\. Develop programs that effectively use\nthe different structured data types provided in the language like\narrays/lists, dictionaries, and sets. 4\\. Develop programs that use file I/O\nto provide data persistence across multiple executions. 5\\. Develop programs\nthat use language-provided libraries and frameworks (where applicable). 6\\.\nDevelop programs that use APIs to access or update data (e.g., from the web).\n7\\. Develop programs that create simple classes and instantiate objects of\nthose classes (if supported by the language). 8\\. Explain the concept of\nrecursion and identify when and how to use it effectively. 9\\. Develop\nrecursive functions. 10\\. Develop programs that can handle runtime errors.\n11\\. Read a given program and explain what it does. 12\\. Write comments for a\nprogram or a module specifying what it does. 13\\. Trace the flow of control\nduring the execution of a program. 14\\. Use appropriate terminology to\nidentify elements of a program (e.g., identifier, operator, operand).</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1d61421bf3c3f0ac08d5fd2b1716a7aaf8571dc6801b4a07f78ab931b9a5e3af> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/1d61421bf3c3f0ac08d5fd2b1716a7aaf8571dc6801b4a07f78ab931b9a5e3af> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:Na971ba6620eb41e9a367f8c115fe40f0 <http://groq.org/1d61421bf3c3f0ac08d5fd2b1716a7aaf8571dc6801b4a07f78ab931b9a5e3af> .
_:Na971ba6620eb41e9a367f8c115fe40f0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1d61421bf3c3f0ac08d5fd2b1716a7aaf8571dc6801b4a07f78ab931b9a5e3af> .
_:N95eedfaf5357422bbf28454fb9bf1f8e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/54f825b703a96c96bf728d54e58d5b05ff576e7f00864507df7abdcf70844792> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/54f825b703a96c96bf728d54e58d5b05ff576e7f00864507df7abdcf70844792> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/54f825b703a96c96bf728d54e58d5b05ff576e7f00864507df7abdcf70844792> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:N95eedfaf5357422bbf28454fb9bf1f8e <http://groq.org/54f825b703a96c96bf728d54e58d5b05ff576e7f00864507df7abdcf70844792> .
_:N95eedfaf5357422bbf28454fb9bf1f8e <http://schema.org/answer> "0" <http://groq.org/54f825b703a96c96bf728d54e58d5b05ff576e7f00864507df7abdcf70844792> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/54f825b703a96c96bf728d54e58d5b05ff576e7f00864507df7abdcf70844792> .
_:N95eedfaf5357422bbf28454fb9bf1f8e <http://schema.org/explain> "The lecture focuses on professional English and presentation skills, while the KU covers technical aspects of development platforms in computer science. There is no overlap in content." <http://groq.org/54f825b703a96c96bf728d54e58d5b05ff576e7f00864507df7abdcf70844792> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/7499c92e3990ef3c99ca6d02c0f93e81bd951540b053d6d612654b77901250df> .
_:N2df15c760de947108459d8825f3e4d25 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/7499c92e3990ef3c99ca6d02c0f93e81bd951540b053d6d612654b77901250df> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/7499c92e3990ef3c99ca6d02c0f93e81bd951540b053d6d612654b77901250df> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages : 168-169 CS Core : 20, KA Core : None CS Core: 1\\. Basic concepts such\nas variables, primitive data types, expressions, and their evaluation 2\\. How\nimperative programs work: state and state transitions on execution of\nstatements, flow of control 3\\. Basic constructs such as assignment\nstatements, conditional and iterative statements, basic I/O 4\\. Key modularity\nconstructs such as functions (and methods and classes, if supported in the\nlanguage) and related concepts like parameter passing, scope, abstraction,\ndata encapsulation (See also: FPL-OOP) 5\\. Input and output using files and\nAPIs 6\\. Structured data types available in the chosen programming language\nlike sequences (e.g., arrays, lists), associative containers (e.g.,\ndictionaries, maps), others (e.g., sets, tuples) and when and how to use them\n(See also: AL-Foundational) 7\\. Libraries and frameworks provided by the\nlanguage (when/where applicable) 8\\. Recursion 9\\. Dealing with runtime errors\nin programs (e.g., exception handling). 10\\. Basic concepts of programming\nerrors, testing, and debugging (See also: SE-Construction, SEC-Coding) 11\\.\nDocumenting/commenting code at the program and module level.(See also: SE-\nConstruction) 12\\. Develop a security mindset. (See also: SEC-Foundations)\nIllustrative Learning Outcomes: CS Core: In these learning outcomes, the term\n\"develop\" means \"design, write, test, and debug.\" 1\\. Develop programs that\nuse the fundamental programming constructs: assignment and expressions, basic\nI/O, conditional and iterative statements. 2\\. Develop programs using\nfunctions with parameter passing. 3\\. Develop programs that effectively use\nthe different structured data types provided in the language like\narrays/lists, dictionaries, and sets. 4\\. Develop programs that use file I/O\nto provide data persistence across multiple executions. 5\\. Develop programs\nthat use language-provided libraries and frameworks (where applicable). 6\\.\nDevelop programs that use APIs to access or update data (e.g., from the web).\n7\\. Develop programs that create simple classes and instantiate objects of\nthose classes (if supported by the language). 8\\. Explain the concept of\nrecursion and identify when and how to use it effectively. 9\\. Develop\nrecursive functions. 10\\. Develop programs that can handle runtime errors.\n11\\. Read a given program and explain what it does. 12\\. Write comments for a\nprogram or a module specifying what it does. 13\\. Trace the flow of control\nduring the execution of a program. 14\\. Use appropriate terminology to\nidentify elements of a program (e.g., identifier, operator, operand).</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/7499c92e3990ef3c99ca6d02c0f93e81bd951540b053d6d612654b77901250df> .
_:N2df15c760de947108459d8825f3e4d25 <http://schema.org/answer> "1" <http://groq.org/7499c92e3990ef3c99ca6d02c0f93e81bd951540b053d6d612654b77901250df> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:N2df15c760de947108459d8825f3e4d25 <http://groq.org/7499c92e3990ef3c99ca6d02c0f93e81bd951540b053d6d612654b77901250df> .
_:N2df15c760de947108459d8825f3e4d25 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including topics such as software construction, maintenance, and testing, as well as programming concepts like variables, data types, and control structures." <http://groq.org/7499c92e3990ef3c99ca6d02c0f93e81bd951540b053d6d612654b77901250df> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/c7f0ba17e0718c80b89199c4c6a2300686a95651990662dede811dd0dca99233> .
_:N394bb321202c4b3ca687a6e0a19888aa <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/c7f0ba17e0718c80b89199c4c6a2300686a95651990662dede811dd0dca99233> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:N394bb321202c4b3ca687a6e0a19888aa <http://groq.org/c7f0ba17e0718c80b89199c4c6a2300686a95651990662dede811dd0dca99233> .
_:N394bb321202c4b3ca687a6e0a19888aa <http://schema.org/explain> "The lecture focuses on professional English and presentation skills, while the KU covers advanced programming constructs, with no overlap in content." <http://groq.org/c7f0ba17e0718c80b89199c4c6a2300686a95651990662dede811dd0dca99233> .
_:N394bb321202c4b3ca687a6e0a19888aa <http://schema.org/answer> "0" <http://groq.org/c7f0ba17e0718c80b89199c4c6a2300686a95651990662dede811dd0dca99233> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/c7f0ba17e0718c80b89199c4c6a2300686a95651990662dede811dd0dca99233> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages: 144 HOURS CS Core = 0 KA Core = 0 FPL-Constructs: Advanced Programming\nConstructs Non-core: 1\\. Encapsulation mechanisms 2\\. Delayed evaluation and\ninfinite streams 3\\. Compare and contrast delayed evaluation vs eager\nevaluation 4\\. Unification vs assertion vs expression evaluation 5\\. Control\nabstractions: exception handling, continuations, monads. 6\\. Object-oriented\nabstractions: multiple inheritance, mixins, traits, multimethods 7\\.\nMetaprogramming: macros, generative programming, model-based development 8\\.\nString manipulation via pattern-matching (regular expressions) 9\\. Dynamic\ncode evaluation (\"eval\") 10\\. Language support for checking assertions,\ninvariants, and pre/post-conditions 11\\. Domain specific languages, such as\ndatabase languages, data science languages, embedded computing languages,\nsynchronous languages, hardware interface languages 12\\. Massive parallel high\nperformance computing models and languages Illustrative learning outcomes:\nNon-core: 1\\. Use various advanced programming constructs and idioms\ncorrectly. 2\\. Discuss how various advanced programming constructs aim to\nimprove program structure, software quality, and programmer productivity. 3\\.\nDiscuss how various advanced programming constructs interact with the\ndefinition and implementation of other language features.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/c7f0ba17e0718c80b89199c4c6a2300686a95651990662dede811dd0dca99233> .
_:Na65b169efbd04a3ca9744a37b77ebb36 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/54227d90f537d5279f89542e94af5832aa856a6689d67e2e3e96709b4a707940> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:Na65b169efbd04a3ca9744a37b77ebb36 <http://groq.org/54227d90f537d5279f89542e94af5832aa856a6689d67e2e3e96709b4a707940> .
_:Na65b169efbd04a3ca9744a37b77ebb36 <http://schema.org/explain> "No overlap; KU focuses on programming accessibility/design while lecture teaches scientific English communication" <http://groq.org/54227d90f537d5279f89542e94af5832aa856a6689d67e2e3e96709b4a707940> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages: 147 HOURS CS Core = SEP hours KA Core = SEP hours FPL-SEP: Society,\nEthics, and the Profession Non-core: 1\\. Impact of English-centric programming\nlanguages 2\\. Enhancing accessibility and inclusivity for people with\ndisabilities - Supporting assistive technologies 3\\. Human factors related to\nprogramming languages and usability a. Impact of syntax on accessibility b.\nSupporting cultural differences (e.g., currency, decimals, dates) c.\nNeurodiversity 4\\. Etymology of terms such as \"class,\" \"master,\" and \"slave\"\nin programming languages 5\\. Increasing accessibility by supporting multiple\nlanguages within applications (UTF) Illustrative learning outcomes: Non-core:\n1\\. Consciously design programming languages to be inclusive and non-\noffensive.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/54227d90f537d5279f89542e94af5832aa856a6689d67e2e3e96709b4a707940> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/54227d90f537d5279f89542e94af5832aa856a6689d67e2e3e96709b4a707940> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/54227d90f537d5279f89542e94af5832aa856a6689d67e2e3e96709b4a707940> .
_:Na65b169efbd04a3ca9744a37b77ebb36 <http://schema.org/answer> "0" <http://groq.org/54227d90f537d5279f89542e94af5832aa856a6689d67e2e3e96709b4a707940> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:Ne312a929dfa948b3ab0fc5749b5ca230 <http://groq.org/8e5f87decbfe882374b6f1f0587008cbe3e9b59dadd422be69a8de65707b0e0b> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/8e5f87decbfe882374b6f1f0587008cbe3e9b59dadd422be69a8de65707b0e0b> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages : 168-169 CS Core : 20, KA Core : None CS Core: 1\\. Basic concepts such\nas variables, primitive data types, expressions, and their evaluation 2\\. How\nimperative programs work: state and state transitions on execution of\nstatements, flow of control 3\\. Basic constructs such as assignment\nstatements, conditional and iterative statements, basic I/O 4\\. Key modularity\nconstructs such as functions (and methods and classes, if supported in the\nlanguage) and related concepts like parameter passing, scope, abstraction,\ndata encapsulation (See also: FPL-OOP) 5\\. Input and output using files and\nAPIs 6\\. Structured data types available in the chosen programming language\nlike sequences (e.g., arrays, lists), associative containers (e.g.,\ndictionaries, maps), others (e.g., sets, tuples) and when and how to use them\n(See also: AL-Foundational) 7\\. Libraries and frameworks provided by the\nlanguage (when/where applicable) 8\\. Recursion 9\\. Dealing with runtime errors\nin programs (e.g., exception handling). 10\\. Basic concepts of programming\nerrors, testing, and debugging (See also: SE-Construction, SEC-Coding) 11\\.\nDocumenting/commenting code at the program and module level.(See also: SE-\nConstruction) 12\\. Develop a security mindset. (See also: SEC-Foundations)\nIllustrative Learning Outcomes: CS Core: In these learning outcomes, the term\n\"develop\" means \"design, write, test, and debug.\" 1\\. Develop programs that\nuse the fundamental programming constructs: assignment and expressions, basic\nI/O, conditional and iterative statements. 2\\. Develop programs using\nfunctions with parameter passing. 3\\. Develop programs that effectively use\nthe different structured data types provided in the language like\narrays/lists, dictionaries, and sets. 4\\. Develop programs that use file I/O\nto provide data persistence across multiple executions. 5\\. Develop programs\nthat use language-provided libraries and frameworks (where applicable). 6\\.\nDevelop programs that use APIs to access or update data (e.g., from the web).\n7\\. Develop programs that create simple classes and instantiate objects of\nthose classes (if supported by the language). 8\\. Explain the concept of\nrecursion and identify when and how to use it effectively. 9\\. Develop\nrecursive functions. 10\\. Develop programs that can handle runtime errors.\n11\\. Read a given program and explain what it does. 12\\. Write comments for a\nprogram or a module specifying what it does. 13\\. Trace the flow of control\nduring the execution of a program. 14\\. Use appropriate terminology to\nidentify elements of a program (e.g., identifier, operator, operand).</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/8e5f87decbfe882374b6f1f0587008cbe3e9b59dadd422be69a8de65707b0e0b> .
_:Ne312a929dfa948b3ab0fc5749b5ca230 <http://schema.org/answer> "0" <http://groq.org/8e5f87decbfe882374b6f1f0587008cbe3e9b59dadd422be69a8de65707b0e0b> .
_:Ne312a929dfa948b3ab0fc5749b5ca230 <http://schema.org/explain> "Lecture focuses on software maintenance/documentation/teamwork, while KU covers foundational programming concepts (data types, control structures, recursion, etc.) not explicitly addressed." <http://groq.org/8e5f87decbfe882374b6f1f0587008cbe3e9b59dadd422be69a8de65707b0e0b> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/8e5f87decbfe882374b6f1f0587008cbe3e9b59dadd422be69a8de65707b0e0b> .
_:Ne312a929dfa948b3ab0fc5749b5ca230 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/8e5f87decbfe882374b6f1f0587008cbe3e9b59dadd422be69a8de65707b0e0b> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing\nNon-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.\nCFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.\nRepresenting meaning/Semantics a. Logic-based knowledge representations b.\nSemantic roles c. Temporal representations d. Beliefs, desires, and intentions\n4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.\nExamples of use: POS tagging and morphology 8\\. Information retrieval (See\nalso: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and\nrecall 9\\. Information extraction 10\\. Language translation 11\\. Text\nclassification, categorization a. Bag of words model 12\\. Deep learning for\nNLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,\nimages + text) d. Generative language models Illustrative Learning Outcomes:\n1\\. Define and contrast deterministic and stochastic grammars, providing\nexamples to show the adequacy of each. 2\\. Simulate, apply, or implement\nclassic and stochastic algorithms for parsing natural language. 3\\. Identify\nthe challenges of representing meaning. 4\\. List the advantages of using\nstandard corpora. Identify examples of current corpora for a variety of NLP\ntasks. 5\\. Identify techniques for information retrieval, language\ntranslation, and text classification. 6\\. Implement a TF/IDF transform, use it\nto extract features from a corpus, and train an off-the-shelf machine learning\nalgorithm using those features to do text classification.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/bc1d7cf1668d9db32e0223e2fb077f42e46aaa6e133e2665599e037067034d79> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/bc1d7cf1668d9db32e0223e2fb077f42e46aaa6e133e2665599e037067034d79> .
_:N32866b44aab4476aad8ad9a26ead2835 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/bc1d7cf1668d9db32e0223e2fb077f42e46aaa6e133e2665599e037067034d79> .
_:N32866b44aab4476aad8ad9a26ead2835 <http://schema.org/explain> "The lecture focuses on scientific communication skills, while the KU covers technical NLP concepts like parsing algorithms and machine learning models, which are not addressed in the lecture." <http://groq.org/bc1d7cf1668d9db32e0223e2fb077f42e46aaa6e133e2665599e037067034d79> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:N32866b44aab4476aad8ad9a26ead2835 <http://groq.org/bc1d7cf1668d9db32e0223e2fb077f42e46aaa6e133e2665599e037067034d79> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/bc1d7cf1668d9db32e0223e2fb077f42e46aaa6e133e2665599e037067034d79> .
_:N32866b44aab4476aad8ad9a26ead2835 <http://schema.org/answer> "0" <http://groq.org/bc1d7cf1668d9db32e0223e2fb077f42e46aaa6e133e2665599e037067034d79> .
_:N11b3157d3d8a4222a0b981f81349160b <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/802a4c63df1c04f14ebbe974a1b25f03e3d948965ddf98481eac15d2de7d3143> .
_:N11b3157d3d8a4222a0b981f81349160b <http://schema.org/explain> "The lecture focuses on professional integration and soft skills, while the KU covers technical machine learning topics." <http://groq.org/802a4c63df1c04f14ebbe974a1b25f03e3d948965ddf98481eac15d2de7d3143> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages:71-75 HOURS CS Core = 4 KA Core = 6 AI-ML: Machine Learning CS Core: 1\\.\nDefinition and examples of a broad variety of machine learning tasks a.\nSupervised learning i. Classification ii. Regression b. Reinforcement learning\nc. Unsupervised learning i. Clustering 2\\. Fundamental ideas: a. No free lunch\ntheorem: no one learner can solve all problems; representational design\ndecisions have consequences. b. Sources of error and undecidability in machine\nlearning 3\\. A simple statistical-based supervised learning such as linear\nregression or decision trees a. Focus on how they work without going into\nmathematical or optimization details; enough to understand and use existing\nimplementations correctly 4\\. The overfitting problem/controlling solution\ncomplexity (regularization, pruning - intuition only) a. The bias\n(underfitting) - variance (overfitting) tradeoff 5\\. Working with Data a. Data\npreprocessing i. Importance and pitfalls of preprocessing choices b. Handling\nmissing values (imputing, flag-as-missing) i. Implications of imputing vs\nflag-as-missing c. Encoding categorical variables, encoding real-valued data\nd. Normalization/standardization e. Emphasis on real data, not textbook\nexamples 6\\. Representations a. Hypothesis spaces and complexity b. Simple\nbasis feature expansion, such as squaring univariate features c. Learned\nfeature representations 7\\. Machine learning evaluation a. Separation of\ntrain, validation, and test sets b. Performance metrics for classifiers c.\nEstimation of test performance on held-out data d. Tuning the parameters of a\nmachine learning model with a validation set e. Importance of understanding\nwhat a model is doing, where its pitfalls/shortcomings are, and the\nimplications of its decisions 8\\. Basic neural networks a. Fundamentals of\nunderstanding how neural networks work and their training process, without\ndetails of the calculations b. Basic introduction to generative neural\nnetworks (e.g., large language models) 9\\. Ethics for Machine Learning (See\nalso: SEP-Context) a. Focus on real data, real scenarios, and case studies b.\nDataset/algorithmic/evaluation bias and unintended consequences 72 KA Core:\n10\\. Formulation of simple machine learning as an optimization problem, such\nas least squares linear regression or logistic regression a. Objective\nfunction b. Gradient descent c. Regularization to avoid overfitting\n(mathematical formulation) 11\\. Ensembles of models a. Simple weighted\nmajority combination 12\\. Deep learning a. Deep feed-forward networks\n(intuition only, no mathematics) b. Convolutional neural networks (intuition\nonly, no mathematics) c. Visualization of learned feature representations from\ndeep nets d. Other architectures (generative NN, recurrent NN, transformers,\netc.) 13\\. Performance evaluation a. Other metrics for classification (e.g.,\nerror, precision, recall) b. Performance metrics for regressors c. Confusion\nmatrix d. Cross-validation i. Parameter tuning (grid/random search, via cross-\nvalidation) 14\\. Overview of reinforcement learning methods 15\\. Two or more\napplications of machine learning algorithms a. E.g., medicine and health,\neconomics, vision, natural language, robotics, game play 16\\. Ethics for\nMachine Learning a. Continued focus on real data, real scenarios, and case\nstudies (See also: SEP-Context) b. Privacy (See also: SEP-Privacy) c. Fairness\n(See also: SEP-Privacy) d. Intellectual property e. Explainability Non-core:\n17\\. General statistical-based learning, parameter estimation (maximum\nlikelihood) 18\\. Supervised learning a. Decision trees b. Nearest-neighbor\nclassification and regression c. Learning simple neural networks / multi-layer\nperceptrons d. Linear regression e. Logistic regression f. Support vector\nmachines (SVMs) and kernels g. Gaussian Processes 19\\. Overfitting a. The\ncurse of dimensionality b. Regularization (mathematical computations, L2 and\nL1 regularization) 20\\. Experimental design 73 a. Data preparation (e.g.,\nstandardization, representation, one-hot encoding) b. Hypothesis space c.\nBiases (e.g., algorithmic, search) d. Partitioning data: stratification,\ntraining set, validation set, test set e. Parameter tuning (grid/random\nsearch, via cross-validation) f. Performance evaluation i. Cross-validation\nii. Metric: error, precision, recall, confusion matrix iii. Receiver operating\ncharacteristic (ROC) curve and area under ROC curve 21\\. Bayesian learning\n(Cross-Reference AI/Reasoning Under Uncertainty) a. Naive Bayes and its\nrelationship to linear models b. Bayesian networks c. Prior/posterior d.\nGenerative models 22\\. Deep learning a. Deep feed-forward networks b. Neural\ntangent kernel and understanding neural network training c. Convolutional\nneural networks d. Autoencoders e. Recurrent networks f. Representations and\nknowledge transfer g. Adversarial training and generative adversarial networks\nh. Attention mechanisms 23\\. Representations a. Manually crafted\nrepresentations b. Basis expansion c. Learned representations (e.g., deep\nneural networks) 24\\. Unsupervised learning and clustering a. K-means b.\nGaussian mixture models c. Expectation maximization (EM) d. Self-organizing\nmaps 25\\. Graph analysis (e.g., PageRank) 26\\. Semi-supervised learning 27\\.\nGraphical models (See also: AI-Probability) 28\\. Ensembles a. Weighted\nmajority b. Boosting/bagging c. Random forest d. Gated ensemble 29\\. Learning\ntheory a. General overview of learning theory / why learning works b. VC\ndimension c. Generalization bounds 74 30\\. Reinforcement learning a.\nExploration vs exploitation tradeoff b. Markov decision processes c. Value and\npolicy iteration d. Policy gradient methods e. Deep reinforcement learning f.\nLearning from demonstration and inverse RL 31\\. Explainable / interpretable\nmachine learning a. Understanding feature importance (e.g., LIME, Shapley\nvalues) b. Interpretable models and representations 32\\. Recommender systems\n33\\. Hardware for machine learning a. GPUs / TPUs 34\\. Application of machine\nlearning algorithms to: a. Medicine and health b. Economics c. Education d.\nVision e. Natural language f. Robotics g. Game play h. Data mining (Cross-\nreference DM/Data Analytics) 35\\. Ethics for Machine Learning a. Continued\nfocus on real data, real scenarios, and case studies (See also: SEP-Context)\nb. In depth exploration of dataset/algorithmic/evaluation bias, data privacy,\nand fairness (See also: SEP-Privacy, SEP-Context) c. Trust / explainability\nIllustrative Learning Outcomes: 1\\. Describe the differences among the three\nmain styles of learning (supervised, reinforcement, and unsupervised) and\ndetermine which is appropriate to a particular problem domain. 2\\.\nDifferentiate the terms of AI, machine learning, and deep learning. 3\\. Frame\nan application as a classification problem, including the available input\nfeatures and output to be predicted (e.g., identifying alphabetic characters\nfrom pixel grid input). 4\\. Apply two or more simple statistical learning\nalgorithms to a classification task and measure the classifiers' accuracy. 5\\.\nIdentify overfitting in the context of a problem and learning curves and\ndescribe solutions to overfitting. 6\\. Explain how machine learning works as\nan optimization/search process. 7\\. Implement a statistical learning algorithm\nand the corresponding optimization process to train the classifier and obtain\na prediction on new data. 8\\. Describe the neural network training process and\nresulting learned representations. 75 9\\. Explain proper ML evaluation\nprocedures, including the differences between training and testing\nperformance, and what can go wrong with the evaluation process leading to\ninaccurate reporting of ML performance. 10\\. Compare two machine learning\nalgorithms on a dataset, implementing the data preprocessing and evaluation\nmethodology (e.g., metrics and handling of train/test splits) from scratch.\n11\\. Visualize the training progress of a neural network through learning\ncurves in a well-established toolkit (e.g., TensorBoard) and visualize the\nlearned features of the network. 12\\. Compare and contrast several learning\ntechniques (e.g., decision trees, logistic regression, naive Bayes, neural\nnetworks, and belief networks), providing examples of when each strategy is\nsuperior. 13\\. Evaluate the performance of a simple learning system on a real-\nworld dataset. 14\\. Characterize the state of the art in learning theory,\nincluding its achievements and shortcomings. 15\\. Explain the problem of\noverfitting, along with techniques for detecting and managing the problem.\n16\\. Explain the triple tradeoff among the size of a hypothesis space, the\nsize of the training set, and performance accuracy. 17\\. Given a real-world\napplication of machine learning, describe ethical issues regarding the choices\nof data, preprocessing steps, algorithm selection, and\nvisualization/presentation of results</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/802a4c63df1c04f14ebbe974a1b25f03e3d948965ddf98481eac15d2de7d3143> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/802a4c63df1c04f14ebbe974a1b25f03e3d948965ddf98481eac15d2de7d3143> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:N11b3157d3d8a4222a0b981f81349160b <http://groq.org/802a4c63df1c04f14ebbe974a1b25f03e3d948965ddf98481eac15d2de7d3143> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/802a4c63df1c04f14ebbe974a1b25f03e3d948965ddf98481eac15d2de7d3143> .
_:N11b3157d3d8a4222a0b981f81349160b <http://schema.org/answer> "0" <http://groq.org/802a4c63df1c04f14ebbe974a1b25f03e3d948965ddf98481eac15d2de7d3143> .
_:N541720945f4f40c298c19a65237eaa68 <http://schema.org/explain> "The lecture covers topics such as formal semantics, automates, and transducteurs, which align with the knowledge unit's objectives and learning outcomes." <http://groq.org/c033c61fea820671870dbcbaae7e1be37838546bdae658f14cbab8f13afd918c> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/c033c61fea820671870dbcbaae7e1be37838546bdae658f14cbab8f13afd918c> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:N541720945f4f40c298c19a65237eaa68 <http://groq.org/c033c61fea820671870dbcbaae7e1be37838546bdae658f14cbab8f13afd918c> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/c033c61fea820671870dbcbaae7e1be37838546bdae658f14cbab8f13afd918c> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages: 145-146 HOURS CS Core = 0 KA Core = 0 FPL-Formalism: Formal Semantics\nNon-core: 1\\. Syntax vs semantics 2\\. Approaches to semantics: axiomatic,\noperational, denotational, type-based 3\\. Axiomatic semantics of abstract\nconstructs such as assignment, selection, iteration using precondition, post-\nconditions, and loop invariant 4\\. Operational semantics analysis of abstract\nconstructs and sequence of such as assignment, expression evaluation,\nselection, iteration using environment and store a. Symbolic execution b.\nConstraint checkers 5\\. Denotational semantics a. Lambda Calculus. (See also:\nAL-Models, FPL-Functional) 6\\. Proofs by induction over language semantics 7\\.\nFormal definitions and proofs for type systems (See also: FPL-Types) a.\nPropositions as types (implication as a function, conjunction as a product,\ndisjunction as a sum) b. Dependent types (universal quantification as\ndependent function, existential quantification as dependent product) c.\nParametricity Illustrative learning outcomes: Non-core: 1\\. Construct formal\nsemantics for a small language. 2\\. Write a lambda-calculus program and show\nits evaluation to a normal form. 3\\. Discuss the different approaches of\noperational, denotational, and axiomatic semantics. 4\\. Use induction to prove\nproperties of all programs in a language. 5\\. Use induction to prove\nproperties of all programs in a language that is well-typed according to a\nformally defined type system. 6\\. Use parametricity to establish the behavior\nof code given only its type.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/c033c61fea820671870dbcbaae7e1be37838546bdae658f14cbab8f13afd918c> .
_:N541720945f4f40c298c19a65237eaa68 <http://schema.org/answer> "1" <http://groq.org/c033c61fea820671870dbcbaae7e1be37838546bdae658f14cbab8f13afd918c> .
_:N541720945f4f40c298c19a65237eaa68 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/c033c61fea820671870dbcbaae7e1be37838546bdae658f14cbab8f13afd918c> .
_:N0fb3c72a189d4695a17910ecfd477412 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/cf4a911deb135ff8478d49e9731fbe241e3c39c9936243183c517d493549135e> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/cf4a911deb135ff8478d49e9731fbe241e3c39c9936243183c517d493549135e> .
_:N0fb3c72a189d4695a17910ecfd477412 <http://schema.org/explain> "The lecture focuses on operational research and optimization techniques, which only partially overlap with the calculus topics in the KU." <http://groq.org/cf4a911deb135ff8478d49e9731fbe241e3c39c9936243183c517d493549135e> .
_:N0fb3c72a189d4695a17910ecfd477412 <http://schema.org/answer> "0" <http://groq.org/cf4a911deb135ff8478d49e9731fbe241e3c39c9936243183c517d493549135e> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I030" <http://groq.org/cf4a911deb135ff8478d49e9731fbe241e3c39c9936243183c517d493549135e> .
<http://example.org/course/UE_X32I030> <http://example.org/has_schema_type> _:N0fb3c72a189d4695a17910ecfd477412 <http://groq.org/cf4a911deb135ff8478d49e9731fbe241e3c39c9936243183c517d493549135e> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Recherche opérationnelle Objectif: (résultats d'apprentissage)\n(A-M)\n- Connaître les notions de calendrier au plus tôt, calendrier au plus tard pour un ensemble de\ntâche, et la notion de marge d'une tâche dans le contexte d'un problème d'ordonnancement simple\n(M)\n- Etre capable de déterminer un calendrier au plus tôt, un calendrier au plus tard et les marges\ndes tâches, dans le contexte d'un problème d'ordonnancement simple (A)\n- Introduction à la problématique de l'optimisation multi-objectif : connaissance de la notion de\nsolution efficace, limite de l'utilisation de la somme pondérée (I)\n- Utilisation d'un langage de modélisation algébrique : comprendre la différence entre un modèle\nexplicite et un modèle implicite (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'écrire un modèle implicite\n(A)\n- Utilisation d'un langage de modélisation algébrique : comprendre l'utilisation d'une structure de\nmatrice creuse pour décrire des contraintes (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'utiliser une structure de\nmatrice creuse pour décrire des contraintes (A)\n- Utilisation d'un langage de modélisation algébrique : être capable de détermine si le choix d'une\nmatrice creuse est pertinent ou pas pour décrire des contraintes (A)\n- Utilisation d'un solveur MIP : comprendre l'utilisation d'un solveur MIP en tant que bibliothèque\nde fonction et être capable de l'utiliser pour résoudre un unique problème de programmation\nlinéaire en variables mixtes (A)\n- Utilisation d'un solveur MIP : être capable d'implémenter un algorithme donné, en faisant des\nappels successifs à un solveur MIP pour résoudre un problème de programmation linéaire en\nvariables mixtes (A) Course content: fondamental :\n- Course name: http://example.org/course/UE_X32I030</page1>\n        <page2>Pages: 192-194 HOURS CS Core = 0 KA Core = 40 MSF-Calculus KA Core: 1\\.\nSequences, series, limits 2\\. Single-variable derivatives: definition,\ncomputation rules (chain rule etc.), derivatives of important functions,\napplications 3\\. Single-variable integration: definition, computation rules,\nintegrals of important functions, fundamental theorem of calculus, definite vs\nindefinite, applications (including in probability) 4\\. Parametric and polar\nrepresentations 5\\. Taylor series 6\\. Multivariate calculus: partial\nderivatives, gradient, chain-rule, vector valued functions, 7\\. Optimization:\nconvexity, global vs local minima, gradient descent, constrained optimization,\nand Lagrange multipliers. 8\\. Ordinary Differential Equations (ODEs):\ndefinition, Euler method, applications to simulation, Monte Carlo integration\n9\\. CS applications: gradient descent for machine learning, forward and\ninverse kinematics, applications of calculus to probability Note: the calculus\ntopics listed above are aligned with computer science goals rather than with\ntraditional calculus courses. For example, multivariate calculus is often a\ncourse by itself, but computer science undergraduates only need parts of it\nfor machine learning. Illustrative Learning Outcomes: KA Core: 1\\. Sequences,\nseries, limits a. Explain the difference between infinite sets and sequences.\nb. Explain the formal definition of a limit. c. Derive the limit for examples\nof sequences and series. d. Explain convergence and divergence. e. Apply\nL'Hospital's rule and other approaches to resolving limits. 2\\. Single-\nvariable derivatives: definition, computation rules (chain rule etc.),\nderivatives of important functions, applications a. Explain a derivative in\nterms of limits. b. Explain derivatives as functions. c. Perform elementary\nderivative calculations from limits. d. Apply sum, product, and quotient\nrules. e. Work through examples with important functions. 3\\. Single-variable\nintegration: definition, computation rules, integrals of important functions,\nfundamental theorem of calculus, definite vs indefinite, applications\n(including in probability) a. Explain the definitions of definite and\nindefinite integrals. b. Apply integration rules to examples with important\nfunctions. c. Explore the use of the fundamental theorem of calculus. d. Apply\nintegration to problems. 4\\. Parametric and polar representations a. Apply\nparametric representations of important curves. b. Apply polar\nrepresentations. 5\\. Taylor series a. Derive Taylor series for some important\nfunctions. b. Apply the Taylor series to approximations. 6\\. Multivariate\ncalculus: partial derivatives, gradient, chain-rule, vector valued functions,\napplications to optimization, convexity, global vs local minima. a. Compute\npartial derivatives and gradients. b. Work through examples with vector-valued\nfunctions with gradient notation. c. Explain applications to optimization. 7\\.\nODEs: definition, Euler method, applications to simulation a. Apply the Euler\nmethod to integration. b. Apply the Euler method to a single-variable\ndifferential equation. c. Apply the Euler method to multiple variables in an\nODE.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/cf4a911deb135ff8478d49e9731fbe241e3c39c9936243183c517d493549135e> .
_:Nee06b86a8a83476f92f54c8a360c4f10 <http://schema.org/explain> "The lecture covers key concepts of SE-Formal Methods, such as conceiving and employing higher-order functions, and explaining the mechanism of type inference, which aligns with the KU's learning outcomes." <http://groq.org/79bb3be275bcc839177854b04a6f93b175e0e4a4fdf65a172afe1783bcdca4fb> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/79bb3be275bcc839177854b04a6f93b175e0e4a4fdf65a172afe1783bcdca4fb> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:Nee06b86a8a83476f92f54c8a360c4f10 <http://groq.org/79bb3be275bcc839177854b04a6f93b175e0e4a4fdf65a172afe1783bcdca4fb> .
_:Nee06b86a8a83476f92f54c8a360c4f10 <http://schema.org/answer> "1" <http://groq.org/79bb3be275bcc839177854b04a6f93b175e0e4a4fdf65a172afe1783bcdca4fb> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/79bb3be275bcc839177854b04a6f93b175e0e4a4fdf65a172afe1783bcdca4fb> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/79bb3be275bcc839177854b04a6f93b175e0e4a4fdf65a172afe1783bcdca4fb> .
_:Nee06b86a8a83476f92f54c8a360c4f10 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/79bb3be275bcc839177854b04a6f93b175e0e4a4fdf65a172afe1783bcdca4fb> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/ae6332b9fae397818de954e2c735dad4272600f58fb42e0adfc5a7a77acfd88b> .
_:Nf2b03a8c7123498187a119940de6bf97 <http://schema.org/answer> "0" <http://groq.org/ae6332b9fae397818de954e2c735dad4272600f58fb42e0adfc5a7a77acfd88b> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/ae6332b9fae397818de954e2c735dad4272600f58fb42e0adfc5a7a77acfd88b> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:Nf2b03a8c7123498187a119940de6bf97 <http://groq.org/ae6332b9fae397818de954e2c735dad4272600f58fb42e0adfc5a7a77acfd88b> .
_:Nf2b03a8c7123498187a119940de6bf97 <http://schema.org/explain> "The lecture does not substantially cover the detailed technical content of the Knowledge Unit." <http://groq.org/ae6332b9fae397818de954e2c735dad4272600f58fb42e0adfc5a7a77acfd88b> .
_:Nf2b03a8c7123498187a119940de6bf97 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/ae6332b9fae397818de954e2c735dad4272600f58fb42e0adfc5a7a77acfd88b> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/ae6332b9fae397818de954e2c735dad4272600f58fb42e0adfc5a7a77acfd88b> .
_:N74f5bf81208c4f3ba948c60e2bd6da49 <http://schema.org/answer> "1" <http://groq.org/d5d92f2b0e9a6c7f999029defd005fa637413af7fe5b5803878a26a009716bf2> .
_:N74f5bf81208c4f3ba948c60e2bd6da49 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/d5d92f2b0e9a6c7f999029defd005fa637413af7fe5b5803878a26a009716bf2> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Bases de données 2 Objectif: (résultats d'apprentissage) • Savoir déterminer des contraintes d’intégrité\n• Savoir appliquer un contrôle d’accès basique à une base de données\n• Comprendre la notion de vue\n• Connaître la structuration physique des données\n• Comprendre la notion de transaction\n• Comprendre la notion d’ordonnancement sérialisable\n• Comprendre la technique de contrôle de concurrence par verrouillage\n• Comprendre les fonctions d’un optimiseur de requêtes\n• Comprendre un plan d’exécution d’une requête\n• Connaître les structures accélératrices d’accès aux données (indexes) Course content: Extension procédurale de SQL (PL/SQL) , BD actives (Déclencheurs) Interrogation d'une base avec Course name: http://example.org/course/UE_X32I040</page1>\n        <page2>Pages: 117-118 HOURS CS Core = 1 KA Core = 3 DM-Relational: Relational\nDatabases CS Core: 1\\. Entity and referential integrity: Candidate key,\nsuperkeys 2\\. Relational database design KA Core: 3\\. Mapping conceptual\nschema to a relational schema 4\\. Physical database design: file and storage\nstructures (See also: OS-Files) 5\\. Introduction to Functional dependency\ntheory 6\\. Normalization Theory a. Decomposition of a schema; lossless-join,\nand dependency-preservation properties of a decomposition b. Normal forms\n(BCNF) c. Denormalization (for efficiency) Non-core: 7\\. Functional dependency\ntheory a. Closure of a set of attributes b. Canonical Cover 8\\. Normalization\ntheory a. Multi-valued dependency (4NF) b. Join dependency (PJNF, 5NF) c.\nRepresentation theory Illustrative Learning Outcomes: CS Core: 1\\. Describe\nthe defining characteristics behind the relational data model. 2\\. Comment on\nthe difference between a foreign key and a superkey. 3\\. Enumerate the\ndifferent types of integrity constraints. KA Core: 4\\. Compose a relational\nschema from a conceptual schema which contains 1:1, 1:n, and n:m\nrelationships. 5\\. Map appropriate file structure to relations and indices.\n6\\. Describe how functional dependency theory generalizes the notion of key.\n7\\. Defend a given decomposition as lossless and or dependency preserving. 8\\.\nDetect which normal form a given decomposition yields. 9\\. Comment on reasons\nfor denormalizing a relation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/d5d92f2b0e9a6c7f999029defd005fa637413af7fe5b5803878a26a009716bf2> .
<http://example.org/course/UE_X32I040> <http://example.org/has_schema_type> _:N74f5bf81208c4f3ba948c60e2bd6da49 <http://groq.org/d5d92f2b0e9a6c7f999029defd005fa637413af7fe5b5803878a26a009716bf2> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I040" <http://groq.org/d5d92f2b0e9a6c7f999029defd005fa637413af7fe5b5803878a26a009716bf2> .
_:N74f5bf81208c4f3ba948c60e2bd6da49 <http://schema.org/explain> "Covers core topics like integrity constraints, normalization (BCNF), physical structuring, transactions, and query optimization." <http://groq.org/d5d92f2b0e9a6c7f999029defd005fa637413af7fe5b5803878a26a009716bf2> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/d5d92f2b0e9a6c7f999029defd005fa637413af7fe5b5803878a26a009716bf2> .
_:Na7428c93471546a8954b58233b6af07e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/78913531932caa74fea08cc68a50389dd33fd786b21a71412f6bb7d96113be16> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:Na7428c93471546a8954b58233b6af07e <http://groq.org/78913531932caa74fea08cc68a50389dd33fd786b21a71412f6bb7d96113be16> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/78913531932caa74fea08cc68a50389dd33fd786b21a71412f6bb7d96113be16> .
_:Na7428c93471546a8954b58233b6af07e <http://schema.org/explain> "The lecture focuses on functional programming concepts and does not cover the formal methods topics described in the KU." <http://groq.org/78913531932caa74fea08cc68a50389dd33fd786b21a71412f6bb7d96113be16> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/78913531932caa74fea08cc68a50389dd33fd786b21a71412f6bb7d96113be16> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/78913531932caa74fea08cc68a50389dd33fd786b21a71412f6bb7d96113be16> .
_:Na7428c93471546a8954b58233b6af07e <http://schema.org/answer> "0" <http://groq.org/78913531932caa74fea08cc68a50389dd33fd786b21a71412f6bb7d96113be16> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/88479ee0a9eba7d97012c2bb91f5ba132eb93b34e335328f352d6365a50f2eb1> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:N726e274ccc684cab8e9b2e40dbd433ee <http://groq.org/88479ee0a9eba7d97012c2bb91f5ba132eb93b34e335328f352d6365a50f2eb1> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/88479ee0a9eba7d97012c2bb91f5ba132eb93b34e335328f352d6365a50f2eb1> .
_:N726e274ccc684cab8e9b2e40dbd433ee <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/88479ee0a9eba7d97012c2bb91f5ba132eb93b34e335328f352d6365a50f2eb1> .
_:N726e274ccc684cab8e9b2e40dbd433ee <http://schema.org/explain> "No overlap: Lecture focuses on software maintenance and development practices, while KU covers logic programming theory." <http://groq.org/88479ee0a9eba7d97012c2bb91f5ba132eb93b34e335328f352d6365a50f2eb1> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/88479ee0a9eba7d97012c2bb91f5ba132eb93b34e335328f352d6365a50f2eb1> .
_:N726e274ccc684cab8e9b2e40dbd433ee <http://schema.org/answer> "0" <http://groq.org/88479ee0a9eba7d97012c2bb91f5ba132eb93b34e335328f352d6365a50f2eb1> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:N99f7a1fddace40f39c3ad97a23527e9e <http://groq.org/7d7b56f5158e361b090de6ce5b606847ba90affbfc27c51b3468666ab9c93561> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/7d7b56f5158e361b090de6ce5b606847ba90affbfc27c51b3468666ab9c93561> .
_:N99f7a1fddace40f39c3ad97a23527e9e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/7d7b56f5158e361b090de6ce5b606847ba90affbfc27c51b3468666ab9c93561> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing\nNon-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.\nCFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.\nRepresenting meaning/Semantics a. Logic-based knowledge representations b.\nSemantic roles c. Temporal representations d. Beliefs, desires, and intentions\n4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.\nExamples of use: POS tagging and morphology 8\\. Information retrieval (See\nalso: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and\nrecall 9\\. Information extraction 10\\. Language translation 11\\. Text\nclassification, categorization a. Bag of words model 12\\. Deep learning for\nNLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,\nimages + text) d. Generative language models Illustrative Learning Outcomes:\n1\\. Define and contrast deterministic and stochastic grammars, providing\nexamples to show the adequacy of each. 2\\. Simulate, apply, or implement\nclassic and stochastic algorithms for parsing natural language. 3\\. Identify\nthe challenges of representing meaning. 4\\. List the advantages of using\nstandard corpora. Identify examples of current corpora for a variety of NLP\ntasks. 5\\. Identify techniques for information retrieval, language\ntranslation, and text classification. 6\\. Implement a TF/IDF transform, use it\nto extract features from a corpus, and train an off-the-shelf machine learning\nalgorithm using those features to do text classification.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/7d7b56f5158e361b090de6ce5b606847ba90affbfc27c51b3468666ab9c93561> .
_:N99f7a1fddace40f39c3ad97a23527e9e <http://schema.org/explain> "The lecture focuses on scientific communication in English, while the KU covers technical NLP topics." <http://groq.org/7d7b56f5158e361b090de6ce5b606847ba90affbfc27c51b3468666ab9c93561> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/7d7b56f5158e361b090de6ce5b606847ba90affbfc27c51b3468666ab9c93561> .
_:N99f7a1fddace40f39c3ad97a23527e9e <http://schema.org/answer> "0" <http://groq.org/7d7b56f5158e361b090de6ce5b606847ba90affbfc27c51b3468666ab9c93561> .
_:N3b60c029ecff400289e8a9a649c44a86 <http://schema.org/answer> "0" <http://groq.org/26978cc6fcbdbc1d4824707cd2f93f15f072bad7499278bdf46089dc40b0b2b2> .
_:N3b60c029ecff400289e8a9a649c44a86 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/26978cc6fcbdbc1d4824707cd2f93f15f072bad7499278bdf46089dc40b0b2b2> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:N3b60c029ecff400289e8a9a649c44a86 <http://groq.org/26978cc6fcbdbc1d4824707cd2f93f15f072bad7499278bdf46089dc40b0b2b2> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/26978cc6fcbdbc1d4824707cd2f93f15f072bad7499278bdf46089dc40b0b2b2> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/26978cc6fcbdbc1d4824707cd2f93f15f072bad7499278bdf46089dc40b0b2b2> .
_:N3b60c029ecff400289e8a9a649c44a86 <http://schema.org/explain> "Lecture focuses on algorithm verification/complexity proofs, while KU emphasizes algorithm concepts, common examples, and performance impacts." <http://groq.org/26978cc6fcbdbc1d4824707cd2f93f15f072bad7499278bdf46089dc40b0b2b2> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,\nAL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.\nSome common algorithms (e.g., sorting, searching, tree traversal, graph\ntraversal) 3\\. Impact of algorithms on time-space efficiency of programs\nIllustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms\nfor writing programs. 2\\. Demonstrate how a problem may be solved by different\nalgorithms, each with different properties. 3\\. Explain some common algorithms\n(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the\nimpact on space/time performance of some algorithms.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/26978cc6fcbdbc1d4824707cd2f93f15f072bad7499278bdf46089dc40b0b2b2> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS\nCore: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-\nOverview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface\nwith operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment\nvariables (See also: SF-Overview) 5\\. File abstraction and operators (See\nalso: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as\narrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-\nStructures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and\nprocesses (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:\nCS Core: 1\\. Create and execute automated scripts to manage various system\ntasks. 2\\. Solve various text processing problems through scripting.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/489ad236ef3a21822613c6265f228729fe1e947b2dda56770884cd57797ea5cc> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/489ad236ef3a21822613c6265f228729fe1e947b2dda56770884cd57797ea5cc> .
_:N7d8574b2853441a8945694b00743dafd <http://schema.org/answer> "0" <http://groq.org/489ad236ef3a21822613c6265f228729fe1e947b2dda56770884cd57797ea5cc> .
_:N7d8574b2853441a8945694b00743dafd <http://schema.org/explain> "The lecture covers some related concepts like regular expressions but does not substantially address the broader scripting and system interaction topics of the KU." <http://groq.org/489ad236ef3a21822613c6265f228729fe1e947b2dda56770884cd57797ea5cc> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:N7d8574b2853441a8945694b00743dafd <http://groq.org/489ad236ef3a21822613c6265f228729fe1e947b2dda56770884cd57797ea5cc> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/489ad236ef3a21822613c6265f228729fe1e947b2dda56770884cd57797ea5cc> .
_:N7d8574b2853441a8945694b00743dafd <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/489ad236ef3a21822613c6265f228729fe1e947b2dda56770884cd57797ea5cc> .
<http://example.org/course/UE_X32I040> <http://example.org/has_schema_type> _:N3d5f4811d66d4361867f17d68fb79395 <http://groq.org/b980257c9507fee09b9ee62dc93754336c989a38c5225985b2429aa562c39c76> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Bases de données 2 Objectif: (résultats d'apprentissage) • Savoir déterminer des contraintes d’intégrité\n• Savoir appliquer un contrôle d’accès basique à une base de données\n• Comprendre la notion de vue\n• Connaître la structuration physique des données\n• Comprendre la notion de transaction\n• Comprendre la notion d’ordonnancement sérialisable\n• Comprendre la technique de contrôle de concurrence par verrouillage\n• Comprendre les fonctions d’un optimiseur de requêtes\n• Comprendre un plan d’exécution d’une requête\n• Connaître les structures accélératrices d’accès aux données (indexes) Course content: Extension procédurale de SQL (PL/SQL) , BD actives (Déclencheurs) Interrogation d'une base avec Course name: http://example.org/course/UE_X32I040</page1>\n        <page2>Pages: 117-118 HOURS CS Core = 1 KA Core = 3 DM-Relational: Relational\nDatabases CS Core: 1\\. Entity and referential integrity: Candidate key,\nsuperkeys 2\\. Relational database design KA Core: 3\\. Mapping conceptual\nschema to a relational schema 4\\. Physical database design: file and storage\nstructures (See also: OS-Files) 5\\. Introduction to Functional dependency\ntheory 6\\. Normalization Theory a. Decomposition of a schema; lossless-join,\nand dependency-preservation properties of a decomposition b. Normal forms\n(BCNF) c. Denormalization (for efficiency) Non-core: 7\\. Functional dependency\ntheory a. Closure of a set of attributes b. Canonical Cover 8\\. Normalization\ntheory a. Multi-valued dependency (4NF) b. Join dependency (PJNF, 5NF) c.\nRepresentation theory Illustrative Learning Outcomes: CS Core: 1\\. Describe\nthe defining characteristics behind the relational data model. 2\\. Comment on\nthe difference between a foreign key and a superkey. 3\\. Enumerate the\ndifferent types of integrity constraints. KA Core: 4\\. Compose a relational\nschema from a conceptual schema which contains 1:1, 1:n, and n:m\nrelationships. 5\\. Map appropriate file structure to relations and indices.\n6\\. Describe how functional dependency theory generalizes the notion of key.\n7\\. Defend a given decomposition as lossless and or dependency preserving. 8\\.\nDetect which normal form a given decomposition yields. 9\\. Comment on reasons\nfor denormalizing a relation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b980257c9507fee09b9ee62dc93754336c989a38c5225985b2429aa562c39c76> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I040" <http://groq.org/b980257c9507fee09b9ee62dc93754336c989a38c5225985b2429aa562c39c76> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/b980257c9507fee09b9ee62dc93754336c989a38c5225985b2429aa562c39c76> .
_:N3d5f4811d66d4361867f17d68fb79395 <http://schema.org/answer> "0" <http://groq.org/b980257c9507fee09b9ee62dc93754336c989a38c5225985b2429aa562c39c76> .
_:N3d5f4811d66d4361867f17d68fb79395 <http://schema.org/explain> "The lecture covers some related topics but lacks core KU content like functional dependency theory and normalization." <http://groq.org/b980257c9507fee09b9ee62dc93754336c989a38c5225985b2429aa562c39c76> .
_:N3d5f4811d66d4361867f17d68fb79395 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b980257c9507fee09b9ee62dc93754336c989a38c5225985b2429aa562c39c76> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Architecture des ordinateurs Objectif: (résultats d'apprentissage)\nl'implémentation des éléments logiques de base (mux/demux, registres, ...);\n• connaître les principes de la programmation dans un langage d'assemblage et savoir traduire les\nappels de fonctions et de procédures en respectant les conventions dictées par l'environnement;\n• savoir mettre en oeuvre un processeur monocycle simple en définissant les chemins de données\nde son jeu d'instructions;\n• connaître les principes sous-tendant les processeurs multicycles et les architectures pipelinées\n• connaître la notion de cache mémoire et ses différentes implémentations, et en connaître les\nimpacts sur les algorithmes. Course content: données et de\ncontrôle).\n* Les mémoires: communication par bus, principe de localité, cache, virtualisation\n* Multiprocesseurs, multicœurs et GPU [optionnel, en fonction du temps disponible] Course name: http://example.org/course/UE_X31I050</page1>\n        <page2>Pages:103-104 HOURS CS Core = 1 KA Core = 2 AR-Assembly: Assembly Level\nMachine Organization CS Core: 1\\. von Neumann machine architecture 2\\. Control\nunit: instruction fetch, decode, and execution (See also: OS-Principles) 3\\.\nIntroduction to SIMD vs MIMD and the Flynn taxonomy (See also: PDC-Programs,\nOS-Scheduling, OS-Process) 104 4\\. Shared memory multiprocessors/multicore\norganization (See also: PDC-Programs, OS-Scheduling) KA Core: 5\\. Instruction\nset architecture (ISA) (e.g., x86, ARM and RISC-V) a. Fixed vs variable-width\ninstruction sets b. Instruction formats c. Data manipulation, control, I/O d.\nAddressing modes e. Machine language programming f. Assembly language\nprogramming 6\\. Subroutine call and return mechanisms (See also: FPL-\nTranslation, OS-Principles) 7\\. I/O and interrupts (See also: OS-Principles)\n8\\. Heap, static, stack, and code segments (See also: FPL-Translation, OS-\nProcess) Illustrative Learning Outcomes: CS Core: 1\\. Discuss how the\nclassical von Neumann functional units are implemented in embedded systems,\nparticularly on-chip and off-chip memory. 2\\. Describe how instructions are\nexecuted in a classical von Neumann machine, with extensions for threads,\nmultiprocessor synchronization, and SIMD execution. 3\\. Assess an example\ndiagram with instruction-level parallelism and hazards to describe how they\nare managed in typical processor pipelines. KA Core: 4\\. Discuss how\ninstructions are represented at the machine level and in the context of a\nsymbolic assembler. 5\\. Map an example of high-level language patterns into\nassembly/machine language notations. 6\\. Contrast different instruction\nformats considering aspects such as addresses per instruction and variable-\nlength vs fixed-length formats. 7\\. Analyze a subroutine diagram to comment on\nhow subroutine calls are handled at the assembly level. 8\\. Describe basic\nconcepts of interrupts and I/O operations. 9\\. Write a simple assembly\nlanguage program for string/array processing and manipulation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1dee60be378d23106b3fe1fb8f4fb8269f9ae8f40847b0a8b945a974492cea02> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I050" <http://groq.org/1dee60be378d23106b3fe1fb8f4fb8269f9ae8f40847b0a8b945a974492cea02> .
_:Ndf5f27ab1d75459db5f51343ac95a9e3 <http://schema.org/answer> "1" <http://groq.org/1dee60be378d23106b3fe1fb8f4fb8269f9ae8f40847b0a8b945a974492cea02> .
_:Ndf5f27ab1d75459db5f51343ac95a9e3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1dee60be378d23106b3fe1fb8f4fb8269f9ae8f40847b0a8b945a974492cea02> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/1dee60be378d23106b3fe1fb8f4fb8269f9ae8f40847b0a8b945a974492cea02> .
<http://example.org/course/UE_X31I050> <http://example.org/has_schema_type> _:Ndf5f27ab1d75459db5f51343ac95a9e3 <http://groq.org/1dee60be378d23106b3fe1fb8f4fb8269f9ae8f40847b0a8b945a974492cea02> .
_:Ndf5f27ab1d75459db5f51343ac95a9e3 <http://schema.org/explain> "The lecture covers most KU topics but lacks depth in Flynn taxonomy and detailed ISA comparisons." <http://groq.org/1dee60be378d23106b3fe1fb8f4fb8269f9ae8f40847b0a8b945a974492cea02> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/3d6f06f23e20fd78a37d08a2a7739b3845b4f623a2633b1cb229a40c6310fc10> .
_:N58b4bd4dc3904a1fb08ec6ab78545c65 <http://schema.org/explain> "The lecture covers tree traversal, graph theory, algorithm complexity, and data structure selection, which are central to the KU's focus on algorithms and their efficiency." <http://groq.org/3d6f06f23e20fd78a37d08a2a7739b3845b4f623a2633b1cb229a40c6310fc10> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/3d6f06f23e20fd78a37d08a2a7739b3845b4f623a2633b1cb229a40c6310fc10> .
_:N58b4bd4dc3904a1fb08ec6ab78545c65 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/3d6f06f23e20fd78a37d08a2a7739b3845b4f623a2633b1cb229a40c6310fc10> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:N58b4bd4dc3904a1fb08ec6ab78545c65 <http://groq.org/3d6f06f23e20fd78a37d08a2a7739b3845b4f623a2633b1cb229a40c6310fc10> .
_:N58b4bd4dc3904a1fb08ec6ab78545c65 <http://schema.org/answer> "1" <http://groq.org/3d6f06f23e20fd78a37d08a2a7739b3845b4f623a2633b1cb229a40c6310fc10> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,\nAL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.\nSome common algorithms (e.g., sorting, searching, tree traversal, graph\ntraversal) 3\\. Impact of algorithms on time-space efficiency of programs\nIllustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms\nfor writing programs. 2\\. Demonstrate how a problem may be solved by different\nalgorithms, each with different properties. 3\\. Explain some common algorithms\n(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the\nimpact on space/time performance of some algorithms.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/3d6f06f23e20fd78a37d08a2a7739b3845b4f623a2633b1cb229a40c6310fc10> .
_:Na8133c95a2974cdeb2e8f5079dab5dd8 <http://example.org/has_score> "0.6385061"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
_:Nf012dda79e154e0eabd0c4f10090597c <http://example.org/has_chunk> ". Techniques for learning and mastering a platform-specific programming language \n \nIllustrative Learning Outcomes: \nCS Core: \n1. List the constraints of mobile programming. \n2. List the characteristics of scripting languages. \n3. Describe the three-tier model of web programming.  \n4. Describe how the state is maintained in web programming." <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/is_aligned_with> _:Na8133c95a2974cdeb2e8f5079dab5dd8 <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/is_aligned_with> _:Nc2c9973900834a9e9c4c6a41e7e8e000 <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
_:Nc2c9973900834a9e9c4c6a41e7e8e000 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
_:Nc2c9973900834a9e9c4c6a41e7e8e000 <http://example.org/has_score> "0.62958026"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/is_aligned_with> _:Nf012dda79e154e0eabd0c4f10090597c <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
_:Na8133c95a2974cdeb2e8f5079dab5dd8 <http://example.org/has_chunk> "Pages: TBD\nHOURS\n    CS Core = TBD\n    KA Core = TBD\n\nSE-Formal Methods: Core Concepts\nCS Core:\n1. Placeholder topic 1\n2. Placeholder topic 2\n3. Placeholder topic 3\n\nKA Core:\n4. Placeholder advanced topic 1\n5. Placeholder advanced topic 2\n\nIllustrative Learning Outcomes:\n1. Explain key concepts of SE-Formal Methods.\n2. Apply principles in practical scenarios.\n3. Analyze the importance of this topic in computing." <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
<http://example.org/faiss> <http://example.org/input> "Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200" <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
_:Nf012dda79e154e0eabd0c4f10090597c <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
_:Nf012dda79e154e0eabd0c4f10090597c <http://example.org/has_score> "0.6470485"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
_:Nc2c9973900834a9e9c4c6a41e7e8e000 <http://example.org/has_chunk> "Illustrative Learning Outcomes:\n1. Explain the graphics rendering pipeline.\n2. Differentiate between rasterization and ray tracing.\n3. Apply transformations to 2D and 3D models." <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
_:Na8133c95a2974cdeb2e8f5079dab5dd8 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> <http://faiss.org/23f4c6ab4a3eb509cd91499709067dbafaa1cf71e3b6eb22b942a2d777649db9> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Architecture des ordinateurs Objectif: (résultats d'apprentissage)\nl'implémentation des éléments logiques de base (mux/demux, registres, ...);\n• connaître les principes de la programmation dans un langage d'assemblage et savoir traduire les\nappels de fonctions et de procédures en respectant les conventions dictées par l'environnement;\n• savoir mettre en oeuvre un processeur monocycle simple en définissant les chemins de données\nde son jeu d'instructions;\n• connaître les principes sous-tendant les processeurs multicycles et les architectures pipelinées\n• connaître la notion de cache mémoire et ses différentes implémentations, et en connaître les\nimpacts sur les algorithmes. Course content: données et de\ncontrôle).\n* Les mémoires: communication par bus, principe de localité, cache, virtualisation\n* Multiprocesseurs, multicœurs et GPU [optionnel, en fonction du temps disponible] Course name: http://example.org/course/UE_X31I050</page1>\n        <page2>Pages:103-104 HOURS CS Core = 1 KA Core = 2 AR-Assembly: Assembly Level\nMachine Organization CS Core: 1\\. von Neumann machine architecture 2\\. Control\nunit: instruction fetch, decode, and execution (See also: OS-Principles) 3\\.\nIntroduction to SIMD vs MIMD and the Flynn taxonomy (See also: PDC-Programs,\nOS-Scheduling, OS-Process) 104 4\\. Shared memory multiprocessors/multicore\norganization (See also: PDC-Programs, OS-Scheduling) KA Core: 5\\. Instruction\nset architecture (ISA) (e.g., x86, ARM and RISC-V) a. Fixed vs variable-width\ninstruction sets b. Instruction formats c. Data manipulation, control, I/O d.\nAddressing modes e. Machine language programming f. Assembly language\nprogramming 6\\. Subroutine call and return mechanisms (See also: FPL-\nTranslation, OS-Principles) 7\\. I/O and interrupts (See also: OS-Principles)\n8\\. Heap, static, stack, and code segments (See also: FPL-Translation, OS-\nProcess) Illustrative Learning Outcomes: CS Core: 1\\. Discuss how the\nclassical von Neumann functional units are implemented in embedded systems,\nparticularly on-chip and off-chip memory. 2\\. Describe how instructions are\nexecuted in a classical von Neumann machine, with extensions for threads,\nmultiprocessor synchronization, and SIMD execution. 3\\. Assess an example\ndiagram with instruction-level parallelism and hazards to describe how they\nare managed in typical processor pipelines. KA Core: 4\\. Discuss how\ninstructions are represented at the machine level and in the context of a\nsymbolic assembler. 5\\. Map an example of high-level language patterns into\nassembly/machine language notations. 6\\. Contrast different instruction\nformats considering aspects such as addresses per instruction and variable-\nlength vs fixed-length formats. 7\\. Analyze a subroutine diagram to comment on\nhow subroutine calls are handled at the assembly level. 8\\. Describe basic\nconcepts of interrupts and I/O operations. 9\\. Write a simple assembly\nlanguage program for string/array processing and manipulation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/0f365d328c073bbbe52ce075b9bb34c5f0f650ce4791da1a4d75a874ea4318a1> .
_:N991128de1d6b4febbbcac2f84d2f2800 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/0f365d328c073bbbe52ce075b9bb34c5f0f650ce4791da1a4d75a874ea4318a1> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I050" <http://groq.org/0f365d328c073bbbe52ce075b9bb34c5f0f650ce4791da1a4d75a874ea4318a1> .
_:N991128de1d6b4febbbcac2f84d2f2800 <http://schema.org/answer> "1" <http://groq.org/0f365d328c073bbbe52ce075b9bb34c5f0f650ce4791da1a4d75a874ea4318a1> .
<http://example.org/course/UE_X31I050> <http://example.org/has_schema_type> _:N991128de1d6b4febbbcac2f84d2f2800 <http://groq.org/0f365d328c073bbbe52ce075b9bb34c5f0f650ce4791da1a4d75a874ea4318a1> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/0f365d328c073bbbe52ce075b9bb34c5f0f650ce4791da1a4d75a874ea4318a1> .
_:N991128de1d6b4febbbcac2f84d2f2800 <http://schema.org/explain> "Covers ISA, assembly, processor architectures, and memory/cache, aligning with KA/CS Core topics." <http://groq.org/0f365d328c073bbbe52ce075b9bb34c5f0f650ce4791da1a4d75a874ea4318a1> .
_:N033b4f37d65b40d4b0fe098dc10d4acd <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
<http://example.org/faiss> <http://example.org/input> "Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010" <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N58df6b037ae64de485594d18896f7eed <http://example.org/has_chunk> ".\n8. Explain examples of classic uncomputable problems.\n9. Explain the Church-Turing Thesis and its significance for algorithmic computation.\n10. Explain how (loop) invariants can be used to prove the correctness of an algorithm.\nIllustrative Learning Outcomes:\nKA Core:\n11. For each formal automaton in this unit explain (compare/contrast) its deterministic and\nnondeterministic capabilities.\n12. Apply pumping lemmas, or alternative means, to prove the limitations of Finite State and Pushdown\nautomata.\n13" <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
<http://example.org/course/UE_X31I010> <http://example.org/is_aligned_with> _:N58df6b037ae64de485594d18896f7eed <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N033b4f37d65b40d4b0fe098dc10d4acd <http://example.org/has_score> "0.7138155"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N3ed74c5bb13047a592f28298a3ddc24c <http://example.org/has_score> "0.70884264"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N3ed74c5bb13047a592f28298a3ddc24c <http://example.org/has_chunk> "Illustrative Learning Outcomes: \nCS Core: \n1. Explain the role of algorithms for writing programs.  \n2. Demonstrate how a problem may be solved by different algorithms, each with different properties. \n3. Explain some common algorithms (e.g., sorting, searching, tree traversal, graph traversal). \n4. Explain the impact on space/time performance of some algorithms." <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N3ed74c5bb13047a592f28298a3ddc24c <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Algorithms.txt> <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N033b4f37d65b40d4b0fe098dc10d4acd <http://example.org/has_chunk> ". (See also: AI-LRR)\n13. Integration with other programming paradigms such as object-oriented programming.\n14. Advance programming constructs such as difference-lists, creating user defined data structures, set\nof, etc.\nIllustrative learning outcomes:\nKA Core:\n1. Use a logic language to implement a conventional algorithm.\n2. Use a logic language to implement an algorithm employing implicit search using clauses, relations,\nand cuts.\n3" <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
<http://example.org/course/UE_X31I010> <http://example.org/is_aligned_with> _:N033b4f37d65b40d4b0fe098dc10d4acd <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
<http://example.org/course/UE_X31I010> <http://example.org/is_aligned_with> _:N3ed74c5bb13047a592f28298a3ddc24c <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N58df6b037ae64de485594d18896f7eed <http://example.org/has_score> "0.6867994"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N58df6b037ae64de485594d18896f7eed <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Algorithmic_Foundations_AL/AL-Models_Computational_Models_and_Formal_Languages.txt> <http://faiss.org/aa75bad178856f4d708f4094dd97e62ed413ef2e66b1b087be4fc08c1a54f95f> .
_:N1879dbe9ba1242b0a95294ee61ece57f <http://schema.org/explain> "The lecture focuses on teaching methods and educational objectives, not the technical shell scripting content described in the KU." <http://groq.org/2dd0620febce94ec3c897cc8752c944b69204494bb70f0192a1682d3e0f402c3> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/2dd0620febce94ec3c897cc8752c944b69204494bb70f0192a1682d3e0f402c3> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:N1879dbe9ba1242b0a95294ee61ece57f <http://groq.org/2dd0620febce94ec3c897cc8752c944b69204494bb70f0192a1682d3e0f402c3> .
_:N1879dbe9ba1242b0a95294ee61ece57f <http://schema.org/answer> "0" <http://groq.org/2dd0620febce94ec3c897cc8752c944b69204494bb70f0192a1682d3e0f402c3> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS\nCore: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-\nOverview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface\nwith operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment\nvariables (See also: SF-Overview) 5\\. File abstraction and operators (See\nalso: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as\narrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-\nStructures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and\nprocesses (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:\nCS Core: 1\\. Create and execute automated scripts to manage various system\ntasks. 2\\. Solve various text processing problems through scripting.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/2dd0620febce94ec3c897cc8752c944b69204494bb70f0192a1682d3e0f402c3> .
_:N1879dbe9ba1242b0a95294ee61ece57f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/2dd0620febce94ec3c897cc8752c944b69204494bb70f0192a1682d3e0f402c3> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/2dd0620febce94ec3c897cc8752c944b69204494bb70f0192a1682d3e0f402c3> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/0b37d36c653b458f8363d58556519695f5ef26929868e3012d3909d9c5d8e14e> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/0b37d36c653b458f8363d58556519695f5ef26929868e3012d3909d9c5d8e14e> .
_:N823fd0a758004402b8d1339425074764 <http://schema.org/answer> "1" <http://groq.org/0b37d36c653b458f8363d58556519695f5ef26929868e3012d3909d9c5d8e14e> .
_:N823fd0a758004402b8d1339425074764 <http://schema.org/explain> "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." <http://groq.org/0b37d36c653b458f8363d58556519695f5ef26929868e3012d3909d9c5d8e14e> .
_:N823fd0a758004402b8d1339425074764 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/0b37d36c653b458f8363d58556519695f5ef26929868e3012d3909d9c5d8e14e> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:N823fd0a758004402b8d1339425074764 <http://groq.org/0b37d36c653b458f8363d58556519695f5ef26929868e3012d3909d9c5d8e14e> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/0b37d36c653b458f8363d58556519695f5ef26929868e3012d3909d9c5d8e14e> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/768674ad7157c106424d0027df292d78918fa66b512d24f3d0c77e2d31cc273e> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:Nee64157ba0ca47e1b1212c984a13082f <http://groq.org/768674ad7157c106424d0027df292d78918fa66b512d24f3d0c77e2d31cc273e> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages: 146-147 HOURS CS Core = 0 KA Core = 0 FPL-Design: Design Principles of\nProgramming Languages Non-core: 1\\. Language design principles a. Simplicity\nb. Security (See also: SEC-Coding) c. Fast translation d. Efficient object\ncode e. Orthogonality f. Readability g. Completeness h. Implementation\nstrategies 2\\. Designing a language to fit a specific domain or problem 3\\.\nInteroperability between programming languages 4\\. Language portability 5\\.\nFormal description of a programming language 6\\. Green computing principles\n(See also: SEP-Sustainability) Illustrative Learning Outcomes: Non-core: 1\\.\nUnderstand what constitutes good language design and apply that knowledge to\nevaluate a real programming language.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/768674ad7157c106424d0027df292d78918fa66b512d24f3d0c77e2d31cc273e> .
_:Nee64157ba0ca47e1b1212c984a13082f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/768674ad7157c106424d0027df292d78918fa66b512d24f3d0c77e2d31cc273e> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/768674ad7157c106424d0027df292d78918fa66b512d24f3d0c77e2d31cc273e> .
_:Nee64157ba0ca47e1b1212c984a13082f <http://schema.org/explain> "No overlap; lecture focuses on scientific English communication skills, while KU addresses programming language design principles." <http://groq.org/768674ad7157c106424d0027df292d78918fa66b512d24f3d0c77e2d31cc273e> .
_:Nee64157ba0ca47e1b1212c984a13082f <http://schema.org/answer> "0" <http://groq.org/768674ad7157c106424d0027df292d78918fa66b512d24f3d0c77e2d31cc273e> .
<http://example.org/course/UE_X31I040> <http://example.org/has_schema_type> _:N0c654c2201554c37803303b89d723657 <http://groq.org/0d0eb28276af0fa46615c5d4f6b3b8abe3f7817eacd0c6abafc539512e5e81ae> .
_:N0c654c2201554c37803303b89d723657 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/0d0eb28276af0fa46615c5d4f6b3b8abe3f7817eacd0c6abafc539512e5e81ae> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Réseaux et Télécoms Objectif: (résultats d'apprentissage)\n• Comprendre les mécanismes de base des protocoles de l’Internet (http, tcp, ip, arp);\n• Connaître les défis techniques et sociétaux liés aux déploiements des réseaux; Course content: de l'UE : Internet : comment ça marche.\n• Introduction : les chiffres de l'Internet, histoire et perspectives.\n• Les protocoles applicatifs (http, smtp, dns, ...)\n• Le problème du transport fiable de bout en bout. TCP.\n• Le problème du contrôle de flux et congestion. TCP. Course name: http://example.org/course/UE_X31I040</page1>\n        <page2>Pages: 199 HOURS CS Core = 3.5 + 0.25 (SEP) + 0.25 (PDC) KA Core = . NC-\nApplications: Networked Applications CS Core: 1\\. Naming and address schemes\n(e.g., DNS, and Uniform Resource Identifiers) 2\\. Distributed application\nparadigms (e.g., client/server, peer-to-peer, cloud, edge, and fog) (See also:\nPDC-Communication, PDC-Coordination) 3\\. Diversity of networked application\ndemands (e.g., latency, bandwidth, and loss tolerance) (See also: PDC-\nCommunication, SEP-Sustainability, SEP-Context) 4\\. Coverage of application-\nlayer protocols (e.g., HTTP) 5\\. Interactions with TCP, UDP, and Socket APIs\n(See also: PDC-Programs) Illustrative Learning Outcomes: CS Core: 1\\. Define\nthe principles of naming, addressing, resource location. 2\\. Analyze the needs\nof specific networked application demands. 3\\. Describe the details of one\napplication layer protocol. 4\\. Implement a simple client-server socket-based\napplication.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/0d0eb28276af0fa46615c5d4f6b3b8abe3f7817eacd0c6abafc539512e5e81ae> .
_:N0c654c2201554c37803303b89d723657 <http://schema.org/explain> "The lecture covers some aspects like HTTP and TCP, but misses key areas such as distributed paradigms and socket implementation." <http://groq.org/0d0eb28276af0fa46615c5d4f6b3b8abe3f7817eacd0c6abafc539512e5e81ae> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/0d0eb28276af0fa46615c5d4f6b3b8abe3f7817eacd0c6abafc539512e5e81ae> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I040" <http://groq.org/0d0eb28276af0fa46615c5d4f6b3b8abe3f7817eacd0c6abafc539512e5e81ae> .
_:N0c654c2201554c37803303b89d723657 <http://schema.org/answer> "0" <http://groq.org/0d0eb28276af0fa46615c5d4f6b3b8abe3f7817eacd0c6abafc539512e5e81ae> .
_:N0fbabef450034cdc94c4b7e484b2ab4f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b414e72b39c3391abf4882afccc6c33ce6f78a7b305cc699f6f8e231298811d4> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:N0fbabef450034cdc94c4b7e484b2ab4f <http://groq.org/b414e72b39c3391abf4882afccc6c33ce6f78a7b305cc699f6f8e231298811d4> .
_:N0fbabef450034cdc94c4b7e484b2ab4f <http://schema.org/answer> "0" <http://groq.org/b414e72b39c3391abf4882afccc6c33ce6f78a7b305cc699f6f8e231298811d4> .
_:N0fbabef450034cdc94c4b7e484b2ab4f <http://schema.org/explain> "The lecture covers some related topics like unification and recursive functions, but misses several key KU areas such as quantifiers, Horn clauses, and logic programming constructs." <http://groq.org/b414e72b39c3391abf4882afccc6c33ce6f78a7b305cc699f6f8e231298811d4> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/b414e72b39c3391abf4882afccc6c33ce6f78a7b305cc699f6f8e231298811d4> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/b414e72b39c3391abf4882afccc6c33ce6f78a7b305cc699f6f8e231298811d4> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b414e72b39c3391abf4882afccc6c33ce6f78a7b305cc699f6f8e231298811d4> .
<http://example.org/course/UE_X32I040> <http://example.org/has_schema_type> _:N5feeb3e51f164de08b9fa7a73c3998cb <http://groq.org/48fe81d80d525040430d121c7934b329cb394bc64b242fbd12180cdc4dcd7ef2> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Bases de données 2 Objectif: (résultats d'apprentissage) • Savoir déterminer des contraintes d’intégrité\n• Savoir appliquer un contrôle d’accès basique à une base de données\n• Comprendre la notion de vue\n• Connaître la structuration physique des données\n• Comprendre la notion de transaction\n• Comprendre la notion d’ordonnancement sérialisable\n• Comprendre la technique de contrôle de concurrence par verrouillage\n• Comprendre les fonctions d’un optimiseur de requêtes\n• Comprendre un plan d’exécution d’une requête\n• Connaître les structures accélératrices d’accès aux données (indexes) Course content: Extension procédurale de SQL (PL/SQL) , BD actives (Déclencheurs) Interrogation d'une base avec Course name: http://example.org/course/UE_X32I040</page1>\n        <page2>Pages: 118 HOURS CS Core = 2 KA Core = 4 DM-Querying: Query Construction CS\nCore: 1\\. SQL Query Formation a. Interactive SQL execution b. Programmatic\nexecution of an SQL query KA Core: 2\\. Relational Algebra 3\\. SQL a. Data\ndefinition including integrity and other constraint specifications b. Update\nsublanguage Non-core: 4\\. Relational Calculus 5\\. QBE and 4th-generation\nenvironments 6\\. Different ways to invoke non-procedural queries in\nconventional languages 7\\. Introduction to other major query languages (e.g.,\nXPATH, SPARQL) 8\\. Stored procedures Illustrative Learning Outcomes: CS Core:\n1\\. Compose SQL queries that incorporate select, project, join, union,\nintersection, set difference, and set division. 2\\. Determine when a nested\nSQL query is correlated or not. 3\\. Iterate over data retrieved\nprogrammatically from a database via an SQL query. KA Core: 4\\. Define, in\nSQL, a relation schema, including all integrity constraints and delete/update\ntriggers. 5\\. Compose an SQL query to update a tuple in a relation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/48fe81d80d525040430d121c7934b329cb394bc64b242fbd12180cdc4dcd7ef2> .
_:N5feeb3e51f164de08b9fa7a73c3998cb <http://schema.org/answer> "0" <http://groq.org/48fe81d80d525040430d121c7934b329cb394bc64b242fbd12180cdc4dcd7ef2> .
_:N5feeb3e51f164de08b9fa7a73c3998cb <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/48fe81d80d525040430d121c7934b329cb394bc64b242fbd12180cdc4dcd7ef2> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I040" <http://groq.org/48fe81d80d525040430d121c7934b329cb394bc64b242fbd12180cdc4dcd7ef2> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/48fe81d80d525040430d121c7934b329cb394bc64b242fbd12180cdc4dcd7ef2> .
_:N5feeb3e51f164de08b9fa7a73c3998cb <http://schema.org/explain> "The lecture covers some related topics but lacks substantial coverage of the KU's core elements." <http://groq.org/48fe81d80d525040430d121c7934b329cb394bc64b242fbd12180cdc4dcd7ef2> .
_:N28c0d2f5e493458aaa156ed88000c758 <http://schema.org/answer> "0" <http://groq.org/1499685b6352b742f3e58bd162af2a707d375989890a6bb21e65dd4e12b86796> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/1499685b6352b742f3e58bd162af2a707d375989890a6bb21e65dd4e12b86796> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/1499685b6352b742f3e58bd162af2a707d375989890a6bb21e65dd4e12b86796> .
_:N28c0d2f5e493458aaa156ed88000c758 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1499685b6352b742f3e58bd162af2a707d375989890a6bb21e65dd4e12b86796> .
_:N28c0d2f5e493458aaa156ed88000c758 <http://schema.org/explain> "The lecture does not cover the detailed technical aspects of development platforms, programming languages, and constraints outlined in the KU." <http://groq.org/1499685b6352b742f3e58bd162af2a707d375989890a6bb21e65dd4e12b86796> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1499685b6352b742f3e58bd162af2a707d375989890a6bb21e65dd4e12b86796> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:N28c0d2f5e493458aaa156ed88000c758 <http://groq.org/1499685b6352b742f3e58bd162af2a707d375989890a6bb21e65dd4e12b86796> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/49d8481c33526be08ec8534db2f144cd87c4f3c8878679f17e0de7b0232bb767> .
_:Nfe36651243cd4b1e8636d1c3e901617e <http://schema.org/answer> "0" <http://groq.org/49d8481c33526be08ec8534db2f144cd87c4f3c8878679f17e0de7b0232bb767> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:Nfe36651243cd4b1e8636d1c3e901617e <http://groq.org/49d8481c33526be08ec8534db2f144cd87c4f3c8878679f17e0de7b0232bb767> .
_:Nfe36651243cd4b1e8636d1c3e901617e <http://schema.org/explain> "The lecture does not cover the specific logic programming topics outlined in the KU." <http://groq.org/49d8481c33526be08ec8534db2f144cd87c4f3c8878679f17e0de7b0232bb767> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/49d8481c33526be08ec8534db2f144cd87c4f3c8878679f17e0de7b0232bb767> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/49d8481c33526be08ec8534db2f144cd87c4f3c8878679f17e0de7b0232bb767> .
_:Nfe36651243cd4b1e8636d1c3e901617e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/49d8481c33526be08ec8534db2f144cd87c4f3c8878679f17e0de7b0232bb767> .
_:N2602a6d0d45d4438b48ce043edbe5f72 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/cb03c8a40cbe3fb3d7260471adb7ace457444a74b01bcac8625fa82c67f88693> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/cb03c8a40cbe3fb3d7260471adb7ace457444a74b01bcac8625fa82c67f88693> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages: 147 HOURS CS Core = SEP hours KA Core = SEP hours FPL-SEP: Society,\nEthics, and the Profession Non-core: 1\\. Impact of English-centric programming\nlanguages 2\\. Enhancing accessibility and inclusivity for people with\ndisabilities - Supporting assistive technologies 3\\. Human factors related to\nprogramming languages and usability a. Impact of syntax on accessibility b.\nSupporting cultural differences (e.g., currency, decimals, dates) c.\nNeurodiversity 4\\. Etymology of terms such as \"class,\" \"master,\" and \"slave\"\nin programming languages 5\\. Increasing accessibility by supporting multiple\nlanguages within applications (UTF) Illustrative learning outcomes: Non-core:\n1\\. Consciously design programming languages to be inclusive and non-\noffensive.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/cb03c8a40cbe3fb3d7260471adb7ace457444a74b01bcac8625fa82c67f88693> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/cb03c8a40cbe3fb3d7260471adb7ace457444a74b01bcac8625fa82c67f88693> .
_:N2602a6d0d45d4438b48ce043edbe5f72 <http://schema.org/explain> "The lecture focuses on English communication skills for scientists, while the KU covers programming language design and inclusivity, with no direct overlap." <http://groq.org/cb03c8a40cbe3fb3d7260471adb7ace457444a74b01bcac8625fa82c67f88693> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:N2602a6d0d45d4438b48ce043edbe5f72 <http://groq.org/cb03c8a40cbe3fb3d7260471adb7ace457444a74b01bcac8625fa82c67f88693> .
_:N2602a6d0d45d4438b48ce043edbe5f72 <http://schema.org/answer> "0" <http://groq.org/cb03c8a40cbe3fb3d7260471adb7ace457444a74b01bcac8625fa82c67f88693> .
_:N2a52e4b1777748fa8d832c1dbb614eba <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/60e5265a0ef46504a5396dbbffbaec66e6f068a6efce18fe9700af353dd9a818> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/60e5265a0ef46504a5396dbbffbaec66e6f068a6efce18fe9700af353dd9a818> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages : 171 CS Core : None, KA Core : None (Hours here are included in\nSociety, Ethics and the Profession Area) CS Core: 1\\. Intellectual property\nrights of programmers for programs they develop. 2\\. Plagiarism and academic\nintegrity. 3\\. Responsibility and liability of programmers regarding code they\ndevelop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work\nethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.\nExplain/understand some of the intellectual property issues relating to\nprograms. 2\\. Explain/understand when code developed by others can be used and\nproper ways of disclosing their use. 3\\. Explain/understand the responsibility\nof programmers when developing code for an overall solution (which may be\ndeveloped by a team). 4\\. Explain/understand one or more codes of conduct\napplicable to programmers.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/60e5265a0ef46504a5396dbbffbaec66e6f068a6efce18fe9700af353dd9a818> .
_:N2a52e4b1777748fa8d832c1dbb614eba <http://schema.org/answer> "0" <http://groq.org/60e5265a0ef46504a5396dbbffbaec66e6f068a6efce18fe9700af353dd9a818> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/60e5265a0ef46504a5396dbbffbaec66e6f068a6efce18fe9700af353dd9a818> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:N2a52e4b1777748fa8d832c1dbb614eba <http://groq.org/60e5265a0ef46504a5396dbbffbaec66e6f068a6efce18fe9700af353dd9a818> .
_:N2a52e4b1777748fa8d832c1dbb614eba <http://schema.org/explain> "The lecture focuses on professional integration and general ethics but does not cover intellectual property, plagiarism, or specific programmer responsibilities as outlined in the KU." <http://groq.org/60e5265a0ef46504a5396dbbffbaec66e6f068a6efce18fe9700af353dd9a818> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/74aa009472a17bab3b889f5e388634620a7d747bd5c6f27d0b359718d74de3d4> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/74aa009472a17bab3b889f5e388634620a7d747bd5c6f27d0b359718d74de3d4> .
_:N8f5f121200e7405c8455dee4138fb8ea <http://schema.org/answer> "0" <http://groq.org/74aa009472a17bab3b889f5e388634620a7d747bd5c6f27d0b359718d74de3d4> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/74aa009472a17bab3b889f5e388634620a7d747bd5c6f27d0b359718d74de3d4> .
_:N8f5f121200e7405c8455dee4138fb8ea <http://schema.org/explain> "Lecture focuses on teaching methods/learning objectives, not SE-Formal Methods content." <http://groq.org/74aa009472a17bab3b889f5e388634620a7d747bd5c6f27d0b359718d74de3d4> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:N8f5f121200e7405c8455dee4138fb8ea <http://groq.org/74aa009472a17bab3b889f5e388634620a7d747bd5c6f27d0b359718d74de3d4> .
_:N8f5f121200e7405c8455dee4138fb8ea <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/74aa009472a17bab3b889f5e388634620a7d747bd5c6f27d0b359718d74de3d4> .
_:N45a5eacc9192404ab0a0fddac62d9008 <http://example.org/has_chunk> ". Techniques for learning and mastering a platform-specific programming language \n \nIllustrative Learning Outcomes: \nCS Core: \n1. List the constraints of mobile programming. \n2. List the characteristics of scripting languages. \n3. Describe the three-tier model of web programming.  \n4. Describe how the state is maintained in web programming." <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N45a5eacc9192404ab0a0fddac62d9008 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N30918d9533dc4b998d5e4c3f21446272 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/is_aligned_with> _:N30918d9533dc4b998d5e4c3f21446272 <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/is_aligned_with> _:N23045b98eecc4ec0938a0254e35cd210 <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N45a5eacc9192404ab0a0fddac62d9008 <http://example.org/has_score> "0.6453911"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N30918d9533dc4b998d5e4c3f21446272 <http://example.org/has_chunk> ". Regular expressions (See also: AL-Models)\n8. Programs and processes (See also: OS-Process)\n9. Workflow\nIllustrative learning outcomes:\nCS Core:\n1. Create and execute automated scripts to manage various system tasks.\n2. Solve various text processing problems through scripting." <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N23045b98eecc4ec0938a0254e35cd210 <http://example.org/has_chunk> "Pages: TBD\nHOURS\n    CS Core = TBD\n    KA Core = TBD\n\nSE-Formal Methods: Core Concepts\nCS Core:\n1. Placeholder topic 1\n2. Placeholder topic 2\n3. Placeholder topic 3\n\nKA Core:\n4. Placeholder advanced topic 1\n5. Placeholder advanced topic 2\n\nIllustrative Learning Outcomes:\n1. Explain key concepts of SE-Formal Methods.\n2. Apply principles in practical scenarios.\n3. Analyze the importance of this topic in computing." <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N23045b98eecc4ec0938a0254e35cd210 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N30918d9533dc4b998d5e4c3f21446272 <http://example.org/has_score> "0.62935567"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
<http://example.org/faiss> <http://example.org/input> "Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200" <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N23045b98eecc4ec0938a0254e35cd210 <http://example.org/has_score> "0.6374133"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/is_aligned_with> _:N45a5eacc9192404ab0a0fddac62d9008 <http://faiss.org/0b555a167bcae2f25349248a9624eca7345c810ac33401e59761299d811631b3> .
_:N41cae3d6be07434cba7e43d7b6edce62 <http://schema.org/explain> "Lecture focuses on teaching methods, not technical platform constraints or programming languages." <http://groq.org/3269a38614e69646104d67c26432970e6b88c87b9f9ac8de5fa3f555da978317> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/3269a38614e69646104d67c26432970e6b88c87b9f9ac8de5fa3f555da978317> .
_:N41cae3d6be07434cba7e43d7b6edce62 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/3269a38614e69646104d67c26432970e6b88c87b9f9ac8de5fa3f555da978317> .
_:N41cae3d6be07434cba7e43d7b6edce62 <http://schema.org/answer> "0" <http://groq.org/3269a38614e69646104d67c26432970e6b88c87b9f9ac8de5fa3f555da978317> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:N41cae3d6be07434cba7e43d7b6edce62 <http://groq.org/3269a38614e69646104d67c26432970e6b88c87b9f9ac8de5fa3f555da978317> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/3269a38614e69646104d67c26432970e6b88c87b9f9ac8de5fa3f555da978317> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/3269a38614e69646104d67c26432970e6b88c87b9f9ac8de5fa3f555da978317> .
_:N701e439e483f4645ba35664a11fc6aa8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/8c9b2a4e002a8a95ed1b1daeea2cb859e0a4eeb26ca8e4fd3ead673cab9113f6> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages:71-75 HOURS CS Core = 4 KA Core = 6 AI-ML: Machine Learning CS Core: 1\\.\nDefinition and examples of a broad variety of machine learning tasks a.\nSupervised learning i. Classification ii. Regression b. Reinforcement learning\nc. Unsupervised learning i. Clustering 2\\. Fundamental ideas: a. No free lunch\ntheorem: no one learner can solve all problems; representational design\ndecisions have consequences. b. Sources of error and undecidability in machine\nlearning 3\\. A simple statistical-based supervised learning such as linear\nregression or decision trees a. Focus on how they work without going into\nmathematical or optimization details; enough to understand and use existing\nimplementations correctly 4\\. The overfitting problem/controlling solution\ncomplexity (regularization, pruning - intuition only) a. The bias\n(underfitting) - variance (overfitting) tradeoff 5\\. Working with Data a. Data\npreprocessing i. Importance and pitfalls of preprocessing choices b. Handling\nmissing values (imputing, flag-as-missing) i. Implications of imputing vs\nflag-as-missing c. Encoding categorical variables, encoding real-valued data\nd. Normalization/standardization e. Emphasis on real data, not textbook\nexamples 6\\. Representations a. Hypothesis spaces and complexity b. Simple\nbasis feature expansion, such as squaring univariate features c. Learned\nfeature representations 7\\. Machine learning evaluation a. Separation of\ntrain, validation, and test sets b. Performance metrics for classifiers c.\nEstimation of test performance on held-out data d. Tuning the parameters of a\nmachine learning model with a validation set e. Importance of understanding\nwhat a model is doing, where its pitfalls/shortcomings are, and the\nimplications of its decisions 8\\. Basic neural networks a. Fundamentals of\nunderstanding how neural networks work and their training process, without\ndetails of the calculations b. Basic introduction to generative neural\nnetworks (e.g., large language models) 9\\. Ethics for Machine Learning (See\nalso: SEP-Context) a. Focus on real data, real scenarios, and case studies b.\nDataset/algorithmic/evaluation bias and unintended consequences 72 KA Core:\n10\\. Formulation of simple machine learning as an optimization problem, such\nas least squares linear regression or logistic regression a. Objective\nfunction b. Gradient descent c. Regularization to avoid overfitting\n(mathematical formulation) 11\\. Ensembles of models a. Simple weighted\nmajority combination 12\\. Deep learning a. Deep feed-forward networks\n(intuition only, no mathematics) b. Convolutional neural networks (intuition\nonly, no mathematics) c. Visualization of learned feature representations from\ndeep nets d. Other architectures (generative NN, recurrent NN, transformers,\netc.) 13\\. Performance evaluation a. Other metrics for classification (e.g.,\nerror, precision, recall) b. Performance metrics for regressors c. Confusion\nmatrix d. Cross-validation i. Parameter tuning (grid/random search, via cross-\nvalidation) 14\\. Overview of reinforcement learning methods 15\\. Two or more\napplications of machine learning algorithms a. E.g., medicine and health,\neconomics, vision, natural language, robotics, game play 16\\. Ethics for\nMachine Learning a. Continued focus on real data, real scenarios, and case\nstudies (See also: SEP-Context) b. Privacy (See also: SEP-Privacy) c. Fairness\n(See also: SEP-Privacy) d. Intellectual property e. Explainability Non-core:\n17\\. General statistical-based learning, parameter estimation (maximum\nlikelihood) 18\\. Supervised learning a. Decision trees b. Nearest-neighbor\nclassification and regression c. Learning simple neural networks / multi-layer\nperceptrons d. Linear regression e. Logistic regression f. Support vector\nmachines (SVMs) and kernels g. Gaussian Processes 19\\. Overfitting a. The\ncurse of dimensionality b. Regularization (mathematical computations, L2 and\nL1 regularization) 20\\. Experimental design 73 a. Data preparation (e.g.,\nstandardization, representation, one-hot encoding) b. Hypothesis space c.\nBiases (e.g., algorithmic, search) d. Partitioning data: stratification,\ntraining set, validation set, test set e. Parameter tuning (grid/random\nsearch, via cross-validation) f. Performance evaluation i. Cross-validation\nii. Metric: error, precision, recall, confusion matrix iii. Receiver operating\ncharacteristic (ROC) curve and area under ROC curve 21\\. Bayesian learning\n(Cross-Reference AI/Reasoning Under Uncertainty) a. Naive Bayes and its\nrelationship to linear models b. Bayesian networks c. Prior/posterior d.\nGenerative models 22\\. Deep learning a. Deep feed-forward networks b. Neural\ntangent kernel and understanding neural network training c. Convolutional\nneural networks d. Autoencoders e. Recurrent networks f. Representations and\nknowledge transfer g. Adversarial training and generative adversarial networks\nh. Attention mechanisms 23\\. Representations a. Manually crafted\nrepresentations b. Basis expansion c. Learned representations (e.g., deep\nneural networks) 24\\. Unsupervised learning and clustering a. K-means b.\nGaussian mixture models c. Expectation maximization (EM) d. Self-organizing\nmaps 25\\. Graph analysis (e.g., PageRank) 26\\. Semi-supervised learning 27\\.\nGraphical models (See also: AI-Probability) 28\\. Ensembles a. Weighted\nmajority b. Boosting/bagging c. Random forest d. Gated ensemble 29\\. Learning\ntheory a. General overview of learning theory / why learning works b. VC\ndimension c. Generalization bounds 74 30\\. Reinforcement learning a.\nExploration vs exploitation tradeoff b. Markov decision processes c. Value and\npolicy iteration d. Policy gradient methods e. Deep reinforcement learning f.\nLearning from demonstration and inverse RL 31\\. Explainable / interpretable\nmachine learning a. Understanding feature importance (e.g., LIME, Shapley\nvalues) b. Interpretable models and representations 32\\. Recommender systems\n33\\. Hardware for machine learning a. GPUs / TPUs 34\\. Application of machine\nlearning algorithms to: a. Medicine and health b. Economics c. Education d.\nVision e. Natural language f. Robotics g. Game play h. Data mining (Cross-\nreference DM/Data Analytics) 35\\. Ethics for Machine Learning a. Continued\nfocus on real data, real scenarios, and case studies (See also: SEP-Context)\nb. In depth exploration of dataset/algorithmic/evaluation bias, data privacy,\nand fairness (See also: SEP-Privacy, SEP-Context) c. Trust / explainability\nIllustrative Learning Outcomes: 1\\. Describe the differences among the three\nmain styles of learning (supervised, reinforcement, and unsupervised) and\ndetermine which is appropriate to a particular problem domain. 2\\.\nDifferentiate the terms of AI, machine learning, and deep learning. 3\\. Frame\nan application as a classification problem, including the available input\nfeatures and output to be predicted (e.g., identifying alphabetic characters\nfrom pixel grid input). 4\\. Apply two or more simple statistical learning\nalgorithms to a classification task and measure the classifiers' accuracy. 5\\.\nIdentify overfitting in the context of a problem and learning curves and\ndescribe solutions to overfitting. 6\\. Explain how machine learning works as\nan optimization/search process. 7\\. Implement a statistical learning algorithm\nand the corresponding optimization process to train the classifier and obtain\na prediction on new data. 8\\. Describe the neural network training process and\nresulting learned representations. 75 9\\. Explain proper ML evaluation\nprocedures, including the differences between training and testing\nperformance, and what can go wrong with the evaluation process leading to\ninaccurate reporting of ML performance. 10\\. Compare two machine learning\nalgorithms on a dataset, implementing the data preprocessing and evaluation\nmethodology (e.g., metrics and handling of train/test splits) from scratch.\n11\\. Visualize the training progress of a neural network through learning\ncurves in a well-established toolkit (e.g., TensorBoard) and visualize the\nlearned features of the network. 12\\. Compare and contrast several learning\ntechniques (e.g., decision trees, logistic regression, naive Bayes, neural\nnetworks, and belief networks), providing examples of when each strategy is\nsuperior. 13\\. Evaluate the performance of a simple learning system on a real-\nworld dataset. 14\\. Characterize the state of the art in learning theory,\nincluding its achievements and shortcomings. 15\\. Explain the problem of\noverfitting, along with techniques for detecting and managing the problem.\n16\\. Explain the triple tradeoff among the size of a hypothesis space, the\nsize of the training set, and performance accuracy. 17\\. Given a real-world\napplication of machine learning, describe ethical issues regarding the choices\nof data, preprocessing steps, algorithm selection, and\nvisualization/presentation of results</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/8c9b2a4e002a8a95ed1b1daeea2cb859e0a4eeb26ca8e4fd3ead673cab9113f6> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/8c9b2a4e002a8a95ed1b1daeea2cb859e0a4eeb26ca8e4fd3ead673cab9113f6> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/8c9b2a4e002a8a95ed1b1daeea2cb859e0a4eeb26ca8e4fd3ead673cab9113f6> .
_:N701e439e483f4645ba35664a11fc6aa8 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including topics such as machine learning, supervised and unsupervised learning, neural networks, and ethics. The lecture also provides practical examples and illustrations, which align with the KU's emphasis on real-world applications." <http://groq.org/8c9b2a4e002a8a95ed1b1daeea2cb859e0a4eeb26ca8e4fd3ead673cab9113f6> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:N701e439e483f4645ba35664a11fc6aa8 <http://groq.org/8c9b2a4e002a8a95ed1b1daeea2cb859e0a4eeb26ca8e4fd3ead673cab9113f6> .
_:N701e439e483f4645ba35664a11fc6aa8 <http://schema.org/answer> "1" <http://groq.org/8c9b2a4e002a8a95ed1b1daeea2cb859e0a4eeb26ca8e4fd3ead673cab9113f6> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/e126aabdd59e4de2a12da827ca8c9d0ca1c5b4f8b3c3319e1f905bf691a6e885> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/e126aabdd59e4de2a12da827ca8c9d0ca1c5b4f8b3c3319e1f905bf691a6e885> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages: 147 HOURS CS Core = SEP hours KA Core = SEP hours FPL-SEP: Society,\nEthics, and the Profession Non-core: 1\\. Impact of English-centric programming\nlanguages 2\\. Enhancing accessibility and inclusivity for people with\ndisabilities - Supporting assistive technologies 3\\. Human factors related to\nprogramming languages and usability a. Impact of syntax on accessibility b.\nSupporting cultural differences (e.g., currency, decimals, dates) c.\nNeurodiversity 4\\. Etymology of terms such as \"class,\" \"master,\" and \"slave\"\nin programming languages 5\\. Increasing accessibility by supporting multiple\nlanguages within applications (UTF) Illustrative learning outcomes: Non-core:\n1\\. Consciously design programming languages to be inclusive and non-\noffensive.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/e126aabdd59e4de2a12da827ca8c9d0ca1c5b4f8b3c3319e1f905bf691a6e885> .
_:Nbbec6efbb5284f7895f17fe62b19d90e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/e126aabdd59e4de2a12da827ca8c9d0ca1c5b4f8b3c3319e1f905bf691a6e885> .
_:Nbbec6efbb5284f7895f17fe62b19d90e <http://schema.org/explain> "The lecture covers topics related to scientific communication, vocabulary development, and presentation skills, which align with the knowledge unit's focus on programming languages, accessibility, and inclusivity." <http://groq.org/e126aabdd59e4de2a12da827ca8c9d0ca1c5b4f8b3c3319e1f905bf691a6e885> .
_:Nbbec6efbb5284f7895f17fe62b19d90e <http://schema.org/answer> "1" <http://groq.org/e126aabdd59e4de2a12da827ca8c9d0ca1c5b4f8b3c3319e1f905bf691a6e885> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:Nbbec6efbb5284f7895f17fe62b19d90e <http://groq.org/e126aabdd59e4de2a12da827ca8c9d0ca1c5b4f8b3c3319e1f905bf691a6e885> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/95a25cb80c6d249f7406dbac704c2a5c2c804e7ed0f3963d11beb52d631b9404> .
_:N6df0e5297ef14545afd5f42784f075b2 <http://schema.org/answer> "0" <http://groq.org/95a25cb80c6d249f7406dbac704c2a5c2c804e7ed0f3963d11beb52d631b9404> .
_:N6df0e5297ef14545afd5f42784f075b2 <http://schema.org/explain> "The lecture focuses on professional integration and general work structures, not on software engineering or testing concepts." <http://groq.org/95a25cb80c6d249f7406dbac704c2a5c2c804e7ed0f3963d11beb52d631b9404> .
_:N6df0e5297ef14545afd5f42784f075b2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/95a25cb80c6d249f7406dbac704c2a5c2c804e7ed0f3963d11beb52d631b9404> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:N6df0e5297ef14545afd5f42784f075b2 <http://groq.org/95a25cb80c6d249f7406dbac704c2a5c2c804e7ed0f3963d11beb52d631b9404> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/95a25cb80c6d249f7406dbac704c2a5c2c804e7ed0f3963d11beb52d631b9404> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Testing and Quality Assurance:\nCore Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.\nPlaceholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder\nadvanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of\nSE-Testing and Quality Assurance. 2\\. Apply principles in practical scenarios.\n3\\. Analyze the importance of this topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/95a25cb80c6d249f7406dbac704c2a5c2c804e7ed0f3963d11beb52d631b9404> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Réseaux et Télécoms Objectif: (résultats d'apprentissage)\n• Comprendre les mécanismes de base des protocoles de l’Internet (http, tcp, ip, arp);\n• Connaître les défis techniques et sociétaux liés aux déploiements des réseaux; Course content: de l'UE : Internet : comment ça marche.\n• Introduction : les chiffres de l'Internet, histoire et perspectives.\n• Les protocoles applicatifs (http, smtp, dns, ...)\n• Le problème du transport fiable de bout en bout. TCP.\n• Le problème du contrôle de flux et congestion. TCP. Course name: http://example.org/course/UE_X31I040</page1>\n        <page2>Pages: 199 HOURS CS Core = 3.5 + 0.25 (SEP) + 0.25 (PDC) KA Core = . NC-\nApplications: Networked Applications CS Core: 1\\. Naming and address schemes\n(e.g., DNS, and Uniform Resource Identifiers) 2\\. Distributed application\nparadigms (e.g., client/server, peer-to-peer, cloud, edge, and fog) (See also:\nPDC-Communication, PDC-Coordination) 3\\. Diversity of networked application\ndemands (e.g., latency, bandwidth, and loss tolerance) (See also: PDC-\nCommunication, SEP-Sustainability, SEP-Context) 4\\. Coverage of application-\nlayer protocols (e.g., HTTP) 5\\. Interactions with TCP, UDP, and Socket APIs\n(See also: PDC-Programs) Illustrative Learning Outcomes: CS Core: 1\\. Define\nthe principles of naming, addressing, resource location. 2\\. Analyze the needs\nof specific networked application demands. 3\\. Describe the details of one\napplication layer protocol. 4\\. Implement a simple client-server socket-based\napplication.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b53536bfacb6b05849cae83fa1d2c00761fa4e8b61801b52bf83a1db56ee3594> .
<http://example.org/course/UE_X31I040> <http://example.org/has_schema_type> _:Naec1c320713144c8a897b67156121f53 <http://groq.org/b53536bfacb6b05849cae83fa1d2c00761fa4e8b61801b52bf83a1db56ee3594> .
_:Naec1c320713144c8a897b67156121f53 <http://schema.org/explain> "Covers DNS, HTTP, TCP protocols and their roles, aligning with KU's naming, application-layer, and TCP interaction topics." <http://groq.org/b53536bfacb6b05849cae83fa1d2c00761fa4e8b61801b52bf83a1db56ee3594> .
_:Naec1c320713144c8a897b67156121f53 <http://schema.org/answer> "1" <http://groq.org/b53536bfacb6b05849cae83fa1d2c00761fa4e8b61801b52bf83a1db56ee3594> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I040" <http://groq.org/b53536bfacb6b05849cae83fa1d2c00761fa4e8b61801b52bf83a1db56ee3594> .
_:Naec1c320713144c8a897b67156121f53 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b53536bfacb6b05849cae83fa1d2c00761fa4e8b61801b52bf83a1db56ee3594> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/b53536bfacb6b05849cae83fa1d2c00761fa4e8b61801b52bf83a1db56ee3594> .
_:N6f4245bda66840c18b146cfa8ec3c8d4 <http://schema.org/answer> "1" <http://groq.org/e8ee8fa07b979c988904f071178075760165a044769d7888d63cca7fc79ed14b> .
_:N6f4245bda66840c18b146cfa8ec3c8d4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/e8ee8fa07b979c988904f071178075760165a044769d7888d63cca7fc79ed14b> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/e8ee8fa07b979c988904f071178075760165a044769d7888d63cca7fc79ed14b> .
_:N6f4245bda66840c18b146cfa8ec3c8d4 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including topics such as program abstraction, representation, and semantics, as well as data structures and control abstraction." <http://groq.org/e8ee8fa07b979c988904f071178075760165a044769d7888d63cca7fc79ed14b> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Recherche opérationnelle Objectif: (résultats d'apprentissage)\n(A-M)\n- Connaître les notions de calendrier au plus tôt, calendrier au plus tard pour un ensemble de\ntâche, et la notion de marge d'une tâche dans le contexte d'un problème d'ordonnancement simple\n(M)\n- Etre capable de déterminer un calendrier au plus tôt, un calendrier au plus tard et les marges\ndes tâches, dans le contexte d'un problème d'ordonnancement simple (A)\n- Introduction à la problématique de l'optimisation multi-objectif : connaissance de la notion de\nsolution efficace, limite de l'utilisation de la somme pondérée (I)\n- Utilisation d'un langage de modélisation algébrique : comprendre la différence entre un modèle\nexplicite et un modèle implicite (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'écrire un modèle implicite\n(A)\n- Utilisation d'un langage de modélisation algébrique : comprendre l'utilisation d'une structure de\nmatrice creuse pour décrire des contraintes (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'utiliser une structure de\nmatrice creuse pour décrire des contraintes (A)\n- Utilisation d'un langage de modélisation algébrique : être capable de détermine si le choix d'une\nmatrice creuse est pertinent ou pas pour décrire des contraintes (A)\n- Utilisation d'un solveur MIP : comprendre l'utilisation d'un solveur MIP en tant que bibliothèque\nde fonction et être capable de l'utiliser pour résoudre un unique problème de programmation\nlinéaire en variables mixtes (A)\n- Utilisation d'un solveur MIP : être capable d'implémenter un algorithme donné, en faisant des\nappels successifs à un solveur MIP pour résoudre un problème de programmation linéaire en\nvariables mixtes (A) Course content: fondamental :\n- Course name: http://example.org/course/UE_X32I030</page1>\n        <page2>Pages: 140-141 HOURS CS Core = 0 KA Core = 3 FPL-Abstraction: Program\nAbstraction and Representation KA Core: 1\\. BNF and regular expressions 2\\.\nPrograms that take (other) programs as input such as interpreters, compilers,\ntype-checkers, documentation generators 3\\. Components of a language: a.\nDefinitions of alphabets, delimiters, sentences, syntax, and semantics b.\nSyntax vs semantics 4\\. Program as a set of non-ambiguous meaningful sentences\n5\\. Basic programming abstractions: constants, variables, declarations\n(including nested declarations), command, expression, assignment, selection,\ndefinite and indefinite iteration, iterators, function, procedure, modules,\nexception handling (See also: SDF-Fundamentals) 6\\. Mutable vs immutable\nvariables: advantages and disadvantages of reusing existing memory location vs\nadvantages of copying and keeping old values; storing partial computation vs\nrecomputation 7\\. Types of variables: static, local, nonlocal, global; need\nand issues with nonlocal and global variables. 8\\. Scope rules: static vs\ndynamic; visibility of variables; side-effects. 9\\. Side-effects induced by\nnonlocal variables, global variables and aliased variables. Non-core: 10\\.\nL-values and R-values: mapping mutable variable-name to L-values; mapping\nimmutable variablenames to R-values 11\\. Environment vs store and their\nproperties 12\\. Data and control abstraction 13\\. Mechanisms for information\nexchange between program units such as procedures, functions, and modules:\nnonlocal variables, global variables, parameter-passing, import-export between\nmodules 14\\. Data structures to represent code for execution, translation, or\ntransmission. 15\\. Low level instruction representation such as virtual\nmachine instructions, assembly language, and binary representation (See also:\nAR-Representation, AR-Assembly) 16\\. Lambda calculus, variable binding, and\nvariable renaming. (See also: AL-Models, FPL-Formalism) 17\\. Types of\nsemantics: operational, axiomatic, denotational, behavioral; define and use\nabstract syntax trees; contrast with concrete syntax. Illustrative learning\noutcomes: KA Core: 1\\. Illustrate the scope of variables and visibility using\nsimple programs. 2\\. Illustrate different types of parameter-passing using\nsimple pseudo programming language. 3\\. Explain side-effect using global and\nnonlocal variables and how to fix such programs. 4\\. Explain how programs that\nprocess other programs treat the other programs as their input data. 5\\.\nDescribe a grammar and an abstract syntax tree for a small language. 6\\.\nDescribe the benefits of having program representations other than strings of\nsource code. 7\\. Implement a program to process some representation of code\nfor some purpose, such as an interpreter, an expression optimizer, or a\ndocumentation generator.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/e8ee8fa07b979c988904f071178075760165a044769d7888d63cca7fc79ed14b> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I030" <http://groq.org/e8ee8fa07b979c988904f071178075760165a044769d7888d63cca7fc79ed14b> .
<http://example.org/course/UE_X32I030> <http://example.org/has_schema_type> _:N6f4245bda66840c18b146cfa8ec3c8d4 <http://groq.org/e8ee8fa07b979c988904f071178075760165a044769d7888d63cca7fc79ed14b> .
_:Naab4eba1cb4c4886910f6fdc27fbfdd5 <http://schema.org/answer> "1" <http://groq.org/3812daaa548c0650261e6e6a5bedeb00952b5ddd3957aa3ec06808bee204180e> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/3812daaa548c0650261e6e6a5bedeb00952b5ddd3957aa3ec06808bee204180e> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 131-132-133 HOURS CS Core = 4 KA Core = 3 FPL-Functional: Functional\nProgramming CS Core: 1\\. Lambda expressions and evaluation: (See also: AL-\nModels, FPL-Formalism) a. Variable binding and scope rules. (See also: SDF-\nFundamentals) b. Parameter-passing. (See also: SDF-Fundamentals) c. Nested\nlambda expressions and reduction order. 2\\. Effect-free programming: a.\nFunction calls have no side effects, facilitating compositional reasoning. b.\nImmutable variables and data copying vs reduction. c. Use of recursion vs\nloops vs pipelining (map/reduce). 3\\. Processing structured data (e.g., trees)\nvia functions with cases for each data variant: a. Functions defined over\ncompound data in terms of functions applied to the constituent pieces. b.\nPersistent data structures. 4\\. Using higher-order functions (taking,\nreturning, and storing functions). KA Core: 5\\. Metaprogramming and\nreflection. 6\\. Function closures (functions using variables in the enclosing\nlexical environment). a. Basic meaning and definition - creating closures at\nrun-time by capturing the environment. b. Canonical idioms: call-backs,\narguments to iterators, reusable code via function arguments. c. Using a\nclosure to encapsulate data in its environment. d. Delayed versus eager\nevaluation. Non-core: 7\\. Graph reduction machine and call-by-need. 8\\.\nImplementing delayed evaluation. 9\\. Integration with logic programming\nparadigm using concepts such as equational logic, narrowing, residuation and\nsemantic unification. (See also: FPL-Logic) 10\\. Integration with other\nprogramming paradigms such as imperative and object-oriented. Illustrative\nlearning outcomes: CS Core: 1\\. Develop basic algorithms that avoid assigning\nto mutable states or considering reference equality. 2\\. Develop useful\nfunctions that take and return other functions. 3\\. Compare and contrast how\ncomputational solutions to a problem differ in procedural, functional, and\nobject-oriented approaches. 4\\. Compare and contrast mechanisms to define and\nprotect data elements within procedural, functional, and object-oriented\napproaches. KA Core: 5\\. Explain a simple example of lambda expression being\nimplemented using a virtual machine, such as a SECD machine, showing storage\nand reclaim of the environment. 6\\. Correctly interpret variables and lexical\nscope in a program using function closures. 7\\. Use functional encapsulation\nmechanisms such as closures and modular interfaces. 8\\. Compare and contrast\nstateful vs stateless execution. 9\\. Define and use iterators and other\noperations on aggregates, including operations that take functions as\narguments, in multiple programming languages, selecting the most natural\nidioms for each language. (See also: FPL-OOP) Non-core: 10\\. Illustrate graph\nreduction using a l-expression using a shared subexpression. 11\\. Illustrate\nthe execution of a simple nested l-expression using an abstract machine, such\nas an ABC machine. 12\\. Illustrate narrowing, residuation, and semantic\nunification using simple illustrative examples. 13\\. Illustrate the\nconcurrency constructs using simple programming examples of known concepts\nsuch as a buffer being read and written concurrently or sequentially. (See\nalso: FPL-OOP)</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/3812daaa548c0650261e6e6a5bedeb00952b5ddd3957aa3ec06808bee204180e> .
_:Naab4eba1cb4c4886910f6fdc27fbfdd5 <http://schema.org/explain> "The lecture covers the fundamental concepts of functional programming, including lambda expressions, recursion, and higher-order functions, which aligns with the KU's objectives." <http://groq.org/3812daaa548c0650261e6e6a5bedeb00952b5ddd3957aa3ec06808bee204180e> .
_:Naab4eba1cb4c4886910f6fdc27fbfdd5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/3812daaa548c0650261e6e6a5bedeb00952b5ddd3957aa3ec06808bee204180e> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/3812daaa548c0650261e6e6a5bedeb00952b5ddd3957aa3ec06808bee204180e> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:Naab4eba1cb4c4886910f6fdc27fbfdd5 <http://groq.org/3812daaa548c0650261e6e6a5bedeb00952b5ddd3957aa3ec06808bee204180e> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/79c70ad2b44bf8004e4fb84514072b264214aee3190b145c7edaea3d31622691> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/79c70ad2b44bf8004e4fb84514072b264214aee3190b145c7edaea3d31622691> .
_:N7a6e7bf767cd4bf6a305f536b90ff84f <http://schema.org/explain> "The lecture covers topics related to intellectual property, responsibility, and professional ethics, which align with the KU's learning outcomes." <http://groq.org/79c70ad2b44bf8004e4fb84514072b264214aee3190b145c7edaea3d31622691> .
_:N7a6e7bf767cd4bf6a305f536b90ff84f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/79c70ad2b44bf8004e4fb84514072b264214aee3190b145c7edaea3d31622691> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:N7a6e7bf767cd4bf6a305f536b90ff84f <http://groq.org/79c70ad2b44bf8004e4fb84514072b264214aee3190b145c7edaea3d31622691> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages : 171 CS Core : None, KA Core : None (Hours here are included in\nSociety, Ethics and the Profession Area) CS Core: 1\\. Intellectual property\nrights of programmers for programs they develop. 2\\. Plagiarism and academic\nintegrity. 3\\. Responsibility and liability of programmers regarding code they\ndevelop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work\nethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.\nExplain/understand some of the intellectual property issues relating to\nprograms. 2\\. Explain/understand when code developed by others can be used and\nproper ways of disclosing their use. 3\\. Explain/understand the responsibility\nof programmers when developing code for an overall solution (which may be\ndeveloped by a team). 4\\. Explain/understand one or more codes of conduct\napplicable to programmers.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/79c70ad2b44bf8004e4fb84514072b264214aee3190b145c7edaea3d31622691> .
_:N7a6e7bf767cd4bf6a305f536b90ff84f <http://schema.org/answer> "1" <http://groq.org/79c70ad2b44bf8004e4fb84514072b264214aee3190b145c7edaea3d31622691> .
_:N838bc8adb21d4e0b8dad05b080890fdd <http://schema.org/explain> "No overlap; lecture covers software maintenance, KU focuses on logic systems" <http://groq.org/7a9ea6be42b668ed3055e5b1b425d8d26c49975899b6f069001352cf86f0a35b> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/7a9ea6be42b668ed3055e5b1b425d8d26c49975899b6f069001352cf86f0a35b> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages:76-77 HOURS CS Core = 0 KA Core = 0 AI-LRR: Logical Representation and\nReasoning Non-core: 77 1\\. Review of propositional and predicate logic (See\nalso: MSF-Discrete) 2\\. Resolution and theorem proving (propositional logic\nonly) a. Forward chaining, backward chaining 3\\. Knowledge representation\nissues a. Description logics b. Ontology engineering 4\\. Semantic web 5\\. Non-\nmonotonic reasoning (e.g., non-classical logics, default reasoning) 6\\.\nArgumentation 7\\. Reasoning about action and change (e.g., situation and event\ncalculus) 8\\. Temporal and spatial reasoning 9\\. Logic programming a. Prolog,\nAnswer Set Programming 10\\. Rule-based Expert Systems 11\\. Semantic networks\n12\\. Model-based and Case-based reasoning Illustrative Learning Outcomes: 1\\.\nTranslate a natural language (e.g., English) sentence into a predicate logic\nstatement. 2\\. Convert a logic statement into clausal form. 3\\. Apply\nresolution to a set of logic statements to answer a query. 4\\. Compare and\ncontrast the most common models used for structured knowledge representation,\nhighlighting their strengths and weaknesses. 5\\. Identify the components of\nnon-monotonic reasoning and its usefulness as a representational mechanism for\nbelief systems. 6\\. Compare and contrast the basic techniques for representing\nuncertainty. 7\\. Compare and contrast the basic techniques for qualitative\nrepresentation. 8\\. Apply situation and event calculus to problems of action\nand change. 9\\. Explain the distinction between temporal and spatial\nreasoning, and how they interrelate. 10\\. Explain the difference between rule-\nbased, case-based, and model-based reasoning techniques. 11\\. Define the\nconcept of a planning system and how it differs from classical search\ntechniques. 12\\. Describe the differences between planning as search,\noperator-based planning, and propositional planning, providing examples of\ndomains where each is most applicable. 13\\. Explain the distinction between\nmonotonic and non-monotonic inference.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/7a9ea6be42b668ed3055e5b1b425d8d26c49975899b6f069001352cf86f0a35b> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:N838bc8adb21d4e0b8dad05b080890fdd <http://groq.org/7a9ea6be42b668ed3055e5b1b425d8d26c49975899b6f069001352cf86f0a35b> .
_:N838bc8adb21d4e0b8dad05b080890fdd <http://schema.org/answer> "0" <http://groq.org/7a9ea6be42b668ed3055e5b1b425d8d26c49975899b6f069001352cf86f0a35b> .
_:N838bc8adb21d4e0b8dad05b080890fdd <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/7a9ea6be42b668ed3055e5b1b425d8d26c49975899b6f069001352cf86f0a35b> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/7a9ea6be42b668ed3055e5b1b425d8d26c49975899b6f069001352cf86f0a35b> .
_:N57c94c937cf7456293b1439528699fed <http://schema.org/explain> "Lecture focuses on functional programming techniques, while KU addresses professional ethics/legal responsibilities." <http://groq.org/54d5cb9265329c73ed27164f001da7820d4e87d53882a5f3e012df3546a74c7a> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:N57c94c937cf7456293b1439528699fed <http://groq.org/54d5cb9265329c73ed27164f001da7820d4e87d53882a5f3e012df3546a74c7a> .
_:N57c94c937cf7456293b1439528699fed <http://schema.org/answer> "0" <http://groq.org/54d5cb9265329c73ed27164f001da7820d4e87d53882a5f3e012df3546a74c7a> .
_:N57c94c937cf7456293b1439528699fed <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/54d5cb9265329c73ed27164f001da7820d4e87d53882a5f3e012df3546a74c7a> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages : 171 CS Core : None, KA Core : None (Hours here are included in\nSociety, Ethics and the Profession Area) CS Core: 1\\. Intellectual property\nrights of programmers for programs they develop. 2\\. Plagiarism and academic\nintegrity. 3\\. Responsibility and liability of programmers regarding code they\ndevelop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work\nethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.\nExplain/understand some of the intellectual property issues relating to\nprograms. 2\\. Explain/understand when code developed by others can be used and\nproper ways of disclosing their use. 3\\. Explain/understand the responsibility\nof programmers when developing code for an overall solution (which may be\ndeveloped by a team). 4\\. Explain/understand one or more codes of conduct\napplicable to programmers.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/54d5cb9265329c73ed27164f001da7820d4e87d53882a5f3e012df3546a74c7a> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/54d5cb9265329c73ed27164f001da7820d4e87d53882a5f3e012df3546a74c7a> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/54d5cb9265329c73ed27164f001da7820d4e87d53882a5f3e012df3546a74c7a> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I050" <http://groq.org/7909ce10e8f488c5b357426071836ff5e7bba78034b3d78a607604dc77acfaf5> .
_:N91fbc4c3e6c24c1f98e2c4110f51efab <http://schema.org/explain> "The lecture covers some aspects like datapath and pipelining but lacks detailed coverage of logic design, layered systems, error handling, and scaling concepts." <http://groq.org/7909ce10e8f488c5b357426071836ff5e7bba78034b3d78a607604dc77acfaf5> .
<http://example.org/course/UE_X31I050> <http://example.org/has_schema_type> _:N91fbc4c3e6c24c1f98e2c4110f51efab <http://groq.org/7909ce10e8f488c5b357426071836ff5e7bba78034b3d78a607604dc77acfaf5> .
_:N91fbc4c3e6c24c1f98e2c4110f51efab <http://schema.org/answer> "0" <http://groq.org/7909ce10e8f488c5b357426071836ff5e7bba78034b3d78a607604dc77acfaf5> .
_:N91fbc4c3e6c24c1f98e2c4110f51efab <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/7909ce10e8f488c5b357426071836ff5e7bba78034b3d78a607604dc77acfaf5> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/7909ce10e8f488c5b357426071836ff5e7bba78034b3d78a607604dc77acfaf5> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Architecture des ordinateurs Objectif: (résultats d'apprentissage)\nl'implémentation des éléments logiques de base (mux/demux, registres, ...);\n• connaître les principes de la programmation dans un langage d'assemblage et savoir traduire les\nappels de fonctions et de procédures en respectant les conventions dictées par l'environnement;\n• savoir mettre en oeuvre un processeur monocycle simple en définissant les chemins de données\nde son jeu d'instructions;\n• connaître les principes sous-tendant les processeurs multicycles et les architectures pipelinées\n• connaître la notion de cache mémoire et ses différentes implémentations, et en connaître les\nimpacts sur les algorithmes. Course content: données et de\ncontrôle).\n* Les mémoires: communication par bus, principe de localité, cache, virtualisation\n* Multiprocesseurs, multicœurs et GPU [optionnel, en fonction du temps disponible] Course name: http://example.org/course/UE_X31I050</page1>\n        <page2>Pages : 230-231 CS Core : 3, KA Core : 0 CS Core: 1\\. Basic building blocks\nand components of a computer (gates, flip-flops, registers, interconnections;\ndatapath + control + memory) 2\\. Hardware as a computational paradigm:\nFundamental logic building blocks; Logic expressions, minimization, sum of\nproduct forms (See also: AR-Logic) 3\\. Programming abstractions, interfaces,\nuse of libraries (See also: PDC-Programs) 4\\. Distinction and interaction\nbetween application and OS services, remote procedure call (See also: OS-\nPurpose) 5\\. Basic concept of pipelining, overlapped processing stages (See\nalso: AR-Organization) 6\\. Basic concept of scaling: performance vs problem\nsize Illustrative Learning Outcomes: CS Core: 1\\. Describe the basic building\nblocks of computers and their role in the historical development of computer\narchitecture. 2\\. Design a simple logic circuit using the fundamental building\nblocks of logic design to solve a simple problem (e.g., adder). 3\\. Describe\nhow computing systems are constructed of layers upon layers, based on\nseparation of concerns, with well-defined interfaces, hiding details of low\nlayers from the higher layers. 4\\. Describe that hardware, OS, VM, and\napplication are additional layers of interpretation/processing. 5\\. Describe\nthe mechanisms of how errors are detected, signaled back, and handled through\nthe layers. 6\\. Construct a simple program (e.g., a TCP client/server) using\nmethods of layering, error detection and recovery, and reflection of error\nstatus across layers. 7\\. Identify bugs in a layered program by using tools\nfor program tracing, single stepping, and debugging. 8\\. Understand the\nconcept of strong vs weak scaling, i.e., how performance is affected by the\nscale of the problem vs the scale of resources to solve the problem. This can\nbe motivated by simple, real-world examples.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/7909ce10e8f488c5b357426071836ff5e7bba78034b3d78a607604dc77acfaf5> .
_:Nfa7b4d5dd9ac423bbb87d8341a4df45f <http://schema.org/explain> "Lecture focuses on functional programming (higher-order functions, pattern matching, type inference), while KU emphasizes logic programming (Horn clauses, unification, Prolog concepts). Core topics don't overlap." <http://groq.org/5b98e77c5f3a1d80b2eedf8c7f348f533d2a54913c6f65614bdd37b53e7f4a87> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:Nfa7b4d5dd9ac423bbb87d8341a4df45f <http://groq.org/5b98e77c5f3a1d80b2eedf8c7f348f533d2a54913c6f65614bdd37b53e7f4a87> .
_:Nfa7b4d5dd9ac423bbb87d8341a4df45f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/5b98e77c5f3a1d80b2eedf8c7f348f533d2a54913c6f65614bdd37b53e7f4a87> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/5b98e77c5f3a1d80b2eedf8c7f348f533d2a54913c6f65614bdd37b53e7f4a87> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/5b98e77c5f3a1d80b2eedf8c7f348f533d2a54913c6f65614bdd37b53e7f4a87> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/5b98e77c5f3a1d80b2eedf8c7f348f533d2a54913c6f65614bdd37b53e7f4a87> .
_:Nfa7b4d5dd9ac423bbb87d8341a4df45f <http://schema.org/answer> "0" <http://groq.org/5b98e77c5f3a1d80b2eedf8c7f348f533d2a54913c6f65614bdd37b53e7f4a87> .
<http://example.org/course/UE_X32I010> <http://example.org/is_aligned_with> _:N0d0bc87d1bb74ff1a845e4c19cd64b5d <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N25a47a25606d4778927473c403397996 <http://example.org/has_chunk> ".\n6. Exception handling. (See also: SDF-Fundamentals, PDC-Coordination, SE-Construction)\n7. Object-oriented idioms for encapsulation:\na. Privacy, data hiding, and visibility of class members.\nb. Interfaces revealing only method signatures.\nc. Abstract base classes, traits and mixins.\n8. Dynamic vs static properties.\n9. Composition vs inheritance.\n10. Subtyping:\na. Subtype polymorphism; implicit upcasts in typed languages.\nb. Notion of behavioral replacement: subtypes acting like supertype.\nc" <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N090953f6e7f7465e852d6bf08752957b <http://example.org/has_chunk> ". (See also: FPL-Logic)\n10. Integration with other programming paradigms such as imperative and object-oriented.\nIllustrative learning outcomes:\nCS Core:\n1. Develop basic algorithms that avoid assigning to mutable states or considering reference equality.\n2. Develop useful functions that take and return other functions.\n3. Compare and contrast how computational solutions to a problem differ in procedural, functional,\nand object-oriented approaches.\n4" <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
<http://example.org/faiss> <http://example.org/input> "Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010" <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N0d0bc87d1bb74ff1a845e4c19cd64b5d <http://example.org/has_chunk> ". (See also: AI-LRR)\n13. Integration with other programming paradigms such as object-oriented programming.\n14. Advance programming constructs such as difference-lists, creating user defined data structures, set\nof, etc.\nIllustrative learning outcomes:\nKA Core:\n1. Use a logic language to implement a conventional algorithm.\n2. Use a logic language to implement an algorithm employing implicit search using clauses, relations,\nand cuts.\n3" <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N25a47a25606d4778927473c403397996 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-OOP_Object-Oriented_Programming.txt> <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N090953f6e7f7465e852d6bf08752957b <http://example.org/has_score> "0.680581"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N25a47a25606d4778927473c403397996 <http://example.org/has_score> "0.67110866"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N0d0bc87d1bb74ff1a845e4c19cd64b5d <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N090953f6e7f7465e852d6bf08752957b <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Functional_Functional_Programming.txt> <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
<http://example.org/course/UE_X32I010> <http://example.org/is_aligned_with> _:N090953f6e7f7465e852d6bf08752957b <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
<http://example.org/course/UE_X32I010> <http://example.org/is_aligned_with> _:N25a47a25606d4778927473c403397996 <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N0d0bc87d1bb74ff1a845e4c19cd64b5d <http://example.org/has_score> "0.67663896"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/7d1261a8e22b80011b51e0e8fdc406c0ebfef6c18da8fc97f501fb179a238fa1> .
_:N29b49d47d7dc43f09688bf6832e14a83 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/ad35be9081373e3ef046ffbb48c178c3130d3304e3ef74171bc4653dd27b8fd1> .
_:N29b49d47d7dc43f09688bf6832e14a83 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including topics such as software construction, maintenance, and documentation, as well as logic programming concepts like quantifiers, logical connectives, and unification." <http://groq.org/ad35be9081373e3ef046ffbb48c178c3130d3304e3ef74171bc4653dd27b8fd1> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/ad35be9081373e3ef046ffbb48c178c3130d3304e3ef74171bc4653dd27b8fd1> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/ad35be9081373e3ef046ffbb48c178c3130d3304e3ef74171bc4653dd27b8fd1> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:N29b49d47d7dc43f09688bf6832e14a83 <http://groq.org/ad35be9081373e3ef046ffbb48c178c3130d3304e3ef74171bc4653dd27b8fd1> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/ad35be9081373e3ef046ffbb48c178c3130d3304e3ef74171bc4653dd27b8fd1> .
_:N29b49d47d7dc43f09688bf6832e14a83 <http://schema.org/answer> "1" <http://groq.org/ad35be9081373e3ef046ffbb48c178c3130d3304e3ef74171bc4653dd27b8fd1> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/e97379878309db8265f9a9c34f3f318f3c29dc8dabc8ef2f4ebee9e0b7deb2c0> .
_:Nbc3a338fea474918a0f584b596151fb6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/e97379878309db8265f9a9c34f3f318f3c29dc8dabc8ef2f4ebee9e0b7deb2c0> .
_:Nbc3a338fea474918a0f584b596151fb6 <http://schema.org/explain> "The lecture focuses on teaching methods rather than the specific formal methods content." <http://groq.org/e97379878309db8265f9a9c34f3f318f3c29dc8dabc8ef2f4ebee9e0b7deb2c0> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/e97379878309db8265f9a9c34f3f318f3c29dc8dabc8ef2f4ebee9e0b7deb2c0> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:Nbc3a338fea474918a0f584b596151fb6 <http://groq.org/e97379878309db8265f9a9c34f3f318f3c29dc8dabc8ef2f4ebee9e0b7deb2c0> .
_:Nbc3a338fea474918a0f584b596151fb6 <http://schema.org/answer> "0" <http://groq.org/e97379878309db8265f9a9c34f3f318f3c29dc8dabc8ef2f4ebee9e0b7deb2c0> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/e97379878309db8265f9a9c34f3f318f3c29dc8dabc8ef2f4ebee9e0b7deb2c0> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/66411ed89c063ec9e95084df77a39fe00b482a2491009b7db31ea2f4606e5906> .
_:N0b13dc9f8b754b3eab8de8f9200b04fd <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/66411ed89c063ec9e95084df77a39fe00b482a2491009b7db31ea2f4606e5906> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages : 171 CS Core : None, KA Core : None (Hours here are included in\nSociety, Ethics and the Profession Area) CS Core: 1\\. Intellectual property\nrights of programmers for programs they develop. 2\\. Plagiarism and academic\nintegrity. 3\\. Responsibility and liability of programmers regarding code they\ndevelop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work\nethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.\nExplain/understand some of the intellectual property issues relating to\nprograms. 2\\. Explain/understand when code developed by others can be used and\nproper ways of disclosing their use. 3\\. Explain/understand the responsibility\nof programmers when developing code for an overall solution (which may be\ndeveloped by a team). 4\\. Explain/understand one or more codes of conduct\napplicable to programmers.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/66411ed89c063ec9e95084df77a39fe00b482a2491009b7db31ea2f4606e5906> .
_:N0b13dc9f8b754b3eab8de8f9200b04fd <http://schema.org/explain> "The lecture covers the topics of intellectual property rights, plagiarism, responsibility and liability, and professional work ethics, which are all part of the KU." <http://groq.org/66411ed89c063ec9e95084df77a39fe00b482a2491009b7db31ea2f4606e5906> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:N0b13dc9f8b754b3eab8de8f9200b04fd <http://groq.org/66411ed89c063ec9e95084df77a39fe00b482a2491009b7db31ea2f4606e5906> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/66411ed89c063ec9e95084df77a39fe00b482a2491009b7db31ea2f4606e5906> .
_:N0b13dc9f8b754b3eab8de8f9200b04fd <http://schema.org/answer> "1" <http://groq.org/66411ed89c063ec9e95084df77a39fe00b482a2491009b7db31ea2f4606e5906> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS\nCore: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-\nOverview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface\nwith operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment\nvariables (See also: SF-Overview) 5\\. File abstraction and operators (See\nalso: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as\narrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-\nStructures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and\nprocesses (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:\nCS Core: 1\\. Create and execute automated scripts to manage various system\ntasks. 2\\. Solve various text processing problems through scripting.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/51bbf135bb00fec8942bbabb217b8ffd886f327f0a8eb01b06c0bb801b193e15> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/51bbf135bb00fec8942bbabb217b8ffd886f327f0a8eb01b06c0bb801b193e15> .
_:N1517367e8f404f3fafd60089c6987807 <http://schema.org/answer> "0" <http://groq.org/51bbf135bb00fec8942bbabb217b8ffd886f327f0a8eb01b06c0bb801b193e15> .
_:N1517367e8f404f3fafd60089c6987807 <http://schema.org/explain> "No overlap beyond basic regex theory; KU focuses on scripting/practical tasks not covered" <http://groq.org/51bbf135bb00fec8942bbabb217b8ffd886f327f0a8eb01b06c0bb801b193e15> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:N1517367e8f404f3fafd60089c6987807 <http://groq.org/51bbf135bb00fec8942bbabb217b8ffd886f327f0a8eb01b06c0bb801b193e15> .
_:N1517367e8f404f3fafd60089c6987807 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/51bbf135bb00fec8942bbabb217b8ffd886f327f0a8eb01b06c0bb801b193e15> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/51bbf135bb00fec8942bbabb217b8ffd886f327f0a8eb01b06c0bb801b193e15> .
_:N19fddbfbfaed44d49cab55c1dc88242e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/626548b15a8de98a11863654ceb422af225c1ee3dc6069e1dbe36031e85356f9> .
_:N19fddbfbfaed44d49cab55c1dc88242e <http://schema.org/answer> "0" <http://groq.org/626548b15a8de98a11863654ceb422af225c1ee3dc6069e1dbe36031e85356f9> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32T060" <http://groq.org/626548b15a8de98a11863654ceb422af225c1ee3dc6069e1dbe36031e85356f9> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/626548b15a8de98a11863654ceb422af225c1ee3dc6069e1dbe36031e85356f9> .
<http://example.org/course/UE_X32T060> <http://example.org/has_schema_type> _:N19fddbfbfaed44d49cab55c1dc88242e <http://groq.org/626548b15a8de98a11863654ceb422af225c1ee3dc6069e1dbe36031e85356f9> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/626548b15a8de98a11863654ceb422af225c1ee3dc6069e1dbe36031e85356f9> .
_:N19fddbfbfaed44d49cab55c1dc88242e <http://schema.org/explain> "The lecture does not address the specific topics of the Knowledge Unit." <http://groq.org/626548b15a8de98a11863654ceb422af225c1ee3dc6069e1dbe36031e85356f9> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/523f765946c76281147b7b3224ed627e315d642eb3c23f42619cd5ef6b803eee> .
_:N04af83f7df574815b555adade328818a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/523f765946c76281147b7b3224ed627e315d642eb3c23f42619cd5ef6b803eee> .
_:N04af83f7df574815b555adade328818a <http://schema.org/explain> "No overlap; lecture focuses on language skills while KU covers advanced programming constructs" <http://groq.org/523f765946c76281147b7b3224ed627e315d642eb3c23f42619cd5ef6b803eee> .
_:N04af83f7df574815b555adade328818a <http://schema.org/answer> "0" <http://groq.org/523f765946c76281147b7b3224ed627e315d642eb3c23f42619cd5ef6b803eee> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages: 144 HOURS CS Core = 0 KA Core = 0 FPL-Constructs: Advanced Programming\nConstructs Non-core: 1\\. Encapsulation mechanisms 2\\. Delayed evaluation and\ninfinite streams 3\\. Compare and contrast delayed evaluation vs eager\nevaluation 4\\. Unification vs assertion vs expression evaluation 5\\. Control\nabstractions: exception handling, continuations, monads. 6\\. Object-oriented\nabstractions: multiple inheritance, mixins, traits, multimethods 7\\.\nMetaprogramming: macros, generative programming, model-based development 8\\.\nString manipulation via pattern-matching (regular expressions) 9\\. Dynamic\ncode evaluation (\"eval\") 10\\. Language support for checking assertions,\ninvariants, and pre/post-conditions 11\\. Domain specific languages, such as\ndatabase languages, data science languages, embedded computing languages,\nsynchronous languages, hardware interface languages 12\\. Massive parallel high\nperformance computing models and languages Illustrative learning outcomes:\nNon-core: 1\\. Use various advanced programming constructs and idioms\ncorrectly. 2\\. Discuss how various advanced programming constructs aim to\nimprove program structure, software quality, and programmer productivity. 3\\.\nDiscuss how various advanced programming constructs interact with the\ndefinition and implementation of other language features.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/523f765946c76281147b7b3224ed627e315d642eb3c23f42619cd5ef6b803eee> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/523f765946c76281147b7b3224ed627e315d642eb3c23f42619cd5ef6b803eee> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:N04af83f7df574815b555adade328818a <http://groq.org/523f765946c76281147b7b3224ed627e315d642eb3c23f42619cd5ef6b803eee> .
_:N530850ccac8340e48bf612175d82e721 <http://schema.org/answer> "0" <http://groq.org/ec9eb4994d3d72ab03fcc65e183c70bb9885c338e4c080b4900b6a09247a1c71> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/ec9eb4994d3d72ab03fcc65e183c70bb9885c338e4c080b4900b6a09247a1c71> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/ec9eb4994d3d72ab03fcc65e183c70bb9885c338e4c080b4900b6a09247a1c71> .
_:N530850ccac8340e48bf612175d82e721 <http://schema.org/explain> "The lecture focuses on formal verification and complexity proofs, lacking coverage of common algorithms and their practical efficiency impacts." <http://groq.org/ec9eb4994d3d72ab03fcc65e183c70bb9885c338e4c080b4900b6a09247a1c71> .
_:N530850ccac8340e48bf612175d82e721 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/ec9eb4994d3d72ab03fcc65e183c70bb9885c338e4c080b4900b6a09247a1c71> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:N530850ccac8340e48bf612175d82e721 <http://groq.org/ec9eb4994d3d72ab03fcc65e183c70bb9885c338e4c080b4900b6a09247a1c71> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,\nAL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.\nSome common algorithms (e.g., sorting, searching, tree traversal, graph\ntraversal) 3\\. Impact of algorithms on time-space efficiency of programs\nIllustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms\nfor writing programs. 2\\. Demonstrate how a problem may be solved by different\nalgorithms, each with different properties. 3\\. Explain some common algorithms\n(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the\nimpact on space/time performance of some algorithms.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/ec9eb4994d3d72ab03fcc65e183c70bb9885c338e4c080b4900b6a09247a1c71> .
_:N1d9e2043ff774607ae0e2ff308384462 <http://example.org/has_score> "0.64577204"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
<http://example.org/course/UE_X31A060> <http://example.org/is_aligned_with> _:N1d9e2043ff774607ae0e2ff308384462 <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:N1d9e2043ff774607ae0e2ff308384462 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
<http://example.org/course/UE_X31A060> <http://example.org/is_aligned_with> _:N23ab7097e05d43bd8e3b1c9f1bfd05f2 <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:N23ab7097e05d43bd8e3b1c9f1bfd05f2 <http://example.org/has_chunk> "FPL-SEP: Society, Ethics, and the Profession\nNon-core:\n1. Impact of English-centric programming languages\n2. Enhancing accessibility and inclusivity for people with disabilities – Supporting assistive\ntechnologies\n3. Human factors related to programming languages and usability\na. Impact of syntax on accessibility\nb. Supporting cultural differences (e.g., currency, decimals, dates)\nc. Neurodiversity\n4. Etymology of terms such as “class,” “master,” and “slave” in programming languages\n5" <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:N30cae42617074d4da2bc3bf030c8597b <http://example.org/has_chunk> ". Formal description of a programming language\n6. Green computing principles (See also: SEP-Sustainability)\nIllustrative Learning Outcomes:\nNon-core:\n1. Understand what constitutes good language design and apply that knowledge to evaluate a real\nprogramming language." <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
<http://example.org/faiss> <http://example.org/input> "Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060" <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:N23ab7097e05d43bd8e3b1c9f1bfd05f2 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-SEP_Society_Ethics_and_the_Profession.txt> <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:N1d9e2043ff774607ae0e2ff308384462 <http://example.org/has_chunk> ". Examples of use: POS tagging and morphology\n8. Information retrieval (See also: DM-Unstructured)\na. Vector space model\ni. TF & IDF\nb. Precision and recall\n9. Information extraction\n10. Language translation\n11. Text classification, categorization\na. Bag of words model\n12. Deep learning for NLP (See also: AI-ML)\na. RNNs\nb. Transformers\nc. Multi-modal embeddings (e.g., images + text)\nd. Generative language models\nIllustrative Learning Outcomes:\n1" <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:N23ab7097e05d43bd8e3b1c9f1bfd05f2 <http://example.org/has_score> "0.64215916"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:N30cae42617074d4da2bc3bf030c8597b <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Design_Design_Principles_of_Programming_Languages.txt> <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
<http://example.org/course/UE_X31A060> <http://example.org/is_aligned_with> _:N30cae42617074d4da2bc3bf030c8597b <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:N30cae42617074d4da2bc3bf030c8597b <http://example.org/has_score> "0.63870883"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/279a85a2b99b8ab8ea3ee2d3532dd596b91169058e5cace7e9d460ac9967c53b> .
_:Na48f7551620a4041bddecea460298f29 <http://schema.org/answer> "1" <http://groq.org/ab6e61e31ff76f9c0dd22f4dddd99d02764e493576d4eb848dfb922af3ed168a> .
_:Na48f7551620a4041bddecea460298f29 <http://schema.org/explain> "The lecture covers the objectives of writing formal reductions, choosing properties to prove an algorithm's complexity, and writing proofs of correction and complexity, which aligns with the KU's learning outcomes." <http://groq.org/ab6e61e31ff76f9c0dd22f4dddd99d02764e493576d4eb848dfb922af3ed168a> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/ab6e61e31ff76f9c0dd22f4dddd99d02764e493576d4eb848dfb922af3ed168a> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:Na48f7551620a4041bddecea460298f29 <http://groq.org/ab6e61e31ff76f9c0dd22f4dddd99d02764e493576d4eb848dfb922af3ed168a> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/ab6e61e31ff76f9c0dd22f4dddd99d02764e493576d4eb848dfb922af3ed168a> .
_:Na48f7551620a4041bddecea460298f29 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/ab6e61e31ff76f9c0dd22f4dddd99d02764e493576d4eb848dfb922af3ed168a> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,\nAL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.\nSome common algorithms (e.g., sorting, searching, tree traversal, graph\ntraversal) 3\\. Impact of algorithms on time-space efficiency of programs\nIllustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms\nfor writing programs. 2\\. Demonstrate how a problem may be solved by different\nalgorithms, each with different properties. 3\\. Explain some common algorithms\n(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the\nimpact on space/time performance of some algorithms.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/ab6e61e31ff76f9c0dd22f4dddd99d02764e493576d4eb848dfb922af3ed168a> .
_:N46cc72eeb2e3436f950f93571d72e517 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/8b369c93ec19a38f16f948e148f8f877a8d3252d3de11db4df38547e9602b4e9> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/8b369c93ec19a38f16f948e148f8f877a8d3252d3de11db4df38547e9602b4e9> .
_:N46cc72eeb2e3436f950f93571d72e517 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including formal automata, formal languages, and algorithmic correctness, but does not delve into quantum computation." <http://groq.org/8b369c93ec19a38f16f948e148f8f877a8d3252d3de11db4df38547e9602b4e9> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/8b369c93ec19a38f16f948e148f8f877a8d3252d3de11db4df38547e9602b4e9> .
_:N46cc72eeb2e3436f950f93571d72e517 <http://schema.org/answer> "1" <http://groq.org/8b369c93ec19a38f16f948e148f8f877a8d3252d3de11db4df38547e9602b4e9> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Pages:93-95 HOURS CS Core = 9 KA Core = 23 AL-Models: Computational Models and\nFormal Languages CS Core: 1\\. Formal automata a. Finite State b. Pushdown c.\nLinear Bounded d. Turing Machine 2\\. Formal languages, grammars and Chomsky\nHierarchy (See also: FPL-Translation, FPL-Syntax) a. Regular (Type-3) i.\nRegular Expressions b. Context-Free (Type-2) c. Context-Sensitive (Type-1) d.\nRecursively Enumerable (Type-0) 3\\. Relations among formal automata,\nlanguages, and grammars 4\\. Decidability, (un)computability, and halting 5\\.\nThe Church-Turing thesis 6\\. Algorithmic correctness a. Invariants (e.g., in\niteration, recursion, tree search) KA Core: 7\\. Deterministic and\nnondeterministic automata 8\\. Pumping Lemma proofs a. Proof of Finite\nState/Regular-Language limitation b. Pushdown Automata/Context-Free-Language\nlimitation 9\\. Decidability a. Arithmetization and diagonalization 10\\.\nReducibility and reductions 11\\. Time complexity based on Turing Machine 12\\.\nSpace complexity (e.g., Pspace, Savitch's Theorem) 13\\. Equivalent models of\nalgorithmic computation a. Turing Machines and Variations (e.g., multi-tape,\nnon-deterministic) b. Lambda Calculus (See also: FPL-Functional) c. Mu-\nRecursive Functions Non-core: 14\\. Quantum computation (See also: AR-Quantum)\na. Postulates of quantum mechanics i. State space 94 ii. State evolution iii.\nState composition iv. State measurement b. Column vector representations of\nqubits c. Matrix representations of quantum operations d. Simple quantum gates\n(e.g., XNOT, CNOT) Illustrative Learning Outcomes: CS Core: 1\\. For each\nformal automaton in this unit: a. Explain its definition comparing its\ncharacteristics with this unit's other automata, b. Using an example, explain\nstep-by-step how the automaton operates on input including whether it accepts\nthe associated input, c. Explain an example of inputs that can and cannot be\naccepted by the automaton. 2\\. Given a problem, develop an appropriate\nautomaton that addresses the problem. 3\\. Develop a regular expression for a\ngiven regular language expressed in natural language. 4\\. Explain the\ndifference between regular expressions (Type-3 acceptors) and the regular\nexpressions (Type-2 acceptors) used in programming languages. 5\\. For each\nformal model in this unit: a. Explain its definition comparing its\ncharacteristics with the others in this unit, b. Explain example inputs that\nare and cannot be accepted by the language/grammar. 6\\. Explain a universal\nTuring Machine and its operation. 7\\. Present to an audience of co-workers and\nmanagers the impossibility of providing them a program that checks all other\nprograms, including some seemingly simple ones, for infinite loops including\nan explanation of the Halting problem, why it has no algorithmic solution, and\nits significance for real-world algorithmic computation. 8\\. Explain examples\nof classic uncomputable problems. 9\\. Explain the Church-Turing Thesis and its\nsignificance for algorithmic computation. 10\\. Explain how (loop) invariants\ncan be used to prove the correctness of an algorithm. Illustrative Learning\nOutcomes: KA Core: 11\\. For each formal automaton in this unit explain\n(compare/contrast) its deterministic and nondeterministic capabilities. 12\\.\nApply pumping lemmas, or alternative means, to prove the limitations of Finite\nState and Pushdown automata. 13\\. Apply arithmetization and diagonalization to\nprove the Halting Problem for Turing Machines is Undecidability. 14\\. Given a\nknown undecidable language, apply a mapping reduction or computational history\nto prove that another language is undecidable. 15\\. Convert among equivalently\npowerful notations for a language, including among DFAs, NFAs, and regular\nexpressions, and between PDAs and CFGs. 16\\. Explain Rice's theorem and its\nsignificance. 95 17\\. Explain an example proof of a problem that is\nuncomputable by reducing a classic known uncomputable problem to it. 18\\.\nExplain the Primitive and General Recursive functions (zero, successor,\nselection, primitive recursion, composition, and Mu), their significance, and\nTuring Machine implementations. 19\\. Explain how computation is performed in\nLambda Calculus (e.g., Alpha conversion and Beta reduction) Non-core: 20\\. For\na quantum system give examples that explain the following postulates. a. State\nSpace - system state represented as a unit vector in Hilbert space, b. State\nEvolution - the use of unitary operators to evolve system state, c. State\nComposition - the use of tensor product to compose systems states, d. State\nMeasurement - the probabilistic output of measuring a system state. 21\\.\nExplain the operation of a quantum XNOT or CNOT gate on a quantum bit\nrepresented as a matrix and column vector, respectively</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/8b369c93ec19a38f16f948e148f8f877a8d3252d3de11db4df38547e9602b4e9> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:N46cc72eeb2e3436f950f93571d72e517 <http://groq.org/8b369c93ec19a38f16f948e148f8f877a8d3252d3de11db4df38547e9602b4e9> .
_:Nb5bf8f7cf7904ffbb77851f8e03359ad <http://schema.org/answer> "1" <http://groq.org/91ced243d612a4cd788e418ae06d1e28f10c724e1ecab4e0428d8a9b9a9d36a6> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/91ced243d612a4cd788e418ae06d1e28f10c724e1ecab4e0428d8a9b9a9d36a6> .
_:Nb5bf8f7cf7904ffbb77851f8e03359ad <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/91ced243d612a4cd788e418ae06d1e28f10c724e1ecab4e0428d8a9b9a9d36a6> .
_:Nb5bf8f7cf7904ffbb77851f8e03359ad <http://schema.org/explain> "Covers algorithms, complexity, and data structure efficiency (tree/graph traversal, greedy approaches, and performance analysis)." <http://groq.org/91ced243d612a4cd788e418ae06d1e28f10c724e1ecab4e0428d8a9b9a9d36a6> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,\nAL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.\nSome common algorithms (e.g., sorting, searching, tree traversal, graph\ntraversal) 3\\. Impact of algorithms on time-space efficiency of programs\nIllustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms\nfor writing programs. 2\\. Demonstrate how a problem may be solved by different\nalgorithms, each with different properties. 3\\. Explain some common algorithms\n(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the\nimpact on space/time performance of some algorithms.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/91ced243d612a4cd788e418ae06d1e28f10c724e1ecab4e0428d8a9b9a9d36a6> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/91ced243d612a4cd788e418ae06d1e28f10c724e1ecab4e0428d8a9b9a9d36a6> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:Nb5bf8f7cf7904ffbb77851f8e03359ad <http://groq.org/91ced243d612a4cd788e418ae06d1e28f10c724e1ecab4e0428d8a9b9a9d36a6> .
_:N4a9aab757b2345ff81ef29454eb7b066 <http://example.org/has_chunk> ". Fixed vs variable-width instruction sets\nb. Instruction formats\nc. Data manipulation, control, I/O\nd. Addressing modes\ne. Machine language programming\nf. Assembly language programming\n6. Subroutine call and return mechanisms (See also: FPL-Translation, OS-Principles)\n7. I/O and interrupts (See also: OS-Principles)\n8. Heap, static, stack, and code segments (See also: FPL-Translation, OS-Process)\nIllustrative Learning Outcomes:\nCS Core:\n1" <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
<http://example.org/faiss> <http://example.org/input> "Label: Architecture des ordinateurs Objectif: (résultats d'apprentissage)\nl'implémentation des éléments logiques de base (mux/demux, registres, ...);\n• connaître les principes de la programmation dans un langage d'assemblage et savoir traduire les\nappels de fonctions et de procédures en respectant les conventions dictées par l'environnement;\n• savoir mettre en oeuvre un processeur monocycle simple en définissant les chemins de données\nde son jeu d'instructions;\n• connaître les principes sous-tendant les processeurs multicycles et les architectures pipelinées\n• connaître la notion de cache mémoire et ses différentes implémentations, et en connaître les\nimpacts sur les algorithmes. Course content: données et de\ncontrôle).\n* Les mémoires: communication par bus, principe de localité, cache, virtualisation\n* Multiprocesseurs, multicœurs et GPU [optionnel, en fonction du temps disponible] Course name: http://example.org/course/UE_X31I050" <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
_:N4a9aab757b2345ff81ef29454eb7b066 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Architecture_and_Organization_AR/AR-Assembly_Assembly_Level_Machine_Organization.txt> <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
_:N4a9aab757b2345ff81ef29454eb7b066 <http://example.org/has_score> "0.70315826"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
_:Nefd3669aca5a45b0b493b5e72881fb74 <http://example.org/has_score> "0.700032"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
_:N88b8aeca0b24405babc807feeb26f5e1 <http://example.org/has_score> "0.68781894"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
_:Nefd3669aca5a45b0b493b5e72881fb74 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Architecture_and_Organization_AR/AR-Assembly_Assembly_Level_Machine_Organization.txt> <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
_:N88b8aeca0b24405babc807feeb26f5e1 <http://example.org/has_chunk> ". Basic concept of pipelining, overlapped processing stages (See also: AR-Organization) \n6. Basic concept of scaling: performance vs problem size \n \nIllustrative Learning Outcomes:  \nCS Core: \n1. Describe the basic building blocks of computers and their role in the historical development of computer architecture. \n2. Design a simple logic circuit using the fundamental building blocks of logic design to solve a simple problem (e.g., adder). \n3" <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
_:Nefd3669aca5a45b0b493b5e72881fb74 <http://example.org/has_chunk> ".\nKA Core:\n4. Discuss how instructions are represented at the machine level and in the context of a symbolic\nassembler.\n5. Map an example of high-level language patterns into assembly/machine language notations.\n6. Contrast different instruction formats considering aspects such as addresses per instruction and\nvariable-length vs fixed-length formats.\n7. Analyze a subroutine diagram to comment on how subroutine calls are handled at the assembly\nlevel.\n8" <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
<http://example.org/course/UE_X31I050> <http://example.org/is_aligned_with> _:N88b8aeca0b24405babc807feeb26f5e1 <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
<http://example.org/course/UE_X31I050> <http://example.org/is_aligned_with> _:N4a9aab757b2345ff81ef29454eb7b066 <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
<http://example.org/course/UE_X31I050> <http://example.org/is_aligned_with> _:Nefd3669aca5a45b0b493b5e72881fb74 <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
_:N88b8aeca0b24405babc807feeb26f5e1 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/System_Fundamentals_SF/SF-Overview_of_Computer_Systems.txt> <http://faiss.org/de5a688fd3753995160275dbf95c9184ee3cd88a8bea6460f3955f0457fd5e8d> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/4292526a9c0dd5968eceb3b6072e4b7e0a402bc2d7d995ed9e88fef78a497bf2> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/4292526a9c0dd5968eceb3b6072e4b7e0a402bc2d7d995ed9e88fef78a497bf2> .
_:Nb7998acf98994bdc87bd7dccb4c0008e <http://schema.org/answer> "1" <http://groq.org/4292526a9c0dd5968eceb3b6072e4b7e0a402bc2d7d995ed9e88fef78a497bf2> .
_:Nb7998acf98994bdc87bd7dccb4c0008e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/4292526a9c0dd5968eceb3b6072e4b7e0a402bc2d7d995ed9e88fef78a497bf2> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/4292526a9c0dd5968eceb3b6072e4b7e0a402bc2d7d995ed9e88fef78a497bf2> .
_:Nb7998acf98994bdc87bd7dccb4c0008e <http://schema.org/explain> "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." <http://groq.org/4292526a9c0dd5968eceb3b6072e4b7e0a402bc2d7d995ed9e88fef78a497bf2> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:Nb7998acf98994bdc87bd7dccb4c0008e <http://groq.org/4292526a9c0dd5968eceb3b6072e4b7e0a402bc2d7d995ed9e88fef78a497bf2> .
<http://example.org/course/UE_X32A060> <http://example.org/is_aligned_with> _:Nf96b39fff8c24994bf76ec1b17e5a960 <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:Ne3558f9cc9534314843619f679a67b7f <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-SEP_Society_Ethics_and_the_Profession.txt> <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
<http://example.org/course/UE_X32A060> <http://example.org/is_aligned_with> _:N891d545d39714132a974cfbc34f51e14 <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:N891d545d39714132a974cfbc34f51e14 <http://example.org/has_score> "0.6455945"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:Nf96b39fff8c24994bf76ec1b17e5a960 <http://example.org/has_chunk> ". Techniques for learning and mastering a platform-specific programming language \n \nIllustrative Learning Outcomes: \nCS Core: \n1. List the constraints of mobile programming. \n2. List the characteristics of scripting languages. \n3. Describe the three-tier model of web programming.  \n4. Describe how the state is maintained in web programming." <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:N891d545d39714132a974cfbc34f51e14 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Constructs_Advanced_Programming_Constructs.txt> <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
<http://example.org/faiss> <http://example.org/input> "Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060" <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:Nf96b39fff8c24994bf76ec1b17e5a960 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:Nf96b39fff8c24994bf76ec1b17e5a960 <http://example.org/has_score> "0.6445035"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
<http://example.org/course/UE_X32A060> <http://example.org/is_aligned_with> _:Ne3558f9cc9534314843619f679a67b7f <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:Ne3558f9cc9534314843619f679a67b7f <http://example.org/has_score> "0.63936734"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:N891d545d39714132a974cfbc34f51e14 <http://example.org/has_chunk> ". Use various advanced programming constructs and idioms correctly.\n2. Discuss how various advanced programming constructs aim to improve program structure, software\nquality, and programmer productivity.\n3. Discuss how various advanced programming constructs interact with the definition and\nimplementation of other language features." <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
_:Ne3558f9cc9534314843619f679a67b7f <http://example.org/has_chunk> "FPL-SEP: Society, Ethics, and the Profession\nNon-core:\n1. Impact of English-centric programming languages\n2. Enhancing accessibility and inclusivity for people with disabilities – Supporting assistive\ntechnologies\n3. Human factors related to programming languages and usability\na. Impact of syntax on accessibility\nb. Supporting cultural differences (e.g., currency, decimals, dates)\nc. Neurodiversity\n4. Etymology of terms such as “class,” “master,” and “slave” in programming languages\n5" <http://faiss.org/8484cd3747e9f8e2463e72164d35f9fd0509978833e520ce01ef29ba67ade93e> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/4dcfbb1f09e6778e1ced35390d67e22544f2be596607990f59ab0c737e491fe3> .
_:N31a6e707f16a4cf4bb5bb2ced4fd0747 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/4dcfbb1f09e6778e1ced35390d67e22544f2be596607990f59ab0c737e491fe3> .
_:N31a6e707f16a4cf4bb5bb2ced4fd0747 <http://schema.org/answer> "0" <http://groq.org/4dcfbb1f09e6778e1ced35390d67e22544f2be596607990f59ab0c737e491fe3> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages: 147 HOURS CS Core = SEP hours KA Core = SEP hours FPL-SEP: Society,\nEthics, and the Profession Non-core: 1\\. Impact of English-centric programming\nlanguages 2\\. Enhancing accessibility and inclusivity for people with\ndisabilities - Supporting assistive technologies 3\\. Human factors related to\nprogramming languages and usability a. Impact of syntax on accessibility b.\nSupporting cultural differences (e.g., currency, decimals, dates) c.\nNeurodiversity 4\\. Etymology of terms such as \"class,\" \"master,\" and \"slave\"\nin programming languages 5\\. Increasing accessibility by supporting multiple\nlanguages within applications (UTF) Illustrative learning outcomes: Non-core:\n1\\. Consciously design programming languages to be inclusive and non-\noffensive.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/4dcfbb1f09e6778e1ced35390d67e22544f2be596607990f59ab0c737e491fe3> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/4dcfbb1f09e6778e1ced35390d67e22544f2be596607990f59ab0c737e491fe3> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:N31a6e707f16a4cf4bb5bb2ced4fd0747 <http://groq.org/4dcfbb1f09e6778e1ced35390d67e22544f2be596607990f59ab0c737e491fe3> .
_:N31a6e707f16a4cf4bb5bb2ced4fd0747 <http://schema.org/explain> "The lecture focuses on presentation skills and vocabulary in English for IT professionals, whereas the KU covers a broader range of topics, including programming languages, accessibility, and ethics." <http://groq.org/4dcfbb1f09e6778e1ced35390d67e22544f2be596607990f59ab0c737e491fe3> .
_:Ndd81ca6638b1407abf5c9840d5e77cfb <http://schema.org/answer> "0" <http://groq.org/7800bbd1fca7aa4790794c0673e8941c15f146fe91bd6327fdba17858eacebca> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/7800bbd1fca7aa4790794c0673e8941c15f146fe91bd6327fdba17858eacebca> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 130-131 HOURS CS Core = 4 + 1 (SDF) KA Core = 1 FPL-OOP: Object-\nOriented Programming CS Core: 1\\. Imperative programming as a subset of\nobject-oriented programming. 2\\. Object-oriented design: a. Decomposition into\nobjects carrying state and having behavior. b. Class-hierarchy design for\nmodeling. 3\\. Definition of classes: fields, methods, and constructors. (See\nalso: SDF-Fundamentals) 4\\. Subclasses, inheritance (including multiple\ninheritance), and method overriding. 5\\. Dynamic dispatch: definition of\nmethod-call. 6\\. Exception handling. (See also: SDF-Fundamentals, PDC-\nCoordination, SE-Construction) 7\\. Object-oriented idioms for encapsulation:\na. Privacy, data hiding, and visibility of class members. b. Interfaces\nrevealing only method signatures. c. Abstract base classes, traits and mixins.\n8\\. Dynamic vs static properties. 9\\. Composition vs inheritance. 10\\.\nSubtyping: a. Subtype polymorphism; implicit upcasts in typed languages. b.\nNotion of behavioral replacement: subtypes acting like supertype. c.\nRelationship between subtyping and inheritance. KA Core: 11\\. Collection\nclasses, iterators, and other common library components. 12\\. Metaprogramming\nand reflection. Illustrative Learning Outcomes: CS Core: 1\\. Enumerate the\ndifferences between imperative and object-oriented programming paradigms. 2\\.\nCompose a class through design, implementation, and testing to meet behavioral\nrequirements. 3\\. Build a simple class hierarchy utilizing subclassing that\nallows code to be reused for distinct subclasses. 4\\. Predict and validate\ncontrol flow in a program using dynamic dispatch. 5\\. Compare and contrast how\ncomputational solutions to a problem differ in procedural, functional, and\nobject-oriented approaches. 6\\. Compare and contrast mechanisms to define and\nprotect data elements within procedural, functional, and object-oriented\napproaches. 7\\. Compare and contrast the benefits and costs/impact of using\ninheritance (subclasses) and composition (specifically, how to base\ncomposition on higher order functions). 8\\. Explain the relationship between\nobject-oriented inheritance (code-sharing and overriding) and subtyping (the\nidea of a subtype being usable in a context that expects the supertype). 9\\.\nUse object-oriented encapsulation mechanisms such as interfaces and private\nmembers. 10\\. Define and use iterators and other operations on aggregates,\nincluding operations that take functions as arguments, in multiple programming\nlanguages, selecting the most natural idioms for each language. (See also:\nFPL-Functional) KA Core: 11\\. Use collection classes and iterators effectively\nto solve a problem.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/7800bbd1fca7aa4790794c0673e8941c15f146fe91bd6327fdba17858eacebca> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/7800bbd1fca7aa4790794c0673e8941c15f146fe91bd6327fdba17858eacebca> .
_:Ndd81ca6638b1407abf5c9840d5e77cfb <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/7800bbd1fca7aa4790794c0673e8941c15f146fe91bd6327fdba17858eacebca> .
_:Ndd81ca6638b1407abf5c9840d5e77cfb <http://schema.org/explain> "The lecture focuses on theoretical computer science topics, while the KU covers object-oriented programming concepts." <http://groq.org/7800bbd1fca7aa4790794c0673e8941c15f146fe91bd6327fdba17858eacebca> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:Ndd81ca6638b1407abf5c9840d5e77cfb <http://groq.org/7800bbd1fca7aa4790794c0673e8941c15f146fe91bd6327fdba17858eacebca> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/d13f83a75607d25319ba8004b6929a1f065c93e5b0b39512192a3cb53d750b54> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Bases de données 2 Objectif: (résultats d'apprentissage) • Savoir déterminer des contraintes d’intégrité\n• Savoir appliquer un contrôle d’accès basique à une base de données\n• Comprendre la notion de vue\n• Connaître la structuration physique des données\n• Comprendre la notion de transaction\n• Comprendre la notion d’ordonnancement sérialisable\n• Comprendre la technique de contrôle de concurrence par verrouillage\n• Comprendre les fonctions d’un optimiseur de requêtes\n• Comprendre un plan d’exécution d’une requête\n• Connaître les structures accélératrices d’accès aux données (indexes) Course content: Extension procédurale de SQL (PL/SQL) , BD actives (Déclencheurs) Interrogation d'une base avec Course name: http://example.org/course/UE_X32I040</page1>\n        <page2>Pages: 118 HOURS CS Core = 2 KA Core = 4 DM-Querying: Query Construction CS\nCore: 1\\. SQL Query Formation a. Interactive SQL execution b. Programmatic\nexecution of an SQL query KA Core: 2\\. Relational Algebra 3\\. SQL a. Data\ndefinition including integrity and other constraint specifications b. Update\nsublanguage Non-core: 4\\. Relational Calculus 5\\. QBE and 4th-generation\nenvironments 6\\. Different ways to invoke non-procedural queries in\nconventional languages 7\\. Introduction to other major query languages (e.g.,\nXPATH, SPARQL) 8\\. Stored procedures Illustrative Learning Outcomes: CS Core:\n1\\. Compose SQL queries that incorporate select, project, join, union,\nintersection, set difference, and set division. 2\\. Determine when a nested\nSQL query is correlated or not. 3\\. Iterate over data retrieved\nprogrammatically from a database via an SQL query. KA Core: 4\\. Define, in\nSQL, a relation schema, including all integrity constraints and delete/update\ntriggers. 5\\. Compose an SQL query to update a tuple in a relation.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/d13f83a75607d25319ba8004b6929a1f065c93e5b0b39512192a3cb53d750b54> .
_:Nb4d88ac66ae3426aae11a9e1e359ce58 <http://schema.org/answer> "1" <http://groq.org/d13f83a75607d25319ba8004b6929a1f065c93e5b0b39512192a3cb53d750b54> .
_:Nb4d88ac66ae3426aae11a9e1e359ce58 <http://schema.org/explain> "The lecture covers most of the knowledge units, including SQL query formation, relational algebra, and data definition, but does not cover relational calculus, QBE, and other query languages." <http://groq.org/d13f83a75607d25319ba8004b6929a1f065c93e5b0b39512192a3cb53d750b54> .
<http://example.org/course/UE_X32I040> <http://example.org/has_schema_type> _:Nb4d88ac66ae3426aae11a9e1e359ce58 <http://groq.org/d13f83a75607d25319ba8004b6929a1f065c93e5b0b39512192a3cb53d750b54> .
_:Nb4d88ac66ae3426aae11a9e1e359ce58 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/d13f83a75607d25319ba8004b6929a1f065c93e5b0b39512192a3cb53d750b54> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I040" <http://groq.org/d13f83a75607d25319ba8004b6929a1f065c93e5b0b39512192a3cb53d750b54> .
_:N740be10a04d6406089a1bbe4b6f559c5 <http://schema.org/answer> "1" <http://groq.org/1291645706acef065e0fce68e669744f93ef7a843bb7f95cfa525fdfbfc3d87b> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/1291645706acef065e0fce68e669744f93ef7a843bb7f95cfa525fdfbfc3d87b> .
_:N740be10a04d6406089a1bbe4b6f559c5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1291645706acef065e0fce68e669744f93ef7a843bb7f95cfa525fdfbfc3d87b> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/1291645706acef065e0fce68e669744f93ef7a843bb7f95cfa525fdfbfc3d87b> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Pages: 187-188 HOURS CS Core = 29 KA Core = 11 MSF-Discrete: Discrete\nMathematics CS Core: 1\\. Sets, relations, functions, cardinality 2\\. Recursive\nmathematical definitions 3\\. Proof techniques (induction, proof by\ncontradiction) 4\\. Permutations, combinations, counting, pigeonhole principle\n5\\. Modular arithmetic 6\\. Logic: truth tables, connectives (operators),\ninference rules, formulas, normal forms, simple predicate logic 7\\. Graphs:\nbasic definitions 8\\. Order notation Illustrative Learning Outcomes: CS Core:\n1\\. Sets, Relations, and Functions, Cardinality a. Explain with examples the\nbasic terminology of functions, relations, and sets. b. Perform the operations\nassociated with sets, functions, and relations. c. Relate practical examples\nto the appropriate set, function, or relation model, and interpret the\nassociated operations and terminology in context. d. Calculate the size of a\nfinite set, including making use of the sum and product rules and inclusion-\nexclusion principle. e. Explain the difference between finite, countable, and\nuncountable sets. 2\\. Recursive mathematical definitions a. Apply recursive\ndefinitions of sequences or structures (e.g., Fibonacci numbers, linked lists,\nparse trees, fractals). b. Formulate inductive proofs of statements about\nrecursive definitions. c. Solve a variety of basic recurrence relations. d.\nAnalyze a problem to determine underlying recurrence relations. e. Given a\nrecursive/iterative code snippet, describe its underlying recurrence relation,\nhypothesize a closed form for the recurrence relation, and prove the\nhypothesis correct (usually, using induction). 3\\. Proof Techniques a.\nIdentify the proof technique used in a given proof. b. Outline the basic\nstructure of each proof technique (direct proof, proof by contradiction, and\ninduction) described in this unit. c. Apply each of the proof techniques\n(direct proof, proof by contradiction, and induction) correctly in the\nconstruction of a sound argument. d. Determine which type of proof is best for\na given problem. e. Explain the parallels between ideas of mathematical and/or\nstructural induction to recursion and recursively defined structures. f.\nExplain the relationship between weak and strong induction and give examples\nof the appropriate use of each. 4\\. Permutations, combinations, and counting\na. Apply counting arguments, including sum and product rules, inclusion-\nexclusion principle, and arithmetic/geometric progressions. b. Apply the\npigeonhole principle in the context of a formal proof. c. Compute permutations\nand combinations of a set, and interpret the meaning in the context of the\nspecific application. d. Map real-world applications to appropriate counting\nformalisms, such as determining the number of ways to arrange people around a\ntable, subject to constraints on the seating arrangement, or the number of\nways to determine certain hands in cards (e.g., a full house). 5\\. Modular\narithmetic a. Perform computations involving modular arithmetic. b. Explain\nthe notion of the greatest common divisor and apply Euclid's algorithm to\ncompute it. 6\\. Logic a. Convert logical statements from informal language to\npropositional and predicate logic expressions. b. Apply formal methods of\nsymbolic propositional and predicate logic, such as calculating validity of\nformulae, computing normal forms, or negating a logical statement. c. Use the\nrules of inference to construct proofs in propositional and predicate logic.\nd. Describe how symbolic logic can be used to model real-life situations or\napplications, including those arising in computing contexts such as software\nanalysis (e.g., program correctness), database queries, and algorithms. e.\nApply formal logic proofs and/or informal, but rigorous, logical reasoning to\nreal problems, such as predicting the behavior of software or solving problems\nsuch as puzzles. f. Describe the strengths and limitations of propositional\nand predicate logic. g. Explain what it means for a proof in propositional (or\npredicate) logic to be valid. 7\\. Graphs a. Illustrate by example the basic\nterminology of graph theory, and some of the properties and special cases of\ntypes of graphs, including trees. b. Demonstrate different traversal methods\nfor trees and graphs, including pre-, post-, and in-order traversal of trees,\nalong with breadth-first and depth-first search for graphs. c. Model a variety\nof real-world problems in computer science using appropriate forms of graphs\nand trees, such as representing a network topology, the organization of a\nhierarchical file system, or a social network. d. Show how concepts from\ngraphs and trees appear in data structures, algorithms, proof techniques\n(structural induction), and counting. KA Core: The recommended topics are the\nsame between CS core and KA-core, but with far more hours, the KA-core can\ncover these topics in depth and might include more computing-related\napplications.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1291645706acef065e0fce68e669744f93ef7a843bb7f95cfa525fdfbfc3d87b> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:N740be10a04d6406089a1bbe4b6f559c5 <http://groq.org/1291645706acef065e0fce68e669744f93ef7a843bb7f95cfa525fdfbfc3d87b> .
_:N740be10a04d6406089a1bbe4b6f559c5 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including topics such as algorithm implementation, graph theory, and mathematical concepts like sets, relations, and functions." <http://groq.org/1291645706acef065e0fce68e669744f93ef7a843bb7f95cfa525fdfbfc3d87b> .
_:N9197bcecb5bf4286a0a2e8d4e8b3503c <http://schema.org/explain> "The lecture focuses on algorithm verification and complexity, while the KU covers logic programming concepts." <http://groq.org/a330d66a8a8c8b05a92e62d7491ad1f3ec15bb9bd6cc29ddd16c3f4c49e5a057> .
_:N9197bcecb5bf4286a0a2e8d4e8b3503c <http://schema.org/answer> "0" <http://groq.org/a330d66a8a8c8b05a92e62d7491ad1f3ec15bb9bd6cc29ddd16c3f4c49e5a057> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/a330d66a8a8c8b05a92e62d7491ad1f3ec15bb9bd6cc29ddd16c3f4c49e5a057> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:N9197bcecb5bf4286a0a2e8d4e8b3503c <http://groq.org/a330d66a8a8c8b05a92e62d7491ad1f3ec15bb9bd6cc29ddd16c3f4c49e5a057> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/a330d66a8a8c8b05a92e62d7491ad1f3ec15bb9bd6cc29ddd16c3f4c49e5a057> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/a330d66a8a8c8b05a92e62d7491ad1f3ec15bb9bd6cc29ddd16c3f4c49e5a057> .
_:N9197bcecb5bf4286a0a2e8d4e8b3503c <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/a330d66a8a8c8b05a92e62d7491ad1f3ec15bb9bd6cc29ddd16c3f4c49e5a057> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:Na9a10d585d0049d09e2ce0caa596262a <http://groq.org/5cf36605ed81bd87668c63b83538174887e5afe852ce45a595c251cac4c3f970> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/5cf36605ed81bd87668c63b83538174887e5afe852ce45a595c251cac4c3f970> .
_:Na9a10d585d0049d09e2ce0caa596262a <http://schema.org/answer> "0" <http://groq.org/5cf36605ed81bd87668c63b83538174887e5afe852ce45a595c251cac4c3f970> .
_:Na9a10d585d0049d09e2ce0caa596262a <http://schema.org/explain> "Lecture focuses on algorithms/data structures (trees/graphs), while KU covers broader discrete math topics (proofs, logic, counting) not substantially addressed." <http://groq.org/5cf36605ed81bd87668c63b83538174887e5afe852ce45a595c251cac4c3f970> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Pages: 187-188 HOURS CS Core = 29 KA Core = 11 MSF-Discrete: Discrete\nMathematics CS Core: 1\\. Sets, relations, functions, cardinality 2\\. Recursive\nmathematical definitions 3\\. Proof techniques (induction, proof by\ncontradiction) 4\\. Permutations, combinations, counting, pigeonhole principle\n5\\. Modular arithmetic 6\\. Logic: truth tables, connectives (operators),\ninference rules, formulas, normal forms, simple predicate logic 7\\. Graphs:\nbasic definitions 8\\. Order notation Illustrative Learning Outcomes: CS Core:\n1\\. Sets, Relations, and Functions, Cardinality a. Explain with examples the\nbasic terminology of functions, relations, and sets. b. Perform the operations\nassociated with sets, functions, and relations. c. Relate practical examples\nto the appropriate set, function, or relation model, and interpret the\nassociated operations and terminology in context. d. Calculate the size of a\nfinite set, including making use of the sum and product rules and inclusion-\nexclusion principle. e. Explain the difference between finite, countable, and\nuncountable sets. 2\\. Recursive mathematical definitions a. Apply recursive\ndefinitions of sequences or structures (e.g., Fibonacci numbers, linked lists,\nparse trees, fractals). b. Formulate inductive proofs of statements about\nrecursive definitions. c. Solve a variety of basic recurrence relations. d.\nAnalyze a problem to determine underlying recurrence relations. e. Given a\nrecursive/iterative code snippet, describe its underlying recurrence relation,\nhypothesize a closed form for the recurrence relation, and prove the\nhypothesis correct (usually, using induction). 3\\. Proof Techniques a.\nIdentify the proof technique used in a given proof. b. Outline the basic\nstructure of each proof technique (direct proof, proof by contradiction, and\ninduction) described in this unit. c. Apply each of the proof techniques\n(direct proof, proof by contradiction, and induction) correctly in the\nconstruction of a sound argument. d. Determine which type of proof is best for\na given problem. e. Explain the parallels between ideas of mathematical and/or\nstructural induction to recursion and recursively defined structures. f.\nExplain the relationship between weak and strong induction and give examples\nof the appropriate use of each. 4\\. Permutations, combinations, and counting\na. Apply counting arguments, including sum and product rules, inclusion-\nexclusion principle, and arithmetic/geometric progressions. b. Apply the\npigeonhole principle in the context of a formal proof. c. Compute permutations\nand combinations of a set, and interpret the meaning in the context of the\nspecific application. d. Map real-world applications to appropriate counting\nformalisms, such as determining the number of ways to arrange people around a\ntable, subject to constraints on the seating arrangement, or the number of\nways to determine certain hands in cards (e.g., a full house). 5\\. Modular\narithmetic a. Perform computations involving modular arithmetic. b. Explain\nthe notion of the greatest common divisor and apply Euclid's algorithm to\ncompute it. 6\\. Logic a. Convert logical statements from informal language to\npropositional and predicate logic expressions. b. Apply formal methods of\nsymbolic propositional and predicate logic, such as calculating validity of\nformulae, computing normal forms, or negating a logical statement. c. Use the\nrules of inference to construct proofs in propositional and predicate logic.\nd. Describe how symbolic logic can be used to model real-life situations or\napplications, including those arising in computing contexts such as software\nanalysis (e.g., program correctness), database queries, and algorithms. e.\nApply formal logic proofs and/or informal, but rigorous, logical reasoning to\nreal problems, such as predicting the behavior of software or solving problems\nsuch as puzzles. f. Describe the strengths and limitations of propositional\nand predicate logic. g. Explain what it means for a proof in propositional (or\npredicate) logic to be valid. 7\\. Graphs a. Illustrate by example the basic\nterminology of graph theory, and some of the properties and special cases of\ntypes of graphs, including trees. b. Demonstrate different traversal methods\nfor trees and graphs, including pre-, post-, and in-order traversal of trees,\nalong with breadth-first and depth-first search for graphs. c. Model a variety\nof real-world problems in computer science using appropriate forms of graphs\nand trees, such as representing a network topology, the organization of a\nhierarchical file system, or a social network. d. Show how concepts from\ngraphs and trees appear in data structures, algorithms, proof techniques\n(structural induction), and counting. KA Core: The recommended topics are the\nsame between CS core and KA-core, but with far more hours, the KA-core can\ncover these topics in depth and might include more computing-related\napplications.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/5cf36605ed81bd87668c63b83538174887e5afe852ce45a595c251cac4c3f970> .
_:Na9a10d585d0049d09e2ce0caa596262a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/5cf36605ed81bd87668c63b83538174887e5afe852ce45a595c251cac4c3f970> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/5cf36605ed81bd87668c63b83538174887e5afe852ce45a595c251cac4c3f970> .
_:Nf129d3261aae480f8c166b57dba5cbbe <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/148eae927d3a9da2d3b5c851ab514977b87bea06160bca8c5ef29117ea15d30a> .
_:Nf129d3261aae480f8c166b57dba5cbbe <http://schema.org/explain> "Lecture focuses on professional roles/entrepreneurship, not intellectual property, plagiarism, or programmer ethics." <http://groq.org/148eae927d3a9da2d3b5c851ab514977b87bea06160bca8c5ef29117ea15d30a> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31T060" <http://groq.org/148eae927d3a9da2d3b5c851ab514977b87bea06160bca8c5ef29117ea15d30a> .
_:Nf129d3261aae480f8c166b57dba5cbbe <http://schema.org/answer> "0" <http://groq.org/148eae927d3a9da2d3b5c851ab514977b87bea06160bca8c5ef29117ea15d30a> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060</page1>\n        <page2>Pages : 171 CS Core : None, KA Core : None (Hours here are included in\nSociety, Ethics and the Profession Area) CS Core: 1\\. Intellectual property\nrights of programmers for programs they develop. 2\\. Plagiarism and academic\nintegrity. 3\\. Responsibility and liability of programmers regarding code they\ndevelop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work\nethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.\nExplain/understand some of the intellectual property issues relating to\nprograms. 2\\. Explain/understand when code developed by others can be used and\nproper ways of disclosing their use. 3\\. Explain/understand the responsibility\nof programmers when developing code for an overall solution (which may be\ndeveloped by a team). 4\\. Explain/understand one or more codes of conduct\napplicable to programmers.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/148eae927d3a9da2d3b5c851ab514977b87bea06160bca8c5ef29117ea15d30a> .
<http://example.org/course/UE_X31T060> <http://example.org/has_schema_type> _:Nf129d3261aae480f8c166b57dba5cbbe <http://groq.org/148eae927d3a9da2d3b5c851ab514977b87bea06160bca8c5ef29117ea15d30a> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/148eae927d3a9da2d3b5c851ab514977b87bea06160bca8c5ef29117ea15d30a> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1a191cf4f1b56453111d974e64678b60f64cdcbdad9dc051a6787dc2f39a504f> .
_:N2e8e223b74444003828aa4374a50f587 <http://schema.org/explain> "Lecture focuses on language skills, not technical CS platform/programming topics" <http://groq.org/1a191cf4f1b56453111d974e64678b60f64cdcbdad9dc051a6787dc2f39a504f> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:N2e8e223b74444003828aa4374a50f587 <http://groq.org/1a191cf4f1b56453111d974e64678b60f64cdcbdad9dc051a6787dc2f39a504f> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/1a191cf4f1b56453111d974e64678b60f64cdcbdad9dc051a6787dc2f39a504f> .
_:N2e8e223b74444003828aa4374a50f587 <http://schema.org/answer> "0" <http://groq.org/1a191cf4f1b56453111d974e64678b60f64cdcbdad9dc051a6787dc2f39a504f> .
_:N2e8e223b74444003828aa4374a50f587 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1a191cf4f1b56453111d974e64678b60f64cdcbdad9dc051a6787dc2f39a504f> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/1a191cf4f1b56453111d974e64678b60f64cdcbdad9dc051a6787dc2f39a504f> .
_:Nd6a62a3c42b0485ebc5b29cae4152ef3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b7b749ab48afbc138f56702a4ad8e31842c8f5144d780f4b49258eea8f3c5c2a> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/b7b749ab48afbc138f56702a4ad8e31842c8f5144d780f4b49258eea8f3c5c2a> .
_:Nd6a62a3c42b0485ebc5b29cae4152ef3 <http://schema.org/explain> "The lecture covers most of the knowledge units, including universal vs existential quantifiers, first-order predicate logic, and unification algorithm, which are the core topics of the KU." <http://groq.org/b7b749ab48afbc138f56702a4ad8e31842c8f5144d780f4b49258eea8f3c5c2a> .
_:Nd6a62a3c42b0485ebc5b29cae4152ef3 <http://schema.org/answer> "1" <http://groq.org/b7b749ab48afbc138f56702a4ad8e31842c8f5144d780f4b49258eea8f3c5c2a> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/b7b749ab48afbc138f56702a4ad8e31842c8f5144d780f4b49258eea8f3c5c2a> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:Nd6a62a3c42b0485ebc5b29cae4152ef3 <http://groq.org/b7b749ab48afbc138f56702a4ad8e31842c8f5144d780f4b49258eea8f3c5c2a> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b7b749ab48afbc138f56702a4ad8e31842c8f5144d780f4b49258eea8f3c5c2a> .
_:N577f8139ff0e4c5fa8acf5de4b26679d <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
_:N6d7ec28d7a1745c9972fc0afcadf50e9 <http://example.org/has_chunk> "Pages: TBD\nHOURS\n    CS Core = TBD\n    KA Core = TBD\n\nSE-Formal Methods: Core Concepts\nCS Core:\n1. Placeholder topic 1\n2. Placeholder topic 2\n3. Placeholder topic 3\n\nKA Core:\n4. Placeholder advanced topic 1\n5. Placeholder advanced topic 2\n\nIllustrative Learning Outcomes:\n1. Explain key concepts of SE-Formal Methods.\n2. Apply principles in practical scenarios.\n3. Analyze the importance of this topic in computing." <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
_:N6d7ec28d7a1745c9972fc0afcadf50e9 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
<http://example.org/course/UE_X32T060> <http://example.org/is_aligned_with> _:N6d7ec28d7a1745c9972fc0afcadf50e9 <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
<http://example.org/faiss> <http://example.org/input> "Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_X32T060" <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
<http://example.org/course/UE_X32T060> <http://example.org/is_aligned_with> _:N577f8139ff0e4c5fa8acf5de4b26679d <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
_:N577f8139ff0e4c5fa8acf5de4b26679d <http://example.org/has_chunk> ". Techniques for learning and mastering a platform-specific programming language \n \nIllustrative Learning Outcomes: \nCS Core: \n1. List the constraints of mobile programming. \n2. List the characteristics of scripting languages. \n3. Describe the three-tier model of web programming.  \n4. Describe how the state is maintained in web programming." <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
_:Nd517d8905d1a49e6906ea525febd4f90 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
<http://example.org/course/UE_X32T060> <http://example.org/is_aligned_with> _:Nd517d8905d1a49e6906ea525febd4f90 <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
_:Nd517d8905d1a49e6906ea525febd4f90 <http://example.org/has_score> "0.6353462"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
_:N6d7ec28d7a1745c9972fc0afcadf50e9 <http://example.org/has_score> "0.63506424"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
_:N577f8139ff0e4c5fa8acf5de4b26679d <http://example.org/has_score> "0.6427871"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
_:Nd517d8905d1a49e6906ea525febd4f90 <http://example.org/has_chunk> ". Examples of use: POS tagging and morphology\n8. Information retrieval (See also: DM-Unstructured)\na. Vector space model\ni. TF & IDF\nb. Precision and recall\n9. Information extraction\n10. Language translation\n11. Text classification, categorization\na. Bag of words model\n12. Deep learning for NLP (See also: AI-ML)\na. RNNs\nb. Transformers\nc. Multi-modal embeddings (e.g., images + text)\nd. Generative language models\nIllustrative Learning Outcomes:\n1" <http://faiss.org/aedd3d79bb5d99bec12f537c18727ffe9db3723510fcfe987ef2b71d0d4ceace> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/4a602876c6c9c89404b5876979a096db6bc542edf7ffa41067ccb4b3e3627c58> .
_:Nde8c6abebee042d9abe2b3974948a58e <http://schema.org/explain> "The lecture covers most of the knowledge units, including Godel's enumeration, recursive functions, and logical programming concepts, indicating a substantial coverage of the KU." <http://groq.org/4a602876c6c9c89404b5876979a096db6bc542edf7ffa41067ccb4b3e3627c58> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:Nde8c6abebee042d9abe2b3974948a58e <http://groq.org/4a602876c6c9c89404b5876979a096db6bc542edf7ffa41067ccb4b3e3627c58> .
_:Nde8c6abebee042d9abe2b3974948a58e <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/4a602876c6c9c89404b5876979a096db6bc542edf7ffa41067ccb4b3e3627c58> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/4a602876c6c9c89404b5876979a096db6bc542edf7ffa41067ccb4b3e3627c58> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/4a602876c6c9c89404b5876979a096db6bc542edf7ffa41067ccb4b3e3627c58> .
_:Nde8c6abebee042d9abe2b3974948a58e <http://schema.org/answer> "1" <http://groq.org/4a602876c6c9c89404b5876979a096db6bc542edf7ffa41067ccb4b3e3627c58> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:N6967338f05d747b8a6ff41f4d02d751b <http://groq.org/f649bf8bdf63d7b7b31c0ab3cb9535b2daf3bf6cb5968ca5a67011ec1509b357> .
_:N6967338f05d747b8a6ff41f4d02d751b <http://schema.org/explain> "Lecture covers basic automata topics but lacks coverage of decidability, undecidability proofs, and advanced computability theory required by KU." <http://groq.org/f649bf8bdf63d7b7b31c0ab3cb9535b2daf3bf6cb5968ca5a67011ec1509b357> .
_:N6967338f05d747b8a6ff41f4d02d751b <http://schema.org/answer> "0" <http://groq.org/f649bf8bdf63d7b7b31c0ab3cb9535b2daf3bf6cb5968ca5a67011ec1509b357> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/f649bf8bdf63d7b7b31c0ab3cb9535b2daf3bf6cb5968ca5a67011ec1509b357> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages:93-95 HOURS CS Core = 9 KA Core = 23 AL-Models: Computational Models and\nFormal Languages CS Core: 1\\. Formal automata a. Finite State b. Pushdown c.\nLinear Bounded d. Turing Machine 2\\. Formal languages, grammars and Chomsky\nHierarchy (See also: FPL-Translation, FPL-Syntax) a. Regular (Type-3) i.\nRegular Expressions b. Context-Free (Type-2) c. Context-Sensitive (Type-1) d.\nRecursively Enumerable (Type-0) 3\\. Relations among formal automata,\nlanguages, and grammars 4\\. Decidability, (un)computability, and halting 5\\.\nThe Church-Turing thesis 6\\. Algorithmic correctness a. Invariants (e.g., in\niteration, recursion, tree search) KA Core: 7\\. Deterministic and\nnondeterministic automata 8\\. Pumping Lemma proofs a. Proof of Finite\nState/Regular-Language limitation b. Pushdown Automata/Context-Free-Language\nlimitation 9\\. Decidability a. Arithmetization and diagonalization 10\\.\nReducibility and reductions 11\\. Time complexity based on Turing Machine 12\\.\nSpace complexity (e.g., Pspace, Savitch's Theorem) 13\\. Equivalent models of\nalgorithmic computation a. Turing Machines and Variations (e.g., multi-tape,\nnon-deterministic) b. Lambda Calculus (See also: FPL-Functional) c. Mu-\nRecursive Functions Non-core: 14\\. Quantum computation (See also: AR-Quantum)\na. Postulates of quantum mechanics i. State space 94 ii. State evolution iii.\nState composition iv. State measurement b. Column vector representations of\nqubits c. Matrix representations of quantum operations d. Simple quantum gates\n(e.g., XNOT, CNOT) Illustrative Learning Outcomes: CS Core: 1\\. For each\nformal automaton in this unit: a. Explain its definition comparing its\ncharacteristics with this unit's other automata, b. Using an example, explain\nstep-by-step how the automaton operates on input including whether it accepts\nthe associated input, c. Explain an example of inputs that can and cannot be\naccepted by the automaton. 2\\. Given a problem, develop an appropriate\nautomaton that addresses the problem. 3\\. Develop a regular expression for a\ngiven regular language expressed in natural language. 4\\. Explain the\ndifference between regular expressions (Type-3 acceptors) and the regular\nexpressions (Type-2 acceptors) used in programming languages. 5\\. For each\nformal model in this unit: a. Explain its definition comparing its\ncharacteristics with the others in this unit, b. Explain example inputs that\nare and cannot be accepted by the language/grammar. 6\\. Explain a universal\nTuring Machine and its operation. 7\\. Present to an audience of co-workers and\nmanagers the impossibility of providing them a program that checks all other\nprograms, including some seemingly simple ones, for infinite loops including\nan explanation of the Halting problem, why it has no algorithmic solution, and\nits significance for real-world algorithmic computation. 8\\. Explain examples\nof classic uncomputable problems. 9\\. Explain the Church-Turing Thesis and its\nsignificance for algorithmic computation. 10\\. Explain how (loop) invariants\ncan be used to prove the correctness of an algorithm. Illustrative Learning\nOutcomes: KA Core: 11\\. For each formal automaton in this unit explain\n(compare/contrast) its deterministic and nondeterministic capabilities. 12\\.\nApply pumping lemmas, or alternative means, to prove the limitations of Finite\nState and Pushdown automata. 13\\. Apply arithmetization and diagonalization to\nprove the Halting Problem for Turing Machines is Undecidability. 14\\. Given a\nknown undecidable language, apply a mapping reduction or computational history\nto prove that another language is undecidable. 15\\. Convert among equivalently\npowerful notations for a language, including among DFAs, NFAs, and regular\nexpressions, and between PDAs and CFGs. 16\\. Explain Rice's theorem and its\nsignificance. 95 17\\. Explain an example proof of a problem that is\nuncomputable by reducing a classic known uncomputable problem to it. 18\\.\nExplain the Primitive and General Recursive functions (zero, successor,\nselection, primitive recursion, composition, and Mu), their significance, and\nTuring Machine implementations. 19\\. Explain how computation is performed in\nLambda Calculus (e.g., Alpha conversion and Beta reduction) Non-core: 20\\. For\na quantum system give examples that explain the following postulates. a. State\nSpace - system state represented as a unit vector in Hilbert space, b. State\nEvolution - the use of unitary operators to evolve system state, c. State\nComposition - the use of tensor product to compose systems states, d. State\nMeasurement - the probabilistic output of measuring a system state. 21\\.\nExplain the operation of a quantum XNOT or CNOT gate on a quantum bit\nrepresented as a matrix and column vector, respectively</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/f649bf8bdf63d7b7b31c0ab3cb9535b2daf3bf6cb5968ca5a67011ec1509b357> .
_:N6967338f05d747b8a6ff41f4d02d751b <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/f649bf8bdf63d7b7b31c0ab3cb9535b2daf3bf6cb5968ca5a67011ec1509b357> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/f649bf8bdf63d7b7b31c0ab3cb9535b2daf3bf6cb5968ca5a67011ec1509b357> .
_:N23544c48a0ab4410b3229d0451b0e8e5 <http://schema.org/answer> "0" <http://groq.org/c24f73704dfec6e2a194f0dd7c6c38efd6de8202001c9ec6b1fd25b08e880aa4> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:N23544c48a0ab4410b3229d0451b0e8e5 <http://groq.org/c24f73704dfec6e2a194f0dd7c6c38efd6de8202001c9ec6b1fd25b08e880aa4> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/c24f73704dfec6e2a194f0dd7c6c38efd6de8202001c9ec6b1fd25b08e880aa4> .
_:N23544c48a0ab4410b3229d0451b0e8e5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/c24f73704dfec6e2a194f0dd7c6c38efd6de8202001c9ec6b1fd25b08e880aa4> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/c24f73704dfec6e2a194f0dd7c6c38efd6de8202001c9ec6b1fd25b08e880aa4> .
_:N23544c48a0ab4410b3229d0451b0e8e5 <http://schema.org/explain> "The lecture focuses on data structures and algorithms, while the KU covers logic programming, with no overlap." <http://groq.org/c24f73704dfec6e2a194f0dd7c6c38efd6de8202001c9ec6b1fd25b08e880aa4> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/c24f73704dfec6e2a194f0dd7c6c38efd6de8202001c9ec6b1fd25b08e880aa4> .
_:N9b53cf2d463e4f5ea158bcf64372e893 <http://schema.org/answer> "1" <http://groq.org/ef9c0c5bd82cdbe981b5652ea820b54e0895c103f516eabd28c2cf68f9e4c42f> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/ef9c0c5bd82cdbe981b5652ea820b54e0895c103f516eabd28c2cf68f9e4c42f> .
_:N9b53cf2d463e4f5ea158bcf64372e893 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including topics such as optimization, calculus, and problem-solving, which align with the learning outcomes described in the KU." <http://groq.org/ef9c0c5bd82cdbe981b5652ea820b54e0895c103f516eabd28c2cf68f9e4c42f> .
<http://example.org/course/UE_X32I030> <http://example.org/has_schema_type> _:N9b53cf2d463e4f5ea158bcf64372e893 <http://groq.org/ef9c0c5bd82cdbe981b5652ea820b54e0895c103f516eabd28c2cf68f9e4c42f> .
_:N9b53cf2d463e4f5ea158bcf64372e893 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/ef9c0c5bd82cdbe981b5652ea820b54e0895c103f516eabd28c2cf68f9e4c42f> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I030" <http://groq.org/ef9c0c5bd82cdbe981b5652ea820b54e0895c103f516eabd28c2cf68f9e4c42f> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Recherche opérationnelle Objectif: (résultats d'apprentissage)\n(A-M)\n- Connaître les notions de calendrier au plus tôt, calendrier au plus tard pour un ensemble de\ntâche, et la notion de marge d'une tâche dans le contexte d'un problème d'ordonnancement simple\n(M)\n- Etre capable de déterminer un calendrier au plus tôt, un calendrier au plus tard et les marges\ndes tâches, dans le contexte d'un problème d'ordonnancement simple (A)\n- Introduction à la problématique de l'optimisation multi-objectif : connaissance de la notion de\nsolution efficace, limite de l'utilisation de la somme pondérée (I)\n- Utilisation d'un langage de modélisation algébrique : comprendre la différence entre un modèle\nexplicite et un modèle implicite (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'écrire un modèle implicite\n(A)\n- Utilisation d'un langage de modélisation algébrique : comprendre l'utilisation d'une structure de\nmatrice creuse pour décrire des contraintes (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'utiliser une structure de\nmatrice creuse pour décrire des contraintes (A)\n- Utilisation d'un langage de modélisation algébrique : être capable de détermine si le choix d'une\nmatrice creuse est pertinent ou pas pour décrire des contraintes (A)\n- Utilisation d'un solveur MIP : comprendre l'utilisation d'un solveur MIP en tant que bibliothèque\nde fonction et être capable de l'utiliser pour résoudre un unique problème de programmation\nlinéaire en variables mixtes (A)\n- Utilisation d'un solveur MIP : être capable d'implémenter un algorithme donné, en faisant des\nappels successifs à un solveur MIP pour résoudre un problème de programmation linéaire en\nvariables mixtes (A) Course content: fondamental :\n- Course name: http://example.org/course/UE_X32I030</page1>\n        <page2>Pages: 192-194 HOURS CS Core = 0 KA Core = 40 MSF-Calculus KA Core: 1\\.\nSequences, series, limits 2\\. Single-variable derivatives: definition,\ncomputation rules (chain rule etc.), derivatives of important functions,\napplications 3\\. Single-variable integration: definition, computation rules,\nintegrals of important functions, fundamental theorem of calculus, definite vs\nindefinite, applications (including in probability) 4\\. Parametric and polar\nrepresentations 5\\. Taylor series 6\\. Multivariate calculus: partial\nderivatives, gradient, chain-rule, vector valued functions, 7\\. Optimization:\nconvexity, global vs local minima, gradient descent, constrained optimization,\nand Lagrange multipliers. 8\\. Ordinary Differential Equations (ODEs):\ndefinition, Euler method, applications to simulation, Monte Carlo integration\n9\\. CS applications: gradient descent for machine learning, forward and\ninverse kinematics, applications of calculus to probability Note: the calculus\ntopics listed above are aligned with computer science goals rather than with\ntraditional calculus courses. For example, multivariate calculus is often a\ncourse by itself, but computer science undergraduates only need parts of it\nfor machine learning. Illustrative Learning Outcomes: KA Core: 1\\. Sequences,\nseries, limits a. Explain the difference between infinite sets and sequences.\nb. Explain the formal definition of a limit. c. Derive the limit for examples\nof sequences and series. d. Explain convergence and divergence. e. Apply\nL'Hospital's rule and other approaches to resolving limits. 2\\. Single-\nvariable derivatives: definition, computation rules (chain rule etc.),\nderivatives of important functions, applications a. Explain a derivative in\nterms of limits. b. Explain derivatives as functions. c. Perform elementary\nderivative calculations from limits. d. Apply sum, product, and quotient\nrules. e. Work through examples with important functions. 3\\. Single-variable\nintegration: definition, computation rules, integrals of important functions,\nfundamental theorem of calculus, definite vs indefinite, applications\n(including in probability) a. Explain the definitions of definite and\nindefinite integrals. b. Apply integration rules to examples with important\nfunctions. c. Explore the use of the fundamental theorem of calculus. d. Apply\nintegration to problems. 4\\. Parametric and polar representations a. Apply\nparametric representations of important curves. b. Apply polar\nrepresentations. 5\\. Taylor series a. Derive Taylor series for some important\nfunctions. b. Apply the Taylor series to approximations. 6\\. Multivariate\ncalculus: partial derivatives, gradient, chain-rule, vector valued functions,\napplications to optimization, convexity, global vs local minima. a. Compute\npartial derivatives and gradients. b. Work through examples with vector-valued\nfunctions with gradient notation. c. Explain applications to optimization. 7\\.\nODEs: definition, Euler method, applications to simulation a. Apply the Euler\nmethod to integration. b. Apply the Euler method to a single-variable\ndifferential equation. c. Apply the Euler method to multiple variables in an\nODE.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/ef9c0c5bd82cdbe981b5652ea820b54e0895c103f516eabd28c2cf68f9e4c42f> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais pour la communication scientifique (info) Objectif: (résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication Course content: scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s Course name: http://example.org/course/UE_X31A060</page1>\n        <page2>Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing\nNon-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.\nCFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.\nRepresenting meaning/Semantics a. Logic-based knowledge representations b.\nSemantic roles c. Temporal representations d. Beliefs, desires, and intentions\n4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.\nExamples of use: POS tagging and morphology 8\\. Information retrieval (See\nalso: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and\nrecall 9\\. Information extraction 10\\. Language translation 11\\. Text\nclassification, categorization a. Bag of words model 12\\. Deep learning for\nNLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,\nimages + text) d. Generative language models Illustrative Learning Outcomes:\n1\\. Define and contrast deterministic and stochastic grammars, providing\nexamples to show the adequacy of each. 2\\. Simulate, apply, or implement\nclassic and stochastic algorithms for parsing natural language. 3\\. Identify\nthe challenges of representing meaning. 4\\. List the advantages of using\nstandard corpora. Identify examples of current corpora for a variety of NLP\ntasks. 5\\. Identify techniques for information retrieval, language\ntranslation, and text classification. 6\\. Implement a TF/IDF transform, use it\nto extract features from a corpus, and train an off-the-shelf machine learning\nalgorithm using those features to do text classification.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/7ead6187259734bf72b02235d51a518890aa30a4f1641c8592134dd91faf60e1> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/7ead6187259734bf72b02235d51a518890aa30a4f1641c8592134dd91faf60e1> .
_:N0364b13354fb4f0486d3ee3847751373 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/7ead6187259734bf72b02235d51a518890aa30a4f1641c8592134dd91faf60e1> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31A060" <http://groq.org/7ead6187259734bf72b02235d51a518890aa30a4f1641c8592134dd91faf60e1> .
_:N0364b13354fb4f0486d3ee3847751373 <http://schema.org/explain> "The lecture focuses on communication skills in English for scientific purposes, whereas the KU covers Natural Language Processing topics, such as grammars, parsing, semantics, and machine learning." <http://groq.org/7ead6187259734bf72b02235d51a518890aa30a4f1641c8592134dd91faf60e1> .
_:N0364b13354fb4f0486d3ee3847751373 <http://schema.org/answer> "0" <http://groq.org/7ead6187259734bf72b02235d51a518890aa30a4f1641c8592134dd91faf60e1> .
<http://example.org/course/UE_X31A060> <http://example.org/has_schema_type> _:N0364b13354fb4f0486d3ee3847751373 <http://groq.org/7ead6187259734bf72b02235d51a518890aa30a4f1641c8592134dd91faf60e1> .
_:Nd3b41b8c1135448882c20c4e7a2c3ffa <http://schema.org/answer> "1" <http://groq.org/7b545ad87e3ebb35d1bb926c6aab16a3250aa47614c83993f57ee2d552f9a079> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/7b545ad87e3ebb35d1bb926c6aab16a3250aa47614c83993f57ee2d552f9a079> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/7b545ad87e3ebb35d1bb926c6aab16a3250aa47614c83993f57ee2d552f9a079> .
_:Nd3b41b8c1135448882c20c4e7a2c3ffa <http://schema.org/explain> "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." <http://groq.org/7b545ad87e3ebb35d1bb926c6aab16a3250aa47614c83993f57ee2d552f9a079> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:Nd3b41b8c1135448882c20c4e7a2c3ffa <http://groq.org/7b545ad87e3ebb35d1bb926c6aab16a3250aa47614c83993f57ee2d552f9a079> .
_:Nd3b41b8c1135448882c20c4e7a2c3ffa <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/7b545ad87e3ebb35d1bb926c6aab16a3250aa47614c83993f57ee2d552f9a079> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/7b545ad87e3ebb35d1bb926c6aab16a3250aa47614c83993f57ee2d552f9a079> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Anglais Professionnel Informatique Objectif: (résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation Course content: d’une lettre de motivation Course name: http://example.org/course/UE_X32A060</page1>\n        <page2>Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/cacb78869849a80c2ed94b620422bd2a1e2702f9c29e64e658a0121b73f26f99> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/cacb78869849a80c2ed94b620422bd2a1e2702f9c29e64e658a0121b73f26f99> .
_:Nabb0a016941a42628568d170d9362ac0 <http://schema.org/explain> "The lecture focuses on professional English for IT, while the KU covers computer science development platforms, programming languages, and constraints, with no apparent overlap." <http://groq.org/cacb78869849a80c2ed94b620422bd2a1e2702f9c29e64e658a0121b73f26f99> .
<http://example.org/course/UE_X32A060> <http://example.org/has_schema_type> _:Nabb0a016941a42628568d170d9362ac0 <http://groq.org/cacb78869849a80c2ed94b620422bd2a1e2702f9c29e64e658a0121b73f26f99> .
_:Nabb0a016941a42628568d170d9362ac0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/cacb78869849a80c2ed94b620422bd2a1e2702f9c29e64e658a0121b73f26f99> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32A060" <http://groq.org/cacb78869849a80c2ed94b620422bd2a1e2702f9c29e64e658a0121b73f26f99> .
_:Nabb0a016941a42628568d170d9362ac0 <http://schema.org/answer> "0" <http://groq.org/cacb78869849a80c2ed94b620422bd2a1e2702f9c29e64e658a0121b73f26f99> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I050" <http://groq.org/89139e8cdad6964e0ffdd39f05b741f86f6ef750c83d53ce2f27cd1a9fbc4f07> .
_:N02f3e78127cb48bcbb7da36eb0c9ffb3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/89139e8cdad6964e0ffdd39f05b741f86f6ef750c83d53ce2f27cd1a9fbc4f07> .
_:N02f3e78127cb48bcbb7da36eb0c9ffb3 <http://schema.org/explain> "Covers logic components, assembly, pipelining, and cache but lacks OS layer details and scaling concepts." <http://groq.org/89139e8cdad6964e0ffdd39f05b741f86f6ef750c83d53ce2f27cd1a9fbc4f07> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Architecture des ordinateurs Objectif: (résultats d'apprentissage)\nl'implémentation des éléments logiques de base (mux/demux, registres, ...);\n• connaître les principes de la programmation dans un langage d'assemblage et savoir traduire les\nappels de fonctions et de procédures en respectant les conventions dictées par l'environnement;\n• savoir mettre en oeuvre un processeur monocycle simple en définissant les chemins de données\nde son jeu d'instructions;\n• connaître les principes sous-tendant les processeurs multicycles et les architectures pipelinées\n• connaître la notion de cache mémoire et ses différentes implémentations, et en connaître les\nimpacts sur les algorithmes. Course content: données et de\ncontrôle).\n* Les mémoires: communication par bus, principe de localité, cache, virtualisation\n* Multiprocesseurs, multicœurs et GPU [optionnel, en fonction du temps disponible] Course name: http://example.org/course/UE_X31I050</page1>\n        <page2>Pages : 230-231 CS Core : 3, KA Core : 0 CS Core: 1\\. Basic building blocks\nand components of a computer (gates, flip-flops, registers, interconnections;\ndatapath + control + memory) 2\\. Hardware as a computational paradigm:\nFundamental logic building blocks; Logic expressions, minimization, sum of\nproduct forms (See also: AR-Logic) 3\\. Programming abstractions, interfaces,\nuse of libraries (See also: PDC-Programs) 4\\. Distinction and interaction\nbetween application and OS services, remote procedure call (See also: OS-\nPurpose) 5\\. Basic concept of pipelining, overlapped processing stages (See\nalso: AR-Organization) 6\\. Basic concept of scaling: performance vs problem\nsize Illustrative Learning Outcomes: CS Core: 1\\. Describe the basic building\nblocks of computers and their role in the historical development of computer\narchitecture. 2\\. Design a simple logic circuit using the fundamental building\nblocks of logic design to solve a simple problem (e.g., adder). 3\\. Describe\nhow computing systems are constructed of layers upon layers, based on\nseparation of concerns, with well-defined interfaces, hiding details of low\nlayers from the higher layers. 4\\. Describe that hardware, OS, VM, and\napplication are additional layers of interpretation/processing. 5\\. Describe\nthe mechanisms of how errors are detected, signaled back, and handled through\nthe layers. 6\\. Construct a simple program (e.g., a TCP client/server) using\nmethods of layering, error detection and recovery, and reflection of error\nstatus across layers. 7\\. Identify bugs in a layered program by using tools\nfor program tracing, single stepping, and debugging. 8\\. Understand the\nconcept of strong vs weak scaling, i.e., how performance is affected by the\nscale of the problem vs the scale of resources to solve the problem. This can\nbe motivated by simple, real-world examples.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/89139e8cdad6964e0ffdd39f05b741f86f6ef750c83d53ce2f27cd1a9fbc4f07> .
_:N02f3e78127cb48bcbb7da36eb0c9ffb3 <http://schema.org/answer> "1" <http://groq.org/89139e8cdad6964e0ffdd39f05b741f86f6ef750c83d53ce2f27cd1a9fbc4f07> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/89139e8cdad6964e0ffdd39f05b741f86f6ef750c83d53ce2f27cd1a9fbc4f07> .
<http://example.org/course/UE_X31I050> <http://example.org/has_schema_type> _:N02f3e78127cb48bcbb7da36eb0c9ffb3 <http://groq.org/89139e8cdad6964e0ffdd39f05b741f86f6ef750c83d53ce2f27cd1a9fbc4f07> .
_:N79ba8314cb814ebdaba76f5f84aba351 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/f309a811be2be5025581233c48e59f61b201e80fcd49017655751fa3a9f7faca> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I020" <http://groq.org/f309a811be2be5025581233c48e59f61b201e80fcd49017655751fa3a9f7faca> .
_:N79ba8314cb814ebdaba76f5f84aba351 <http://schema.org/explain> "The lecture focuses on tree data structures and graph theory, while the KU covers a broader range of topics including sets, relations, functions, recursive definitions, proof techniques, permutations, combinations, counting, modular arithmetic, and logic. The lecture does not substantially cover the full scope of the KU." <http://groq.org/f309a811be2be5025581233c48e59f61b201e80fcd49017655751fa3a9f7faca> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Algorithmique et Structures de données 3 Objectif: (résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ; Course content: Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc. Course name: http://example.org/course/UE_X31I020</page1>\n        <page2>Pages: 187-188 HOURS CS Core = 29 KA Core = 11 MSF-Discrete: Discrete\nMathematics CS Core: 1\\. Sets, relations, functions, cardinality 2\\. Recursive\nmathematical definitions 3\\. Proof techniques (induction, proof by\ncontradiction) 4\\. Permutations, combinations, counting, pigeonhole principle\n5\\. Modular arithmetic 6\\. Logic: truth tables, connectives (operators),\ninference rules, formulas, normal forms, simple predicate logic 7\\. Graphs:\nbasic definitions 8\\. Order notation Illustrative Learning Outcomes: CS Core:\n1\\. Sets, Relations, and Functions, Cardinality a. Explain with examples the\nbasic terminology of functions, relations, and sets. b. Perform the operations\nassociated with sets, functions, and relations. c. Relate practical examples\nto the appropriate set, function, or relation model, and interpret the\nassociated operations and terminology in context. d. Calculate the size of a\nfinite set, including making use of the sum and product rules and inclusion-\nexclusion principle. e. Explain the difference between finite, countable, and\nuncountable sets. 2\\. Recursive mathematical definitions a. Apply recursive\ndefinitions of sequences or structures (e.g., Fibonacci numbers, linked lists,\nparse trees, fractals). b. Formulate inductive proofs of statements about\nrecursive definitions. c. Solve a variety of basic recurrence relations. d.\nAnalyze a problem to determine underlying recurrence relations. e. Given a\nrecursive/iterative code snippet, describe its underlying recurrence relation,\nhypothesize a closed form for the recurrence relation, and prove the\nhypothesis correct (usually, using induction). 3\\. Proof Techniques a.\nIdentify the proof technique used in a given proof. b. Outline the basic\nstructure of each proof technique (direct proof, proof by contradiction, and\ninduction) described in this unit. c. Apply each of the proof techniques\n(direct proof, proof by contradiction, and induction) correctly in the\nconstruction of a sound argument. d. Determine which type of proof is best for\na given problem. e. Explain the parallels between ideas of mathematical and/or\nstructural induction to recursion and recursively defined structures. f.\nExplain the relationship between weak and strong induction and give examples\nof the appropriate use of each. 4\\. Permutations, combinations, and counting\na. Apply counting arguments, including sum and product rules, inclusion-\nexclusion principle, and arithmetic/geometric progressions. b. Apply the\npigeonhole principle in the context of a formal proof. c. Compute permutations\nand combinations of a set, and interpret the meaning in the context of the\nspecific application. d. Map real-world applications to appropriate counting\nformalisms, such as determining the number of ways to arrange people around a\ntable, subject to constraints on the seating arrangement, or the number of\nways to determine certain hands in cards (e.g., a full house). 5\\. Modular\narithmetic a. Perform computations involving modular arithmetic. b. Explain\nthe notion of the greatest common divisor and apply Euclid's algorithm to\ncompute it. 6\\. Logic a. Convert logical statements from informal language to\npropositional and predicate logic expressions. b. Apply formal methods of\nsymbolic propositional and predicate logic, such as calculating validity of\nformulae, computing normal forms, or negating a logical statement. c. Use the\nrules of inference to construct proofs in propositional and predicate logic.\nd. Describe how symbolic logic can be used to model real-life situations or\napplications, including those arising in computing contexts such as software\nanalysis (e.g., program correctness), database queries, and algorithms. e.\nApply formal logic proofs and/or informal, but rigorous, logical reasoning to\nreal problems, such as predicting the behavior of software or solving problems\nsuch as puzzles. f. Describe the strengths and limitations of propositional\nand predicate logic. g. Explain what it means for a proof in propositional (or\npredicate) logic to be valid. 7\\. Graphs a. Illustrate by example the basic\nterminology of graph theory, and some of the properties and special cases of\ntypes of graphs, including trees. b. Demonstrate different traversal methods\nfor trees and graphs, including pre-, post-, and in-order traversal of trees,\nalong with breadth-first and depth-first search for graphs. c. Model a variety\nof real-world problems in computer science using appropriate forms of graphs\nand trees, such as representing a network topology, the organization of a\nhierarchical file system, or a social network. d. Show how concepts from\ngraphs and trees appear in data structures, algorithms, proof techniques\n(structural induction), and counting. KA Core: The recommended topics are the\nsame between CS core and KA-core, but with far more hours, the KA-core can\ncover these topics in depth and might include more computing-related\napplications.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/f309a811be2be5025581233c48e59f61b201e80fcd49017655751fa3a9f7faca> .
<http://example.org/course/UE_X31I020> <http://example.org/has_schema_type> _:N79ba8314cb814ebdaba76f5f84aba351 <http://groq.org/f309a811be2be5025581233c48e59f61b201e80fcd49017655751fa3a9f7faca> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/f309a811be2be5025581233c48e59f61b201e80fcd49017655751fa3a9f7faca> .
_:N79ba8314cb814ebdaba76f5f84aba351 <http://schema.org/answer> "0" <http://groq.org/f309a811be2be5025581233c48e59f61b201e80fcd49017655751fa3a9f7faca> .
<http://example.org/course/UE_X31T060> <http://example.org/is_aligned_with> _:Nb3b290d1f10a4cbdac464ba5d1244d76 <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
<http://example.org/course/UE_X31T060> <http://example.org/is_aligned_with> _:Nf3c735b8567a4e5ba9475c002744e5a3 <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:Nb3b290d1f10a4cbdac464ba5d1244d76 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-ML_Machine_Learning.txt> <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
<http://example.org/course/UE_X31T060> <http://example.org/is_aligned_with> _:N1dbf04eeb8154654bd438cad8ff65f44 <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:Nf3c735b8567a4e5ba9475c002744e5a3 <http://example.org/has_score> "0.6692901"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:N1dbf04eeb8154654bd438cad8ff65f44 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Testing_and_Quality_Assurance.txt> <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:Nf3c735b8567a4e5ba9475c002744e5a3 <http://example.org/has_chunk> "Illustrative Learning Outcomes: \nCS Core: \n1. Explain/understand some of the intellectual property issues relating to programs.  \n2. Explain/understand when code developed by others can be used and proper ways of disclosing their use. \n3. Explain/understand the responsibility of programmers when developing code for an overall solution (which may be developed by a team). \n4. Explain/understand one or more codes of conduct applicable to programmers." <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:Nb3b290d1f10a4cbdac464ba5d1244d76 <http://example.org/has_chunk> ". Medicine and health\nb. Economics\nc. Education\nd. Vision\ne. Natural language\nf. Robotics\ng. Game play\nh. Data mining (Cross-reference DM/Data Analytics)\n35. Ethics for Machine Learning\na. Continued focus on real data, real scenarios, and case studies (See also: SEP-Context)\nb. In depth exploration of dataset/algorithmic/evaluation bias, data privacy, and fairness (See also:\nSEP-Privacy, SEP-Context)\nc. Trust / explainability\nIllustrative Learning Outcomes:\n1" <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:Nb3b290d1f10a4cbdac464ba5d1244d76 <http://example.org/has_score> "0.65111214"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:N1dbf04eeb8154654bd438cad8ff65f44 <http://example.org/has_chunk> "Pages: TBD\nHOURS\n    CS Core = TBD\n    KA Core = TBD\n\nSE-Testing and Quality Assurance: Core Concepts\nCS Core:\n1. Placeholder topic 1\n2. Placeholder topic 2\n3. Placeholder topic 3\n\nKA Core:\n4. Placeholder advanced topic 1\n5. Placeholder advanced topic 2\n\nIllustrative Learning Outcomes:\n1. Explain key concepts of SE-Testing and Quality Assurance.\n2. Apply principles in practical scenarios.\n3. Analyze the importance of this topic in computing." <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:Nf3c735b8567a4e5ba9475c002744e5a3 <http://example.org/has_source> <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
<http://example.org/faiss> <http://example.org/input> "Label: Ouverture professionnelle - Informatique Objectif: (résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université Course content: 4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence. Course name: http://example.org/course/UE_X31T060" <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
_:N1dbf04eeb8154654bd438cad8ff65f44 <http://example.org/has_score> "0.654318"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8dc9722dd57094a0695c7735d93cefed6eccead3ff94470bac69de9d32789526> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/ef27f7da63c431ed2504e9c25d498f60fd03d9e1c707ecc283dd3163eb48de06> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I010" <http://groq.org/ef27f7da63c431ed2504e9c25d498f60fd03d9e1c707ecc283dd3163eb48de06> .
_:Nc04b49f6813d460090184a01e7e14c96 <http://schema.org/explain> "The lecture focuses on algorithm verification and correctness, lacking substantial coverage of formal automata, languages, and computability topics in the KU." <http://groq.org/ef27f7da63c431ed2504e9c25d498f60fd03d9e1c707ecc283dd3163eb48de06> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Etude des algorithmes Objectif: (résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe Course content: Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison. Course name: http://example.org/course/UE_X31I010</page1>\n        <page2>Pages:93-95 HOURS CS Core = 9 KA Core = 23 AL-Models: Computational Models and\nFormal Languages CS Core: 1\\. Formal automata a. Finite State b. Pushdown c.\nLinear Bounded d. Turing Machine 2\\. Formal languages, grammars and Chomsky\nHierarchy (See also: FPL-Translation, FPL-Syntax) a. Regular (Type-3) i.\nRegular Expressions b. Context-Free (Type-2) c. Context-Sensitive (Type-1) d.\nRecursively Enumerable (Type-0) 3\\. Relations among formal automata,\nlanguages, and grammars 4\\. Decidability, (un)computability, and halting 5\\.\nThe Church-Turing thesis 6\\. Algorithmic correctness a. Invariants (e.g., in\niteration, recursion, tree search) KA Core: 7\\. Deterministic and\nnondeterministic automata 8\\. Pumping Lemma proofs a. Proof of Finite\nState/Regular-Language limitation b. Pushdown Automata/Context-Free-Language\nlimitation 9\\. Decidability a. Arithmetization and diagonalization 10\\.\nReducibility and reductions 11\\. Time complexity based on Turing Machine 12\\.\nSpace complexity (e.g., Pspace, Savitch's Theorem) 13\\. Equivalent models of\nalgorithmic computation a. Turing Machines and Variations (e.g., multi-tape,\nnon-deterministic) b. Lambda Calculus (See also: FPL-Functional) c. Mu-\nRecursive Functions Non-core: 14\\. Quantum computation (See also: AR-Quantum)\na. Postulates of quantum mechanics i. State space 94 ii. State evolution iii.\nState composition iv. State measurement b. Column vector representations of\nqubits c. Matrix representations of quantum operations d. Simple quantum gates\n(e.g., XNOT, CNOT) Illustrative Learning Outcomes: CS Core: 1\\. For each\nformal automaton in this unit: a. Explain its definition comparing its\ncharacteristics with this unit's other automata, b. Using an example, explain\nstep-by-step how the automaton operates on input including whether it accepts\nthe associated input, c. Explain an example of inputs that can and cannot be\naccepted by the automaton. 2\\. Given a problem, develop an appropriate\nautomaton that addresses the problem. 3\\. Develop a regular expression for a\ngiven regular language expressed in natural language. 4\\. Explain the\ndifference between regular expressions (Type-3 acceptors) and the regular\nexpressions (Type-2 acceptors) used in programming languages. 5\\. For each\nformal model in this unit: a. Explain its definition comparing its\ncharacteristics with the others in this unit, b. Explain example inputs that\nare and cannot be accepted by the language/grammar. 6\\. Explain a universal\nTuring Machine and its operation. 7\\. Present to an audience of co-workers and\nmanagers the impossibility of providing them a program that checks all other\nprograms, including some seemingly simple ones, for infinite loops including\nan explanation of the Halting problem, why it has no algorithmic solution, and\nits significance for real-world algorithmic computation. 8\\. Explain examples\nof classic uncomputable problems. 9\\. Explain the Church-Turing Thesis and its\nsignificance for algorithmic computation. 10\\. Explain how (loop) invariants\ncan be used to prove the correctness of an algorithm. Illustrative Learning\nOutcomes: KA Core: 11\\. For each formal automaton in this unit explain\n(compare/contrast) its deterministic and nondeterministic capabilities. 12\\.\nApply pumping lemmas, or alternative means, to prove the limitations of Finite\nState and Pushdown automata. 13\\. Apply arithmetization and diagonalization to\nprove the Halting Problem for Turing Machines is Undecidability. 14\\. Given a\nknown undecidable language, apply a mapping reduction or computational history\nto prove that another language is undecidable. 15\\. Convert among equivalently\npowerful notations for a language, including among DFAs, NFAs, and regular\nexpressions, and between PDAs and CFGs. 16\\. Explain Rice's theorem and its\nsignificance. 95 17\\. Explain an example proof of a problem that is\nuncomputable by reducing a classic known uncomputable problem to it. 18\\.\nExplain the Primitive and General Recursive functions (zero, successor,\nselection, primitive recursion, composition, and Mu), their significance, and\nTuring Machine implementations. 19\\. Explain how computation is performed in\nLambda Calculus (e.g., Alpha conversion and Beta reduction) Non-core: 20\\. For\na quantum system give examples that explain the following postulates. a. State\nSpace - system state represented as a unit vector in Hilbert space, b. State\nEvolution - the use of unitary operators to evolve system state, c. State\nComposition - the use of tensor product to compose systems states, d. State\nMeasurement - the probabilistic output of measuring a system state. 21\\.\nExplain the operation of a quantum XNOT or CNOT gate on a quantum bit\nrepresented as a matrix and column vector, respectively</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/ef27f7da63c431ed2504e9c25d498f60fd03d9e1c707ecc283dd3163eb48de06> .
_:Nc04b49f6813d460090184a01e7e14c96 <http://schema.org/answer> "0" <http://groq.org/ef27f7da63c431ed2504e9c25d498f60fd03d9e1c707ecc283dd3163eb48de06> .
_:Nc04b49f6813d460090184a01e7e14c96 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/ef27f7da63c431ed2504e9c25d498f60fd03d9e1c707ecc283dd3163eb48de06> .
<http://example.org/course/UE_X31I010> <http://example.org/has_schema_type> _:Nc04b49f6813d460090184a01e7e14c96 <http://groq.org/ef27f7da63c431ed2504e9c25d498f60fd03d9e1c707ecc283dd3163eb48de06> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I040" <http://groq.org/00b40486b5c7e64693ffe13ab1b41fb5bfa0d8262ecc3d796b03cf6d46daebda> .
<http://example.org/course/UE_X31I040> <http://example.org/has_schema_type> _:N8dde9acf2e27409eabb24770951c9d23 <http://groq.org/00b40486b5c7e64693ffe13ab1b41fb5bfa0d8262ecc3d796b03cf6d46daebda> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/00b40486b5c7e64693ffe13ab1b41fb5bfa0d8262ecc3d796b03cf6d46daebda> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Réseaux et Télécoms Objectif: (résultats d'apprentissage)\n• Comprendre les mécanismes de base des protocoles de l’Internet (http, tcp, ip, arp);\n• Connaître les défis techniques et sociétaux liés aux déploiements des réseaux; Course content: de l'UE : Internet : comment ça marche.\n• Introduction : les chiffres de l'Internet, histoire et perspectives.\n• Les protocoles applicatifs (http, smtp, dns, ...)\n• Le problème du transport fiable de bout en bout. TCP.\n• Le problème du contrôle de flux et congestion. TCP. Course name: http://example.org/course/UE_X31I040</page1>\n        <page2>Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-\nFundamentals: Fundamentals CS Core: 1\\. Importance of networking in\ncontemporary computing, and associated challenges. (See also: SEPContext, SEP-\nPrivacy) 2\\. Organization of the internet (e.g., users, Internet Service\nProviders, autonomous systems, content providers, content delivery networks)\n3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles\n(application, transport, network, datalink, and physical) 5\\. Layering\nprinciples (e.g., encapsulation and hourglass model) (See also: SF-\nFoundations) 6\\. Network elements (e.g., routers, switches, hubs, access\npoints, and hosts) 7\\. Basic queueing concepts (e.g., relationship with\nlatency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS\nCore: 1\\. Articulate the organization of the internet. 2\\. List and define the\nappropriate network terminology 3\\. Describe the layered structure of a\ntypical networked architecture. 4\\. Identify the different types of complexity\nin a network (edges, core, etc.).</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/00b40486b5c7e64693ffe13ab1b41fb5bfa0d8262ecc3d796b03cf6d46daebda> .
_:N8dde9acf2e27409eabb24770951c9d23 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/00b40486b5c7e64693ffe13ab1b41fb5bfa0d8262ecc3d796b03cf6d46daebda> .
_:N8dde9acf2e27409eabb24770951c9d23 <http://schema.org/answer> "0" <http://groq.org/00b40486b5c7e64693ffe13ab1b41fb5bfa0d8262ecc3d796b03cf6d46daebda> .
_:N8dde9acf2e27409eabb24770951c9d23 <http://schema.org/explain> "The lecture covers some aspects of the KU but lacks coverage of the internet's organizational structure, switching techniques, and certain network elements." <http://groq.org/00b40486b5c7e64693ffe13ab1b41fb5bfa0d8262ecc3d796b03cf6d46daebda> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/169f9dbfd6f70106f62b2d9aebb8efd68d3b039804ec37b1fb9468276a8103dd> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/169f9dbfd6f70106f62b2d9aebb8efd68d3b039804ec37b1fb9468276a8103dd> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages:76-77 HOURS CS Core = 0 KA Core = 0 AI-LRR: Logical Representation and\nReasoning Non-core: 77 1\\. Review of propositional and predicate logic (See\nalso: MSF-Discrete) 2\\. Resolution and theorem proving (propositional logic\nonly) a. Forward chaining, backward chaining 3\\. Knowledge representation\nissues a. Description logics b. Ontology engineering 4\\. Semantic web 5\\. Non-\nmonotonic reasoning (e.g., non-classical logics, default reasoning) 6\\.\nArgumentation 7\\. Reasoning about action and change (e.g., situation and event\ncalculus) 8\\. Temporal and spatial reasoning 9\\. Logic programming a. Prolog,\nAnswer Set Programming 10\\. Rule-based Expert Systems 11\\. Semantic networks\n12\\. Model-based and Case-based reasoning Illustrative Learning Outcomes: 1\\.\nTranslate a natural language (e.g., English) sentence into a predicate logic\nstatement. 2\\. Convert a logic statement into clausal form. 3\\. Apply\nresolution to a set of logic statements to answer a query. 4\\. Compare and\ncontrast the most common models used for structured knowledge representation,\nhighlighting their strengths and weaknesses. 5\\. Identify the components of\nnon-monotonic reasoning and its usefulness as a representational mechanism for\nbelief systems. 6\\. Compare and contrast the basic techniques for representing\nuncertainty. 7\\. Compare and contrast the basic techniques for qualitative\nrepresentation. 8\\. Apply situation and event calculus to problems of action\nand change. 9\\. Explain the distinction between temporal and spatial\nreasoning, and how they interrelate. 10\\. Explain the difference between rule-\nbased, case-based, and model-based reasoning techniques. 11\\. Define the\nconcept of a planning system and how it differs from classical search\ntechniques. 12\\. Describe the differences between planning as search,\noperator-based planning, and propositional planning, providing examples of\ndomains where each is most applicable. 13\\. Explain the distinction between\nmonotonic and non-monotonic inference.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/169f9dbfd6f70106f62b2d9aebb8efd68d3b039804ec37b1fb9468276a8103dd> .
_:N1df98b1aa60d42bebdc90e26654da638 <http://schema.org/explain> "The lecture focuses on software construction and evolution, whereas the KU covers logical representation and reasoning, with little overlap between the two topics." <http://groq.org/169f9dbfd6f70106f62b2d9aebb8efd68d3b039804ec37b1fb9468276a8103dd> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:N1df98b1aa60d42bebdc90e26654da638 <http://groq.org/169f9dbfd6f70106f62b2d9aebb8efd68d3b039804ec37b1fb9468276a8103dd> .
_:N1df98b1aa60d42bebdc90e26654da638 <http://schema.org/answer> "0" <http://groq.org/169f9dbfd6f70106f62b2d9aebb8efd68d3b039804ec37b1fb9468276a8103dd> .
_:N1df98b1aa60d42bebdc90e26654da638 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/169f9dbfd6f70106f62b2d9aebb8efd68d3b039804ec37b1fb9468276a8103dd> .
<http://example.org/course/UE_X32A060> <http://example.org/course/content> "d’une lettre de motivation" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/objective> "(résultats d'apprentissage) • Savoir déterminer des contraintes d’intégrité\n• Savoir appliquer un contrôle d’accès basique à une base de données\n• Comprendre la notion de vue\n• Connaître la structuration physique des données\n• Comprendre la notion de transaction\n• Comprendre la notion d’ordonnancement sérialisable\n• Comprendre la technique de contrôle de concurrence par verrouillage\n• Comprendre les fonctions d’un optimiseur de requêtes\n• Comprendre un plan d’exécution d’une requête\n• Connaître les structures accélératrices d’accès aux données (indexes)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/hours> "TOTAL : 17.6h Répartition : CM : 0h TD : 16h CI : 0h TP : 0h EAD : 1.6h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/content> "modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/semester> "6" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/parcours> "L3 Chimie : Chimie / mineure Chimie Avancée LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/parcours> "Environnement BGE / mineure Environnement" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/evaluation> "Programmation fonctionnelle 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/code> "X32A060" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/parcours> "L3 Maths : Maths / mineure CMI Ingéniérie Statistique _ CMI-" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/responsible> "PRZYBYLSKI ANTHONY" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/responsible> "HAMMA SALIMA" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/content> "fondamental :\n-" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/objective> "(résultats d'apprentissage)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/obtention> "encadrants du stage." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/objective> "(résultats d'apprentissage) - Être capable d'écrire formellement des réductions, simples, de NP-complétude\n- Savoir choisir des propriétés à vérifier pour prouver un algorithme et pour établir sa complexité\ntemporelle\n- Savoir écrire, pour des algorithmes simples, des preuves de correction et des preuves de\ncomplexité temporelle\n- Être capable de travailler en groupe" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/hours> "TOTAL : 46.2h Répartition : CM : 20h TD : 22h CI : 0h TP : 0h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/responsible> "PERRIN MATTHIEU" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/code> "X31T060" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/evaluation> "Etude des algorithmes 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://www.w3.org/2000/01/rdf-schema#label> "Ouverture professionnelle - Informatique" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/responsible> "TRUCHET CHARLOTTE" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://www.w3.org/2000/01/rdf-schema#label> "Anglais pour la communication scientifique (info)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/evaluation> "Bases de données 2 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/content> "Structures de données arborescentes\no monodimensionnelles : arbres binaires, arbres AVL, classes-union etc." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/parcours> "L3 Physique : Physique" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/responsible> "RUSU Irena" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/responsible> "Volume horaire total TOTAL : 17.6h Répartition : CM : 0h TD : 16h CI : 0h TP : 0h EAD : 1.6h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/content> "scientifique\n4. Analyse de documents audio ou vidéo\n5. Pratique de l’oral en contexte\n6. Sensibilisation au système phonologique de l’anglais pour améliorer la prise de parole des\nétudiant-e-s" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/evaluation> "Langages et automates 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/language> "Anglais" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/parcours> "L3 SV : Sciences du Végétal et de l'Aliment LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/content> "Vérification de programme\n• Vérification dynamiques : aléatoire ; fonctionnelle ; structurelle\n• Vérification statique : informelle ; formelle (Hoare et Dijkstra) : correction, terminaison." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/parcours> "L3 SVT : Sciences de la Terre et de l'Univers STU" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/code> "X32I020" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/content> "Énumérations de Godel. Fonctions récursives." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/prerequisite> "(s) • Etude des algorithmes (913 17 LG 5 INF UE 820)\n• Langage et automates (913 17 LG 5 INF UE 1165)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/location> "UFR Sciences" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/semester> "6" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/content> "4h00 : TD 4 : Simulations d’entretiens en sous-groupes autonomes et présentation du pitch\n(évaluation).\n4h00 : TD 5 : Les différentes structures et organisations possibles dans le monde du travail / Droits\net devoirs du stagiaire.\n1h20 : TD 6 : L’après licence : en sous-groupes, argumentation de ses perspectives post-licence." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/evaluation> "Anglais pour la communication scientifique (info) 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/content> "données et de\ncontrôle).\n* Les mémoires: communication par bus, principe de localité, cache, virtualisation\n* Multiprocesseurs, multicœurs et GPU [optionnel, en fonction du temps disponible]" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/code> "X31I020" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/semester> "5" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/evaluation> "Recherche opérationnelle 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/hours> "TOTAL : 46.2h Répartition : CM : 18h TD : 24h CI : 0h TP : 0h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/content> "formes normales. Automates à pile et transducteurs finis." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/code> "XLG6TU200" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/code> "X31I010" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/semester> "5" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/content> "de l'UE : Internet : comment ça marche.\n• Introduction : les chiffres de l'Internet, histoire et perspectives.\n• Les protocoles applicatifs (http, smtp, dns, ...)\n• Le problème du transport fiable de bout en bout. TCP.\n• Le problème du contrôle de flux et congestion. TCP." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/objective> "(résultats d'apprentissage)\nl'implémentation des éléments logiques de base (mux/demux, registres, ...);\n• connaître les principes de la programmation dans un langage d'assemblage et savoir traduire les\nappels de fonctions et de procédures en respectant les conventions dictées par l'environnement;\n• savoir mettre en oeuvre un processeur monocycle simple en définissant les chemins de données\nde son jeu d'instructions;\n• connaître les principes sous-tendant les processeurs multicycles et les architectures pipelinées\n• connaître la notion de cache mémoire et ses différentes implémentations, et en connaître les\nimpacts sur les algorithmes." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/methods> "Mixte" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/methods> "• Pédagogie inversée : réflexion individuelle à partir de supports. de réflexion et restitution en\ngroupe, présentations orales faites par les étudiants." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/semester> "5" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/hours> "TOTAL : 46.19h Répartition : CM : 15.33h TD : 13.33h CI : 0h TP : 13.33h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/bibliography> "Aucun ouvrage obligatoire" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/obtention> "La note de contrôle continu peut contenir éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/semester> "5" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/hours> "TOTAL : 17.6h Répartition : CM : 0h TD : 16h CI : 0h TP : 0h EAD : 1.6h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/code> "X32I030" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/methods> "Distanciel : Le travail concernera l'inférence de type. Il sera éventuellement complété par un travail\nde programmation et/ou par un travail de découverte d'autres langages fonctionnels (que celui\nutilisé dans l'UE) ainsi que d'aspects fonctionnels présents dans des langages non fonctionnels" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/location> "Niveau Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/hours> "TOTAL : 46.2h Répartition : CM : 13.33h TD : 20.67h CI : 0h TP : 8h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/obtention> "• an in-class test (listening comprehension)\n• your project work" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/parcours> "Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://www.w3.org/2000/01/rdf-schema#label> "Stage libre" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/parcours> "L3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/evaluation> "Réseaux et Télécoms 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/semester> "5" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/parcours> "Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/hours> "TOTAL : 46.2h Répartition : CM : 14h TD : 16h CI : 0h TP : 12h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://www.w3.org/2000/01/rdf-schema#label> "Anglais Professionnel Informatique" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/objective> "(résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://www.w3.org/2000/01/rdf-schema#label> "Construction et évolution de logiciels" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/responsible> "PERCEVAUX MARIE-CHRISTINE" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/evaluation> "Informatique Fondamentale 2 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://www.w3.org/2000/01/rdf-schema#label> "Programmation fonctionnelle" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/semester> "5" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/code> "X31I050" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://www.w3.org/2000/01/rdf-schema#label> "Langage et automates" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/objective> "(résultats d'apprentissage)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/code> "X32I010" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/prerequisite> "(s) Anglais 3 et 4, ou équivalent." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/hours> "TOTAL : 0h Répartition : CM : 0h TD : 0h CI : 0h TP : 0h EAD : 0h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/responsible> "SERRANO-ALVARADO PATRICIA" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/semester> "6" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/methods> "Distanciel : une partie de l’enseignement aura lieu en ligne, à l’aide de contenus mélangeant\ndocuments, tests d’auto-évaluation et échanges, sous le tutorat des enseignants." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/semester> "6" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/code> "XLG5TU200" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/hours> "TOTAL : 46.19h Répartition : CM : 15.33h TD : 13.33h CI : 0h TP : 13.33h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/bibliography> "Aucun ouvrage obligatoire." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/content> "•" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/objective> "(résultats d'apprentissage)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/evaluation> "Algorithmique et Structures de données 3 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/language> "Anglais" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/code> "X31I040" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/hours> "TOTAL : 0h Répartition : CM : 0h TD : 0h CI : 0h TP : 0h EAD : 0h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/responsible> "SUNYE GERSON" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/location> "Niveau Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/code> "X32I050" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/objective> "(résultats d'apprentissage)\n• Comprendre les mécanismes de base des protocoles de l’Internet (http, tcp, ip, arp);\n• Connaître les défis techniques et sociétaux liés aux déploiements des réseaux;" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/parcours> "L3 Info : Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/location> "Niveau Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/location> "UFR Sciences" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/parcours> "Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/content> "Méthodes d’enseignement" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/evaluation> "Stage libre 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/hours> "TOTAL : 46.2h Répartition : CM : 14h TD : 16h CI : 0h TP : 12h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://www.w3.org/2000/01/rdf-schema#label> "Etude des algorithmes" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/semester> "6" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/content> "Méthodes d’enseignement" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/parcours> "Maths / mineure CMI Ingéniérie Statistique _ CMI-IS" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/parcours> "Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/bibliography> "Lien LinkedIn : https://fr.linkedin.com/" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/parcours> "L3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/responsible> "ENGUEHARD CHANTAL" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://www.w3.org/2000/01/rdf-schema#label> "Stage libre" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/responsible> "Volume horaire total TOTAL : 0h Répartition : CM : 0h TD : 0h CI : 0h TP : 0h EAD : 0h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/evaluation> "Construction et évolution de logiciels 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/parcours> "Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/objective> "(résultats d'apprentissage) - étudié une structure en particulier, en lien avec son projet professionnel\n- par le biais d’un jeu de rôle, pris conscience du rôle des différents services (RH, marketing,\ncommercial,…) d’une structure dans le développement et le déploiement d’un projet\n- connaissance de ses droits et devoirs en tant que stagiaire et aura travaillé sur sa manière de\ns’intégrer et de s’adapter dans un nouveau milieu professionnel\n- connaissance de ce qu’est l’entreprenariat et des dispositifs en lien à l’université" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/objective> "(résultats d'apprentissage)\n(A-M)\n- Connaître les notions de calendrier au plus tôt, calendrier au plus tard pour un ensemble de\ntâche, et la notion de marge d'une tâche dans le contexte d'un problème d'ordonnancement simple\n(M)\n- Etre capable de déterminer un calendrier au plus tôt, un calendrier au plus tard et les marges\ndes tâches, dans le contexte d'un problème d'ordonnancement simple (A)\n- Introduction à la problématique de l'optimisation multi-objectif : connaissance de la notion de\nsolution efficace, limite de l'utilisation de la somme pondérée (I)\n- Utilisation d'un langage de modélisation algébrique : comprendre la différence entre un modèle\nexplicite et un modèle implicite (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'écrire un modèle implicite\n(A)\n- Utilisation d'un langage de modélisation algébrique : comprendre l'utilisation d'une structure de\nmatrice creuse pour décrire des contraintes (I)\n- Utilisation d'un langage de modélisation algébrique : être capable d'utiliser une structure de\nmatrice creuse pour décrire des contraintes (A)\n- Utilisation d'un langage de modélisation algébrique : être capable de détermine si le choix d'une\nmatrice creuse est pertinent ou pas pour décrire des contraintes (A)\n- Utilisation d'un solveur MIP : comprendre l'utilisation d'un solveur MIP en tant que bibliothèque\nde fonction et être capable de l'utiliser pour résoudre un unique problème de programmation\nlinéaire en variables mixtes (A)\n- Utilisation d'un solveur MIP : être capable d'implémenter un algorithme donné, en faisant des\nappels successifs à un solveur MIP pour résoudre un problème de programmation linéaire en\nvariables mixtes (A)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/parcours> "Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/prerequisite> "(s)\n• Logique pour l'informatique (913 17 LG 4 INF UE 819)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/hours> "TOTAL : 17.6h Répartition : CM : 0h TD : 16h CI : 0h TP : 0h EAD : 1.6h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/location> "Niveau Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://www.w3.org/2000/01/rdf-schema#label> "Réseaux et Télécoms" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/bibliography> "2010)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/parcours> "Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/evaluation> "Stage libre 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/code> "X32I040" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/hours> "TOTAL : 46.2h Répartition : CM : 10h TD : 20h CI : 0h TP : 12h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/code> "X32T060" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/semester> "6" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://www.w3.org/2000/01/rdf-schema#label> "Architecture des ordinateurs" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/objective> "(résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ;" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/parcours> "de la Terre et de l'Univers STU" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/obtention> "• an in-class test\n• your project work" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/objective> "(résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/content> "Méthodes d’enseignement" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/responsible> "JEAN GERALDINE" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/semester> "5" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/parcours> "Maths Info / mineure CMI OPTIM" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://www.w3.org/2000/01/rdf-schema#label> "Algorithmique et Structures de données 3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/evaluation> "Architecture des ordinateurs 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/evaluation> "Stage 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/code> "X31A060" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/responsible> "BOURDON JEREMIE" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/obtention> "Programme" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/parcours> "L3 SVT : Biologie\nÉcologie _BE LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://www.w3.org/2000/01/rdf-schema#label> "Recherche opérationnelle" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/responsible> "Volume horaire total TOTAL : 0h Répartition : CM : 0h TD : 0h CI : 0h TP : 0h EAD : 0h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/methods> "Mixte" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I040> <http://example.org/course/obtention> "éventuellement une composante distancielle." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/hours> "TOTAL : 46.2h Répartition : CM : 14h TD : 16h CI : 0h TP : 12h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/semester> "5" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://www.w3.org/2000/01/rdf-schema#label> "Bases de données 2" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/content> "Extension procédurale de SQL (PL/SQL) , BD actives (Déclencheurs) Interrogation d'une base avec" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/prerequisite> "(s) Anglais 3 et 4, ou équivalent." <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/hours> "TOTAL : 0h Répartition : CM : 0h TD : 0h CI : 0h TP : 0h EAD : 0h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/objective> "(résultats d'apprentissage)\nreplacer l’article dans son contexte et expliquer les enjeux de la recherche ou de la thématique\nabordée dans cet article.\n3. présenter son travail dans un anglais clair et phonologiquement approprié, en utilisant des outils\nde présentation adaptés et en communiquant avec un degré d’aisance et de spontanéité qui rende\npossible une interaction normale avec un locuteur natif, sans recours excessif aux notes.\n1. Développement du vocabulaire scientifique général\n2. Développement du vocabulaire scientifique de spécialité\n3. Analyse de textes scientifiques\n4. Développement de la capacité à adapter son discours à différentes situations de communication" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I030> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/objective> "(résultats d'apprentissage) •\nimplémenter des algorithmes de parcours et de manipulation d’arbres (Application) ;\n•\nrésoudre des problèmes simples de la théorie des graphes en employant une approche gloutonne\nlorsqu’elle est appropriée (Analyse) ;\n•\ncalculer la complexité d'un algorithme en fonction des structures de données choisies (Synthèse) ;\n• choisir la structure de données la plus efficace pour la résolution d'un problème (Synthèse) ;" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://www.w3.org/2000/01/rdf-schema#label> "Informatique Fondamentale 2" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/hours> "TOTAL : 46.2h Répartition : CM : 14h TD : 20h CI : 0h TP : 8h EAD : 4.2h" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I020> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/methods> "Langue d’enseignement Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/objective> "(résultats d'apprentissage) 3. faire une présentation orale s’appuyant sur le travail de groupe préparé dans le rapport écrit, en\ns’exprimant dans un anglais clair et phonologiquement approprié et en communiquant avec un\ndegré d’aisance et de spontanéité qui rende possible une interaction normale avec un locuteur natif,\nsans recours excessif aux notes\n4. utiliser des outils de présentation adaptés à la situation de communication\n5. répondre à des questions de compréhension sur des documents audio authentiques\n1. Développement du vocabulaire utilisé en anglais professionnel (vocabulaire susceptible d’être\nutilisé dans les tests TOEIC)\n2. Discussion des spécificités des CV aux États-Unis et en Grande-Bretagne\n3. Contenu d’une lettre de motivation" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/obtention> "Programme" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/code> "X31I030" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31A060> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I040> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://www.w3.org/2000/01/rdf-schema#label> "Stage" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/language> "Français" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/course/UE> <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I020> <http://example.org/course/semester> "6" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/parcours> "L3 Info : Informatique / mineure Informatique LAS3" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31T060> <http://example.org/course/evaluation> "Ouverture professionnelle - Informatique 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I010> <http://example.org/course/responsible> "RAMPON JEAN-XAVIER" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/responsible> "GOUALARD FREDERIC" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/bibliography> "" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/course/bibliography> "Dernière modification par ISABELLE BEAUDET, le 2020-05-05 17:43:15" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I050> <http://example.org/course/location> "Lombarderie" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X31I030> <http://example.org/course/objective> "(résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/course/obtention> "Programme" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/evaluation> "Anglais Professionnel Informatique 100%" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I010> <http://example.org/course/level> "Licence" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32A060> <http://example.org/course/semester> "6" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32I050> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/course/UE_X32T060> <http://example.org/course/prerequisite> "(s)" <http://readrdf.org/705aa5b8779f731b11609c5ad5a0cb6af17e59a0f587990eca2b133c08c68bd4> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG6TU200" <http://groq.org/6b65349029dc7db5e5f0ae5d6380d38dccd3c188af4525d4e518b9af9011be2f> .
_:Nab3cd9906e9a42d79619d4694ef2287f <http://schema.org/explain> "The lecture does not cover the technical graphics and visualization topics outlined in the Knowledge Unit." <http://groq.org/6b65349029dc7db5e5f0ae5d6380d38dccd3c188af4525d4e518b9af9011be2f> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200</page1>\n        <page2>Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental\nConcepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic\ngraphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.\nRasterization and rendering techniques. 5\\. Fundamental shading models. KA\nCore: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in\ndifferent fields. 8\\. Interaction methods for graphical environments.\nIllustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.\n2\\. Differentiate between rasterization and ray tracing. 3\\. Apply\ntransformations to 2D and 3D models.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/6b65349029dc7db5e5f0ae5d6380d38dccd3c188af4525d4e518b9af9011be2f> .
<http://example.org/course/UE_XLG6TU200> <http://example.org/has_schema_type> _:Nab3cd9906e9a42d79619d4694ef2287f <http://groq.org/6b65349029dc7db5e5f0ae5d6380d38dccd3c188af4525d4e518b9af9011be2f> .
_:Nab3cd9906e9a42d79619d4694ef2287f <http://schema.org/answer> "0" <http://groq.org/6b65349029dc7db5e5f0ae5d6380d38dccd3c188af4525d4e518b9af9011be2f> .
_:Nab3cd9906e9a42d79619d4694ef2287f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/6b65349029dc7db5e5f0ae5d6380d38dccd3c188af4525d4e518b9af9011be2f> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/6b65349029dc7db5e5f0ae5d6380d38dccd3c188af4525d4e518b9af9011be2f> .
_:N3ff105ac61594b6eba0aa966d7663650 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1ddee60013549f3cb8e72df977ac58778e60dbe2ace4e7dbfa03fb9685ee5cb5> .
_:N3ff105ac61594b6eba0aa966d7663650 <http://schema.org/answer> "0" <http://groq.org/1ddee60013549f3cb8e72df977ac58778e60dbe2ace4e7dbfa03fb9685ee5cb5> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_XLG5TU200" <http://groq.org/1ddee60013549f3cb8e72df977ac58778e60dbe2ace4e7dbfa03fb9685ee5cb5> .
<http://example.org/course/UE_XLG5TU200> <http://example.org/has_schema_type> _:N3ff105ac61594b6eba0aa966d7663650 <http://groq.org/1ddee60013549f3cb8e72df977ac58778e60dbe2ace4e7dbfa03fb9685ee5cb5> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1ddee60013549f3cb8e72df977ac58778e60dbe2ace4e7dbfa03fb9685ee5cb5> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/1ddee60013549f3cb8e72df977ac58778e60dbe2ace4e7dbfa03fb9685ee5cb5> .
_:N3ff105ac61594b6eba0aa966d7663650 <http://schema.org/explain> "Lecture focuses on teaching methods, not SE-Formal Methods content." <http://groq.org/1ddee60013549f3cb8e72df977ac58778e60dbe2ace4e7dbfa03fb9685ee5cb5> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:Na0db4ae5eeb7410fa12b5d13745b99af <http://groq.org/5c0962bc4b0b78c508ce4188a1852c41729c11b60a891be994584e991e10979e> .
_:Na0db4ae5eeb7410fa12b5d13745b99af <http://schema.org/explain> "The lecture focuses on functional programming concepts, while the KU covers ethical and legal aspects of programming, with no overlap in content." <http://groq.org/5c0962bc4b0b78c508ce4188a1852c41729c11b60a891be994584e991e10979e> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages : 171 CS Core : None, KA Core : None (Hours here are included in\nSociety, Ethics and the Profession Area) CS Core: 1\\. Intellectual property\nrights of programmers for programs they develop. 2\\. Plagiarism and academic\nintegrity. 3\\. Responsibility and liability of programmers regarding code they\ndevelop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work\nethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.\nExplain/understand some of the intellectual property issues relating to\nprograms. 2\\. Explain/understand when code developed by others can be used and\nproper ways of disclosing their use. 3\\. Explain/understand the responsibility\nof programmers when developing code for an overall solution (which may be\ndeveloped by a team). 4\\. Explain/understand one or more codes of conduct\napplicable to programmers.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/5c0962bc4b0b78c508ce4188a1852c41729c11b60a891be994584e991e10979e> .
_:Na0db4ae5eeb7410fa12b5d13745b99af <http://schema.org/answer> "0" <http://groq.org/5c0962bc4b0b78c508ce4188a1852c41729c11b60a891be994584e991e10979e> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/5c0962bc4b0b78c508ce4188a1852c41729c11b60a891be994584e991e10979e> .
_:Na0db4ae5eeb7410fa12b5d13745b99af <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/5c0962bc4b0b78c508ce4188a1852c41729c11b60a891be994584e991e10979e> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/5c0962bc4b0b78c508ce4188a1852c41729c11b60a891be994584e991e10979e> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/1bb7701d2a67233e9bbd9b906cd189271723e09a67ea805d4539054f7f415a1c> .
_:N844a22210913489897072fd571a66eee <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/1bb7701d2a67233e9bbd9b906cd189271723e09a67ea805d4539054f7f415a1c> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I010" <http://groq.org/1bb7701d2a67233e9bbd9b906cd189271723e09a67ea805d4539054f7f415a1c> .
<http://example.org/course/UE_X32I010> <http://example.org/has_schema_type> _:N844a22210913489897072fd571a66eee <http://groq.org/1bb7701d2a67233e9bbd9b906cd189271723e09a67ea805d4539054f7f415a1c> .
_:N844a22210913489897072fd571a66eee <http://schema.org/answer> "1" <http://groq.org/1bb7701d2a67233e9bbd9b906cd189271723e09a67ea805d4539054f7f415a1c> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Informatique Fondamentale 2 Objectif: (résultats d'apprentissage) - distinguer un problème décidable d'un problème indécidable\n- comprendre la résolution de problèmes par réduction\n- comprendre la construction des fonctions et prédicats récursifs primitifs\n- savoir faire une preuve par induction\n- savoir construire des objets inductivement\n- savoir construire des termes, les manipuler, et les transformer\n- comprendre le mécanisme d'unification\n- savoir ordonner des termes Course content: Énumérations de Godel. Fonctions récursives. Course name: http://example.org/course/UE_X32I010</page1>\n        <page2>Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/1bb7701d2a67233e9bbd9b906cd189271723e09a67ea805d4539054f7f415a1c> .
_:N844a22210913489897072fd571a66eee <http://schema.org/explain> "Covers unification, recursion, induction, and logic program structures (e.g., Horn clauses) aligned with KU core topics." <http://groq.org/1bb7701d2a67233e9bbd9b906cd189271723e09a67ea805d4539054f7f415a1c> .
<http://example.org/course/UE_X32I050> <http://example.org/has_schema_type> _:N6ae190fbbf6d4f1a8711a7516777a3dc <http://groq.org/b225d588fb2ce02c43969a37ac4f287668fe1531273d122ac8710b45d26fa640> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I050" <http://groq.org/b225d588fb2ce02c43969a37ac4f287668fe1531273d122ac8710b45d26fa640> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Construction et évolution de logiciels Objectif: (résultats d'apprentissage) • Être capable d'appliquer des heuristiques connues de construction et de maintenance pour\naméliorer un logiciel existant, comme par exemple, éliminer des variables globales, appliquer des\nconventions de codage et rendre le logiciel testable.\n• Être capable de traduire la conception détaillée d'un logiciel en code source. En ce faisant, il doit\ndémontrer sa maîtrise des règles génériques de correspondance entre la conception et le code.\n• Savoir organiser et rédiger le documentation utilisateur d'un logiciel dans le but de le rendre\nutilisable à long terme.\n• Être capable d'effectuer des opération de maintenance corrective, perfective, adaptative et\npréventive.\n• Être capable d'utiliser des outils d'analyse de code source pour appréhender un logiciel existant.\n• Être capable d'utiliser la gestion d'exception, ainsi que d'autre techniques spécifiques aux\nlangages de programmation pour améliorer la tolérance aux fautes. Course content: modernisation. Les principes de travail dans une équipe de développement en entreprise. La\nrédaction de documentation logicielle, la maintenance logicielle, l'analyse de code et la gestion\nd'exception seront aussi abordés dans ce module. Course name: http://example.org/course/UE_X32I050</page1>\n        <page2>Pages:76-77 HOURS CS Core = 0 KA Core = 0 AI-LRR: Logical Representation and\nReasoning Non-core: 77 1\\. Review of propositional and predicate logic (See\nalso: MSF-Discrete) 2\\. Resolution and theorem proving (propositional logic\nonly) a. Forward chaining, backward chaining 3\\. Knowledge representation\nissues a. Description logics b. Ontology engineering 4\\. Semantic web 5\\. Non-\nmonotonic reasoning (e.g., non-classical logics, default reasoning) 6\\.\nArgumentation 7\\. Reasoning about action and change (e.g., situation and event\ncalculus) 8\\. Temporal and spatial reasoning 9\\. Logic programming a. Prolog,\nAnswer Set Programming 10\\. Rule-based Expert Systems 11\\. Semantic networks\n12\\. Model-based and Case-based reasoning Illustrative Learning Outcomes: 1\\.\nTranslate a natural language (e.g., English) sentence into a predicate logic\nstatement. 2\\. Convert a logic statement into clausal form. 3\\. Apply\nresolution to a set of logic statements to answer a query. 4\\. Compare and\ncontrast the most common models used for structured knowledge representation,\nhighlighting their strengths and weaknesses. 5\\. Identify the components of\nnon-monotonic reasoning and its usefulness as a representational mechanism for\nbelief systems. 6\\. Compare and contrast the basic techniques for representing\nuncertainty. 7\\. Compare and contrast the basic techniques for qualitative\nrepresentation. 8\\. Apply situation and event calculus to problems of action\nand change. 9\\. Explain the distinction between temporal and spatial\nreasoning, and how they interrelate. 10\\. Explain the difference between rule-\nbased, case-based, and model-based reasoning techniques. 11\\. Define the\nconcept of a planning system and how it differs from classical search\ntechniques. 12\\. Describe the differences between planning as search,\noperator-based planning, and propositional planning, providing examples of\ndomains where each is most applicable. 13\\. Explain the distinction between\nmonotonic and non-monotonic inference.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/b225d588fb2ce02c43969a37ac4f287668fe1531273d122ac8710b45d26fa640> .
_:N6ae190fbbf6d4f1a8711a7516777a3dc <http://schema.org/explain> "The lecture focuses on software construction and evolution, while the KU covers logical representation and reasoning, which are distinct areas." <http://groq.org/b225d588fb2ce02c43969a37ac4f287668fe1531273d122ac8710b45d26fa640> .
_:N6ae190fbbf6d4f1a8711a7516777a3dc <http://schema.org/answer> "0" <http://groq.org/b225d588fb2ce02c43969a37ac4f287668fe1531273d122ac8710b45d26fa640> .
_:N6ae190fbbf6d4f1a8711a7516777a3dc <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/b225d588fb2ce02c43969a37ac4f287668fe1531273d122ac8710b45d26fa640> .
<http://example.org/GROK> <http://example.org/param_model> "deepseek-r1-distill-llama-70b" <http://groq.org/b225d588fb2ce02c43969a37ac4f287668fe1531273d122ac8710b45d26fa640> .
_:Nb9bc6280523c4f98b292f4b1e05c26ab <http://schema.org/answer> "0" <http://groq.org/3479fea685f024f5902c0c1b226961f1a4db771f37a9d4857f4ca38fcb8669d5> .
_:Nb9bc6280523c4f98b292f4b1e05c26ab <http://schema.org/explain> "No overlap in topics; different focus areas." <http://groq.org/3479fea685f024f5902c0c1b226961f1a4db771f37a9d4857f4ca38fcb8669d5> .
<http://example.org/course/UE_X32I020> <http://example.org/has_schema_type> _:Nb9bc6280523c4f98b292f4b1e05c26ab <http://groq.org/3479fea685f024f5902c0c1b226961f1a4db771f37a9d4857f4ca38fcb8669d5> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X32I020" <http://groq.org/3479fea685f024f5902c0c1b226961f1a4db771f37a9d4857f4ca38fcb8669d5> .
_:Nb9bc6280523c4f98b292f4b1e05c26ab <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/3479fea685f024f5902c0c1b226961f1a4db771f37a9d4857f4ca38fcb8669d5> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Programmation fonctionnelle Objectif: (résultats d'apprentissage) •\nconcevoir et employer des fonctions d’ordre supérieure (Application) ;\n•\nemployer la programmation par filtrage de motifs pour les traitements symboliques (Application) ;\n• expliquer et savoir simuler le mécanisme d’inférence de type (Compréhension) ; Course content: • Course name: http://example.org/course/UE_X32I020</page1>\n        <page2>Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/3479fea685f024f5902c0c1b226961f1a4db771f37a9d4857f4ca38fcb8669d5> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/3479fea685f024f5902c0c1b226961f1a4db771f37a9d4857f4ca38fcb8669d5> .
<http://example.org/course/UE_X31I040> <http://example.org/has_schema_type> _:N5dd859461be943759b8a9ebeba42b7f7 <http://groq.org/dff9cc6e642033aadf2ae98d005d42c5bc5be1e04a0c2019c41d027a865ad22f> .
_:N5dd859461be943759b8a9ebeba42b7f7 <http://schema.org/answer> "1" <http://groq.org/dff9cc6e642033aadf2ae98d005d42c5bc5be1e04a0c2019c41d027a865ad22f> .
_:N5dd859461be943759b8a9ebeba42b7f7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/dff9cc6e642033aadf2ae98d005d42c5bc5be1e04a0c2019c41d027a865ad22f> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Réseaux et Télécoms Objectif: (résultats d'apprentissage)\n• Comprendre les mécanismes de base des protocoles de l’Internet (http, tcp, ip, arp);\n• Connaître les défis techniques et sociétaux liés aux déploiements des réseaux; Course content: de l'UE : Internet : comment ça marche.\n• Introduction : les chiffres de l'Internet, histoire et perspectives.\n• Les protocoles applicatifs (http, smtp, dns, ...)\n• Le problème du transport fiable de bout en bout. TCP.\n• Le problème du contrôle de flux et congestion. TCP. Course name: http://example.org/course/UE_X31I040</page1>\n        <page2>Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-\nFundamentals: Fundamentals CS Core: 1\\. Importance of networking in\ncontemporary computing, and associated challenges. (See also: SEPContext, SEP-\nPrivacy) 2\\. Organization of the internet (e.g., users, Internet Service\nProviders, autonomous systems, content providers, content delivery networks)\n3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles\n(application, transport, network, datalink, and physical) 5\\. Layering\nprinciples (e.g., encapsulation and hourglass model) (See also: SF-\nFoundations) 6\\. Network elements (e.g., routers, switches, hubs, access\npoints, and hosts) 7\\. Basic queueing concepts (e.g., relationship with\nlatency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS\nCore: 1\\. Articulate the organization of the internet. 2\\. List and define the\nappropriate network terminology 3\\. Describe the layered structure of a\ntypical networked architecture. 4\\. Identify the different types of complexity\nin a network (edges, core, etc.).</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/dff9cc6e642033aadf2ae98d005d42c5bc5be1e04a0c2019c41d027a865ad22f> .
_:N5dd859461be943759b8a9ebeba42b7f7 <http://schema.org/explain> "Covers protocols (HTTP/TCP/IP), layers, and core network concepts but lacks explicit details on switching techniques and queueing models." <http://groq.org/dff9cc6e642033aadf2ae98d005d42c5bc5be1e04a0c2019c41d027a865ad22f> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I040" <http://groq.org/dff9cc6e642033aadf2ae98d005d42c5bc5be1e04a0c2019c41d027a865ad22f> .
<http://example.org/GROK> <http://example.org/param_model> "qwen-qwq-32b" <http://groq.org/dff9cc6e642033aadf2ae98d005d42c5bc5be1e04a0c2019c41d027a865ad22f> .
<http://example.org/GROK> <http://example.org/param_model> "llama3-8b-8192" <http://groq.org/674a00882961f30097b42d1ceaf79c7074863553ace10aef81521795db748159> .
_:N2041f619c6f74bd7897edf813d204a56 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://groq.org/674a00882961f30097b42d1ceaf79c7074863553ace10aef81521795db748159> .
<http://example.org/course/UE_X31I030> <http://example.org/has_schema_type> _:N2041f619c6f74bd7897edf813d204a56 <http://groq.org/674a00882961f30097b42d1ceaf79c7074863553ace10aef81521795db748159> .
<http://example.org/GROK> <http://example.org/param_uri> "http://example.org/course/UE_X31I030" <http://groq.org/674a00882961f30097b42d1ceaf79c7074863553ace10aef81521795db748159> .
_:N2041f619c6f74bd7897edf813d204a56 <http://schema.org/explain> "The lecture covers a significant portion of the KU, including formal automata, formal languages, and grammars, as well as decidability, computability, and halting. The lecture also touches on algorithmic correctness, determinism, and nondeterminism." <http://groq.org/674a00882961f30097b42d1ceaf79c7074863553ace10aef81521795db748159> .
<http://example.org/GROK> <http://example.org/param_prompt> "\n        You are a JSON-LD API. Always respond only with a valid JSON-LD object, without explanation or formatting.\n\n        The following describes the content of a lecture and a Knowledge Unit (KU) in Computer Science.\n\n        <page1>Label: Langage et automates Objectif: (résultats d'apprentissage)\n- Savoir si un mot est engendré par une grammaire rationnelle, algébrique ou contextuelle\n- Connaître les propriétés d'un automate fini\n- Savoir rendre déterministe un automate fini\n- Savoir minimaliser le nombre d'états d'un automate fini déterministe\n- Savoir si un mot est accepté par un automate fini\n- Savoir transformer une grammaire rationnelle en une expression rationnelle ou en un automate\nfini et inversement Course content: formes normales. Automates à pile et transducteurs finis. Course name: http://example.org/course/UE_X31I030</page1>\n        <page2>Pages:93-95 HOURS CS Core = 9 KA Core = 23 AL-Models: Computational Models and\nFormal Languages CS Core: 1\\. Formal automata a. Finite State b. Pushdown c.\nLinear Bounded d. Turing Machine 2\\. Formal languages, grammars and Chomsky\nHierarchy (See also: FPL-Translation, FPL-Syntax) a. Regular (Type-3) i.\nRegular Expressions b. Context-Free (Type-2) c. Context-Sensitive (Type-1) d.\nRecursively Enumerable (Type-0) 3\\. Relations among formal automata,\nlanguages, and grammars 4\\. Decidability, (un)computability, and halting 5\\.\nThe Church-Turing thesis 6\\. Algorithmic correctness a. Invariants (e.g., in\niteration, recursion, tree search) KA Core: 7\\. Deterministic and\nnondeterministic automata 8\\. Pumping Lemma proofs a. Proof of Finite\nState/Regular-Language limitation b. Pushdown Automata/Context-Free-Language\nlimitation 9\\. Decidability a. Arithmetization and diagonalization 10\\.\nReducibility and reductions 11\\. Time complexity based on Turing Machine 12\\.\nSpace complexity (e.g., Pspace, Savitch's Theorem) 13\\. Equivalent models of\nalgorithmic computation a. Turing Machines and Variations (e.g., multi-tape,\nnon-deterministic) b. Lambda Calculus (See also: FPL-Functional) c. Mu-\nRecursive Functions Non-core: 14\\. Quantum computation (See also: AR-Quantum)\na. Postulates of quantum mechanics i. State space 94 ii. State evolution iii.\nState composition iv. State measurement b. Column vector representations of\nqubits c. Matrix representations of quantum operations d. Simple quantum gates\n(e.g., XNOT, CNOT) Illustrative Learning Outcomes: CS Core: 1\\. For each\nformal automaton in this unit: a. Explain its definition comparing its\ncharacteristics with this unit's other automata, b. Using an example, explain\nstep-by-step how the automaton operates on input including whether it accepts\nthe associated input, c. Explain an example of inputs that can and cannot be\naccepted by the automaton. 2\\. Given a problem, develop an appropriate\nautomaton that addresses the problem. 3\\. Develop a regular expression for a\ngiven regular language expressed in natural language. 4\\. Explain the\ndifference between regular expressions (Type-3 acceptors) and the regular\nexpressions (Type-2 acceptors) used in programming languages. 5\\. For each\nformal model in this unit: a. Explain its definition comparing its\ncharacteristics with the others in this unit, b. Explain example inputs that\nare and cannot be accepted by the language/grammar. 6\\. Explain a universal\nTuring Machine and its operation. 7\\. Present to an audience of co-workers and\nmanagers the impossibility of providing them a program that checks all other\nprograms, including some seemingly simple ones, for infinite loops including\nan explanation of the Halting problem, why it has no algorithmic solution, and\nits significance for real-world algorithmic computation. 8\\. Explain examples\nof classic uncomputable problems. 9\\. Explain the Church-Turing Thesis and its\nsignificance for algorithmic computation. 10\\. Explain how (loop) invariants\ncan be used to prove the correctness of an algorithm. Illustrative Learning\nOutcomes: KA Core: 11\\. For each formal automaton in this unit explain\n(compare/contrast) its deterministic and nondeterministic capabilities. 12\\.\nApply pumping lemmas, or alternative means, to prove the limitations of Finite\nState and Pushdown automata. 13\\. Apply arithmetization and diagonalization to\nprove the Halting Problem for Turing Machines is Undecidability. 14\\. Given a\nknown undecidable language, apply a mapping reduction or computational history\nto prove that another language is undecidable. 15\\. Convert among equivalently\npowerful notations for a language, including among DFAs, NFAs, and regular\nexpressions, and between PDAs and CFGs. 16\\. Explain Rice's theorem and its\nsignificance. 95 17\\. Explain an example proof of a problem that is\nuncomputable by reducing a classic known uncomputable problem to it. 18\\.\nExplain the Primitive and General Recursive functions (zero, successor,\nselection, primitive recursion, composition, and Mu), their significance, and\nTuring Machine implementations. 19\\. Explain how computation is performed in\nLambda Calculus (e.g., Alpha conversion and Beta reduction) Non-core: 20\\. For\na quantum system give examples that explain the following postulates. a. State\nSpace - system state represented as a unit vector in Hilbert space, b. State\nEvolution - the use of unitary operators to evolve system state, c. State\nComposition - the use of tensor product to compose systems states, d. State\nMeasurement - the probabilistic output of measuring a system state. 21\\.\nExplain the operation of a quantum XNOT or CNOT gate on a quantum bit\nrepresented as a matrix and column vector, respectively</page2>\n\n        Determine whether the lecture (page1) substantially covers the knowledge described in the KU (page2).\n\n        Respond only using JSON-LD, with the following structure:\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"Report\",\n        \"http://schema.org/answer\": \"A\",\n        \"http://schema.org/explain\": \"B\"\n        }\n\n        Replace A with \"1\" if the lecture covers a large subset of the KU, or \"0\" if it does not.\n        Replace B with a **very short explanation** of your decision.\n        " <http://groq.org/674a00882961f30097b42d1ceaf79c7074863553ace10aef81521795db748159> .
_:N2041f619c6f74bd7897edf813d204a56 <http://schema.org/answer> "1" <http://groq.org/674a00882961f30097b42d1ceaf79c7074863553ace10aef81521795db748159> .

