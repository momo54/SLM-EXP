_:N4f9643b68c724d3fb114b96df525d712 <http://schema.org/explain> "The lecture covers topics like distributed data integration systems (GAV, LAV, GLAV), federated query processing over semantic web and personal information systems, which are also present in the Knowledge Unit." <http://ollama.org/8a1bd920d5f8227200aaedc51e1a3686f25b5a5b8bd70dca20f5559b95ae897e> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Distributed Architectures Objectif: • To understand the vision of the decentralized web\n• To understand data integration problems\n• To know how to build distributed data integration systems with GAV (Global as View), LAV, GLAV and distributed query processing\n• To know personal information systems and small data ie. Solid\n• To know federated query processing over semantic web: FedX, Anapsid To know\n• To be able to solve data integration problems on the web Course content: nan Course name: http://example.org/course/X3IA030 </page1> <page2> Page : 241 CS Core : None, KA Core : 5 (+1) (Additional hours here are hours\nshared with other Areas) KA Core: 1\\. Web programming languages (e.g., HTML5,\nJavaScript, PHP, CSS) 2\\. Web platforms, frameworks, or meta-frameworks a.\nCloud services b. API, Web Components 3\\. Software as a Service (SaaS) 4\\. Web\nstandards such as document object model, accessibility (See also: HCI-\nAccessibility) 5\\. Security and Privacy Considerations (See also: SEP-\nSecurity) Non-core: 6\\. Analyzing requirements for web applications 7\\.\nComputing services (See also: DM-NoSQL) a. Cloud Hosting b. Scalability (e.g.,\nAutoscaling, Clusters) c. Cost estimation for services 8\\. Data management\n(See also: DM-Core) a. Data residency: where the data is located and what\npaths can be taken to access it b. Data integrity: guaranteeing data is\naccessible and that data is deleted when required 9\\. Architecture a.\nMonoliths vs Microservices b. Micro-frontends c. Event-Driven vs RESTful\narchitectures: advantages and disadvantages d. Serverless, cloud computing on\ndemand 10\\. Storage solutions (See also: DM-Relational, DM-NoSQL) a.\nRelational Databases b. NoSQL databases Illustrative Learning Outcomes: KA\nCore: 1\\. Design and implement a web-based application using a microservice\narchitecture design. 2\\. Describe the constraints, such as hosting, services,\nand scalability, related to web platforms. 3\\. Compare and contrast web\nprogramming with general-purpose programming. 4\\. Describe the differences\nbetween Software-as-a-Service (SaaS) and traditional software products. 5\\.\nDiscuss how web standards impact software development. 6\\. Evaluate an\nexisting web application against current web standards.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/8a1bd920d5f8227200aaedc51e1a3686f25b5a5b8bd70dca20f5559b95ae897e> .
<http://example.org/course/X3IA030> <http://example.org/has_schema_type> _:N4f9643b68c724d3fb114b96df525d712 <http://ollama.org/8a1bd920d5f8227200aaedc51e1a3686f25b5a5b8bd70dca20f5559b95ae897e> .
_:N4f9643b68c724d3fb114b96df525d712 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/8a1bd920d5f8227200aaedc51e1a3686f25b5a5b8bd70dca20f5559b95ae897e> .
_:N4f9643b68c724d3fb114b96df525d712 <http://schema.org/answer> "1" <http://ollama.org/8a1bd920d5f8227200aaedc51e1a3686f25b5a5b8bd70dca20f5559b95ae897e> .
_:N2468fea55973448c8affa4be5aae3b6c <http://schema.org/answer> "0" <http://ollama.org/51fc775f336ace8e0c05eaf19a63c436234eaeda9b9c289c952657644ae535c1> .
_:N2468fea55973448c8affa4be5aae3b6c <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/51fc775f336ace8e0c05eaf19a63c436234eaeda9b9c289c952657644ae535c1> .
<http://example.org/course/ZZID> <http://example.org/has_schema_type> _:N2468fea55973448c8affa4be5aae3b6c <http://ollama.org/51fc775f336ace8e0c05eaf19a63c436234eaeda9b9c289c952657644ae535c1> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Internship (DS) Objectif: At the end of the intership, the student should be able to:\n1. 1. Identify and refine a research question or puzzle within an existing field of scientific inquiry and devise a plan for investigating it.\n2. Formulate a program of reading in consultation with a professional scientist to provide context for the investigation\n3. Develop a time-line for the research project and manage work to that time-line\n4. Communicate research results –both orally and in writing – in a style consistent with scientific standards\n5. Work as part of a research team Course content: During the internship, the student will conduct a research work either in a university lab or in the R&D department of a private company. Course name: http://example.org/course/ZZID </page1> <page2> Pages: 178-179 HOURS CS Core = 1 KA Core = 2 HCI-Evaluation: Evaluating the\nDesign CS Core: 1\\. Methods for evaluation with users a. Formative (e.g.,\nneeds-finding, exploratory analysis) and summative assessment (e.g.,\nfunctionality and usability testing) b. Elements to evaluate (e.g., utility,\nefficiency, learnability, user satisfaction, affective elements such as\npleasure and engagement) c. Understanding ethical approval requirements before\nengaging in user research (See also: SETools, SEP-Ethical-Analysis, SEP-\nSecurity, SEP-Privacy, SEP-Professional-Ethics) KA Core: 2\\. Methods for\nevaluation with users (See also: SE-Validation) a. Qualitative methods\n(qualitative coding and thematic analysis) b. Quantitative methods\n(statistical tests) c. Mixed methods (e.g., observation, think-aloud,\ninterview, survey, experiment) d. Presentation requirements (e.g., reports,\npersonas) e. User-centered testing f. Heuristic evaluation g. Challenges and\nshortcomings to effective evaluation (e.g., sampling, generalization) 3\\.\nStudy planning a. How to set study goals b. Hypothesis design c. Approvals\nfrom Institutional Research Boards and ethics committees (See also: SEP-\nEthicalAnalysis, SEP-Security, SEP-Privacy) d. How to pre-register a study e.\nWithin-subjects vs between-subjects design 4\\. Implications and impacts of\ndesign with respect to the environment, material, society, security, privacy,\nethics, and broader impacts. (See also: SEC-Foundations) a. The environment b.\nMaterial c. Society d. Security e. Privacy f. Ethics g. Broader impacts Non-\ncore: 5\\. Techniques and tools for quantitative analysis a. Statistical\npackages b. Visualization tools c. Statistical tests (e.g., ANOVA, t-tests,\npost-hoc analysis, parametric vs non-parametric tests) d. Data exploration and\nvisual analytics; how to calculate effect size. 6\\. Data management a. Data\nstorage and data sharing (open science) b. Sensitivity and identifiability.\nIllustrative Learning Outcomes: CS Core: 1\\. Discuss the differences between\nformative and summative assessment and their role in evaluating design KA\nCore: 2\\. Select appropriate formative or summative evaluation methods at\ndifferent points throughout the development of a design. 3\\. Discuss the\nbenefits of using both qualitative and quantitative methods for evaluation.\n4\\. Evaluate the implications and broader impacts of a given design. 5\\. Plan\na usability evaluation for a given user interface, and justify its study\ngoals, hypothesis design, and study design. 6\\. Conduct a usability evaluation\nof a given user interface and draw defensible conclusions given the study\ndesign. Non-core: 7\\. Select and run appropriate statistical tests on provided\nstudy data to test for significance in the results. 8\\. Pre-register a study\ndesign, with planned statistical tests</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/51fc775f336ace8e0c05eaf19a63c436234eaeda9b9c289c952657644ae535c1> .
_:N2468fea55973448c8affa4be5aae3b6c <http://schema.org/explain> "Some topics from the knowledge unit are not mentioned in the lecture content." <http://ollama.org/51fc775f336ace8e0c05eaf19a63c436234eaeda9b9c289c952657644ae535c1> .
_:Nf8ec0d22df854bed9bbb60da6d48f6a4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/67518ffc4a31c33769f6ed367cf01b579d33dcb1f76911dbe0821abcd27934b4> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Période de suivi en formation par alternance Objectif: nan Course content: nan Course name: http://example.org/course/X4II030 </page1> <page2> Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts\nCS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic\n3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2\nIllustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.\n2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of\nthis topic in computing.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/67518ffc4a31c33769f6ed367cf01b579d33dcb1f76911dbe0821abcd27934b4> .
_:Nf8ec0d22df854bed9bbb60da6d48f6a4 <http://schema.org/answer> "0" <http://ollama.org/67518ffc4a31c33769f6ed367cf01b579d33dcb1f76911dbe0821abcd27934b4> .
_:Nf8ec0d22df854bed9bbb60da6d48f6a4 <http://schema.org/explain> "The lecture content is not explicitly stated, but based on the information provided, it does not seem to cover a substantial part of the Knowledge Unit's CS Core topics, nor the KA Core topics." <http://ollama.org/67518ffc4a31c33769f6ed367cf01b579d33dcb1f76911dbe0821abcd27934b4> .
<http://example.org/course/X4II030> <http://example.org/has_schema_type> _:Nf8ec0d22df854bed9bbb60da6d48f6a4 <http://ollama.org/67518ffc4a31c33769f6ed367cf01b579d33dcb1f76911dbe0821abcd27934b4> .
_:Nab2715ab7c4f4adbaa5a0382256e35d3 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-Vision_Perception_and_Computer_Vision.txt> <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:N767d297d865946e2b2c9700aae49bf3c <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-Vision_Perception_and_Computer_Vision.txt> <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:N767d297d865946e2b2c9700aae49bf3c <http://example.org/has_score> "0.7037509"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
<http://example.org/faiss> <http://example.org/input> "Label: Advanced image and video processing Objectif: At the end of this course, the students will be able to:\n• Understand the digital objects that constitutes the basis for computation in any image field. Discrete topology theorems, algorithms for line drawing, convex shape or distance maps, morphological tools and discrete reconstruction are presented in order to be able to manage an image problem via these tools\n• Manipulate the discrete geometry concepts in a real applicative environment either for medical imaging (image acquisition, tomography, quantizing image information) or for image analysis (medical, materials, ...). A large set of examples is available from the teams projects and are applied with the previous concepts in real time constraints environments Course content: Discrete geometry topics :\n• Discrete topology\n• Discrete line, surface and volume\n• Mathematical morphology\n• Discrete measures\n• Discrete reconstruction\nImage analysis applications topics:\n• medical imaging\n• materials imaging\n• art imaging Course name: http://example.org/course/ZZAIAVP" <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
<http://example.org/course/ZZAIAVP> <http://example.org/is_aligned_with> _:Nab2715ab7c4f4adbaa5a0382256e35d3 <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
<http://example.org/course/ZZAIAVP> <http://example.org/is_aligned_with> _:N767d297d865946e2b2c9700aae49bf3c <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:N767d297d865946e2b2c9700aae49bf3c <http://example.org/has_chunk> "AI-Vision: Perception and Computer Vision\nNon-core:\n1. Computer vision\na. Image acquisition, representation, processing, and properties\nb. Shape representation, object recognition, and segmentation\nc. Motion analysis\nd. Generative models\n2. Audio and speech recognition\n3. Touch and proprioception\n4. Other modalities (e.g., olfaction)\n5. Modularity in recognition\n6. Approaches to pattern recognition (See also: AI-ML)\na. Classification algorithms and measures of classification quality\nb" <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:Nf4652802ccc449cabb59afe6e182c9d6 <http://example.org/has_chunk> ". (See also: GIT-Rendering) \nc. Common Contexts for Algorithms, Data Structures, and Mathematical Functions (e.g., game loops; spatial partitioning, viewport culling, and level of detail; collision detection and resolution; physical simulation; behavior for intelligent agents; procedural content generation) (See also: MSF-Discrete, AL-Foundational) \nd. Media representations (e.g., I/O, and computation techniques for virtual worlds: audio; music; sprites; models and textures; text; dialogue; multimedia (e.g" <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:Nf4652802ccc449cabb59afe6e182c9d6 <http://example.org/has_score> "0.7050053"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:Nab2715ab7c4f4adbaa5a0382256e35d3 <http://example.org/has_score> "0.72172064"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
<http://example.org/course/ZZAIAVP> <http://example.org/is_aligned_with> _:Nf4652802ccc449cabb59afe6e182c9d6 <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:Nab2715ab7c4f4adbaa5a0382256e35d3 <http://example.org/has_chunk> ". Statistical techniques\nc. Deep learning techniques\nIllustrative Learning Outcomes:\n1. Summarize the importance of image and object recognition in AI and indicate several significant\napplications of this technology.\n2. List at least three image-segmentation approaches, such as thresholding, edge-based and region-\nbased algorithms, along with their defining characteristics, strengths, and weaknesses.\n3. Implement 2d object recognition based on contour-based and/or region-based shape\nrepresentations.\n4" <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:Nf4652802ccc449cabb59afe6e182c9d6 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Game_Platforms.txt> <http://faiss.org/413ac8cc3b10d2ea1be6a0b85061e38d166f237fa9cbf336975b9a83ce8e29b1> .
_:Nd1db8a58a2734cfe875de7dce2f45467 <http://schema.org/explain> "The lecture covers the main topics of the Knowledge Unit, including formal automata (FSM, PDA, LBA, TM), formal languages and grammars (RegEx, CFG, CS, RE), decidability and undecidability, halting problem, Church-Turing thesis, and algorithmic correctness, which are all extensively covered in the lecture." <http://ollama.org/bb8332664c07c8e617789da33605def7769cc7a6358bd904a018e4483f9af9f7> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Algorithmique et alignement de chaînes Objectif: nan Course content: Connaissance et acquisition des principales techniques de recherche de motifs dans les textes de grande taille :\n• sans pré-traitement, avec pré-traitement sur le texte et/ou le motif\n• motif exact ou approché\nConnaissance et acquisition des algorithmes associés et de leur complexité.\nComparaison des avantages/inconvénients des techniques présentées, en fonction du contexte d'utilisation.\nConnaissances des principaux algorithmes d’alignement bilingue à partir de corpus.\n1. Recherche exacte de motifs\n• Recherche de motifs par fenêtre glissante\n• Prétraitement du motif\n• Algorithme de Knuth-Morris-Pratt et variantes\n• Algorithme de Boyer-Moore et variantes\n• Correction et évaluation du temps d'exécution\n• Recherche de motifs dans des textes statiques\n• Arbres et arbres compacts des suffixes : définition, construction\n• Automates des suffixes : construction par minimisation de l'arbre des suffixes\n• Recherche de motifs, de répétitions, de marqueurs dans un ou plusieurs textes\n2. Algorithmes d'alignement et Recherche approchée de motifs\n• Transformations : substitution, effacement, insertion\n• Alignement local, alignement global, alignement pondéré\n• Distance de Hamming, distance de Levenshtein, distance d'édition pondérée\n• Algorithme d'alignement de Needleman-Wunch, et sa variante pondérée\n• Recherche de mot avec k différences.\n3. Alignement bilingue\n• Alignement en corpus parallèle\n• Alignement en corpus comparable Course name: http://example.org/course/X3IT030 </page1> <page2> Pages:93-95 HOURS CS Core = 9 KA Core = 23 AL-Models: Computational Models and\nFormal Languages CS Core: 1\\. Formal automata a. Finite State b. Pushdown c.\nLinear Bounded d. Turing Machine 2\\. Formal languages, grammars and Chomsky\nHierarchy (See also: FPL-Translation, FPL-Syntax) a. Regular (Type-3) i.\nRegular Expressions b. Context-Free (Type-2) c. Context-Sensitive (Type-1) d.\nRecursively Enumerable (Type-0) 3\\. Relations among formal automata,\nlanguages, and grammars 4\\. Decidability, (un)computability, and halting 5\\.\nThe Church-Turing thesis 6\\. Algorithmic correctness a. Invariants (e.g., in\niteration, recursion, tree search) KA Core: 7\\. Deterministic and\nnondeterministic automata 8\\. Pumping Lemma proofs a. Proof of Finite\nState/Regular-Language limitation b. Pushdown Automata/Context-Free-Language\nlimitation 9\\. Decidability a. Arithmetization and diagonalization 10\\.\nReducibility and reductions 11\\. Time complexity based on Turing Machine 12\\.\nSpace complexity (e.g., Pspace, Savitch's Theorem) 13\\. Equivalent models of\nalgorithmic computation a. Turing Machines and Variations (e.g., multi-tape,\nnon-deterministic) b. Lambda Calculus (See also: FPL-Functional) c. Mu-\nRecursive Functions Non-core: 14\\. Quantum computation (See also: AR-Quantum)\na. Postulates of quantum mechanics i. State space 94 ii. State evolution iii.\nState composition iv. State measurement b. Column vector representations of\nqubits c. Matrix representations of quantum operations d. Simple quantum gates\n(e.g., XNOT, CNOT) Illustrative Learning Outcomes: CS Core: 1\\. For each\nformal automaton in this unit: a. Explain its definition comparing its\ncharacteristics with this unit's other automata, b. Using an example, explain\nstep-by-step how the automaton operates on input including whether it accepts\nthe associated input, c. Explain an example of inputs that can and cannot be\naccepted by the automaton. 2\\. Given a problem, develop an appropriate\nautomaton that addresses the problem. 3\\. Develop a regular expression for a\ngiven regular language expressed in natural language. 4\\. Explain the\ndifference between regular expressions (Type-3 acceptors) and the regular\nexpressions (Type-2 acceptors) used in programming languages. 5\\. For each\nformal model in this unit: a. Explain its definition comparing its\ncharacteristics with the others in this unit, b. Explain example inputs that\nare and cannot be accepted by the language/grammar. 6\\. Explain a universal\nTuring Machine and its operation. 7\\. Present to an audience of co-workers and\nmanagers the impossibility of providing them a program that checks all other\nprograms, including some seemingly simple ones, for infinite loops including\nan explanation of the Halting problem, why it has no algorithmic solution, and\nits significance for real-world algorithmic computation. 8\\. Explain examples\nof classic uncomputable problems. 9\\. Explain the Church-Turing Thesis and its\nsignificance for algorithmic computation. 10\\. Explain how (loop) invariants\ncan be used to prove the correctness of an algorithm. Illustrative Learning\nOutcomes: KA Core: 11\\. For each formal automaton in this unit explain\n(compare/contrast) its deterministic and nondeterministic capabilities. 12\\.\nApply pumping lemmas, or alternative means, to prove the limitations of Finite\nState and Pushdown automata. 13\\. Apply arithmetization and diagonalization to\nprove the Halting Problem for Turing Machines is Undecidability. 14\\. Given a\nknown undecidable language, apply a mapping reduction or computational history\nto prove that another language is undecidable. 15\\. Convert among equivalently\npowerful notations for a language, including among DFAs, NFAs, and regular\nexpressions, and between PDAs and CFGs. 16\\. Explain Rice's theorem and its\nsignificance. 95 17\\. Explain an example proof of a problem that is\nuncomputable by reducing a classic known uncomputable problem to it. 18\\.\nExplain the Primitive and General Recursive functions (zero, successor,\nselection, primitive recursion, composition, and Mu), their significance, and\nTuring Machine implementations. 19\\. Explain how computation is performed in\nLambda Calculus (e.g., Alpha conversion and Beta reduction) Non-core: 20\\. For\na quantum system give examples that explain the following postulates. a. State\nSpace - system state represented as a unit vector in Hilbert space, b. State\nEvolution - the use of unitary operators to evolve system state, c. State\nComposition - the use of tensor product to compose systems states, d. State\nMeasurement - the probabilistic output of measuring a system state. 21\\.\nExplain the operation of a quantum XNOT or CNOT gate on a quantum bit\nrepresented as a matrix and column vector, respectively</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/bb8332664c07c8e617789da33605def7769cc7a6358bd904a018e4483f9af9f7> .
_:Nd1db8a58a2734cfe875de7dce2f45467 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/bb8332664c07c8e617789da33605def7769cc7a6358bd904a018e4483f9af9f7> .
<http://example.org/course/X3IT030> <http://example.org/has_schema_type> _:Nd1db8a58a2734cfe875de7dce2f45467 <http://ollama.org/bb8332664c07c8e617789da33605def7769cc7a6358bd904a018e4483f9af9f7> .
_:Nd1db8a58a2734cfe875de7dce2f45467 <http://schema.org/answer> "1" <http://ollama.org/bb8332664c07c8e617789da33605def7769cc7a6358bd904a018e4483f9af9f7> .
_:Ne8ca298eb6844b45bd89cfba6ce19025 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/f3f86d6c138c8ad664c02ac6071d7152219b8e0ac30b62809aa0ddd100b01e23> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Management à Visée Innovante et Entrepreunariale Objectif: A l’issue de cet enseignement, l’étudiant devra être capable de :\n• avoir des compétences transversales pour qu'il soit acteur de son avenir professionnel.\n• maîtriser des outils méthodologiques de management et de gestion de projet de façon pratique.\n• connaître les outils de base du management d'équipe en les ayant vécu dans son projet\n• maîtriser des outils de construction de valorisation économique d'un projet innovant\n• construire un projet valorisable économiquement au sein d'une équipe.\n• avoir des compétences transversales telles que manager un projet, s'exprimer en public lors de la présentation du projet devant un jury\n• communiquer à l'écrit selon les règles normalisées de l'entreprise, être en mesure d'identifier les besoins des entreprises en lien avec son projet, être force de proposition dans ses futures fonctions professionnelles. Course content: nan Course name: http://example.org/course/X1LI010 </page1> <page2> Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Requirements Engineering: Core\nConcepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.\nPlaceholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder\nadvanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of\nSE-Requirements Engineering. 2\\. Apply principles in practical scenarios. 3\\.\nAnalyze the importance of this topic in computing.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/f3f86d6c138c8ad664c02ac6071d7152219b8e0ac30b62809aa0ddd100b01e23> .
_:Ne8ca298eb6844b45bd89cfba6ce19025 <http://schema.org/answer> "1" <http://ollama.org/f3f86d6c138c8ad664c02ac6071d7152219b8e0ac30b62809aa0ddd100b01e23> .
<http://example.org/course/X1LI010> <http://example.org/has_schema_type> _:Ne8ca298eb6844b45bd89cfba6ce19025 <http://ollama.org/f3f86d6c138c8ad664c02ac6071d7152219b8e0ac30b62809aa0ddd100b01e23> .
_:Ne8ca298eb6844b45bd89cfba6ce19025 <http://schema.org/explain> "The lecture covers the majority of skills and topics required in the Knowledge Unit, including project management, team management, economic value creation, and communication. However, it does not explicitly cover Requirements Engineering, which is a core concept in the Knowledge Unit." <http://ollama.org/f3f86d6c138c8ad664c02ac6071d7152219b8e0ac30b62809aa0ddd100b01e23> .
_:Ndcf7df087d6c4932bc2a7cc577d1d9f5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/879f0b91830d32fc365e9acf5ea683e626e1aaf3149d3e15caeeebb31458a679> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Algorithmique et alignement de chaînes Objectif: nan Course content: Connaissance et acquisition des principales techniques de recherche de motifs dans les textes de grande taille :\n• sans pré-traitement, avec pré-traitement sur le texte et/ou le motif\n• motif exact ou approché\nConnaissance et acquisition des algorithmes associés et de leur complexité.\nComparaison des avantages/inconvénients des techniques présentées, en fonction du contexte d'utilisation.\nConnaissances des principaux algorithmes d’alignement bilingue à partir de corpus.\n1. Recherche exacte de motifs\n• Recherche de motifs par fenêtre glissante\n• Prétraitement du motif\n• Algorithme de Knuth-Morris-Pratt et variantes\n• Algorithme de Boyer-Moore et variantes\n• Correction et évaluation du temps d'exécution\n• Recherche de motifs dans des textes statiques\n• Arbres et arbres compacts des suffixes : définition, construction\n• Automates des suffixes : construction par minimisation de l'arbre des suffixes\n• Recherche de motifs, de répétitions, de marqueurs dans un ou plusieurs textes\n2. Algorithmes d'alignement et Recherche approchée de motifs\n• Transformations : substitution, effacement, insertion\n• Alignement local, alignement global, alignement pondéré\n• Distance de Hamming, distance de Levenshtein, distance d'édition pondérée\n• Algorithme d'alignement de Needleman-Wunch, et sa variante pondérée\n• Recherche de mot avec k différences.\n3. Alignement bilingue\n• Alignement en corpus parallèle\n• Alignement en corpus comparable Course name: http://example.org/course/X3IT030 </page1> <page2> Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/879f0b91830d32fc365e9acf5ea683e626e1aaf3149d3e15caeeebb31458a679> .
_:Ndcf7df087d6c4932bc2a7cc577d1d9f5 <http://schema.org/answer> "1" <http://ollama.org/879f0b91830d32fc365e9acf5ea683e626e1aaf3149d3e15caeeebb31458a679> .
<http://example.org/course/X3IT030> <http://example.org/has_schema_type> _:Ndcf7df087d6c4932bc2a7cc577d1d9f5 <http://ollama.org/879f0b91830d32fc365e9acf5ea683e626e1aaf3149d3e15caeeebb31458a679> .
_:Ndcf7df087d6c4932bc2a7cc577d1d9f5 <http://schema.org/explain> "The lecture covers topics related to algorithmic and string alignment, including exact and approximate motif search, algorithms for alignment, and multilingual alignment. These topics align with the Knowledge Unit's content on formal programming logic (FPL-Logic), covering aspects such as universal vs existential quantifiers, first-order predicate logic, unification algorithms, cuts, backtracking, closed-world assumptions, and higher-order logic programming." <http://ollama.org/879f0b91830d32fc365e9acf5ea683e626e1aaf3149d3e15caeeebb31458a679> .
_:Nf04e778e9d5e4d739d5bb90477f88cda <http://schema.org/explain> "The lecture covers most of the topics in the Knowledge Unit, including methods for evaluation with users, study planning, and implications and impacts of design." <http://ollama.org/874b63ab76e73005392008ef6e92f6029a7fa2a88c9f22edf9576d90aed26575> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Internship (VICO) Objectif: At the end of the intership, the student should be able to:\n1. 1. Identify and refine a research question or puzzle within an existing field of scientific inquiry and devise a plan for investigating it.\n2. Formulate a program of reading in consultation with a professional scientist to provide context for the investigation\n3. Develop a time-line for the research project and manage work to that time-line\n4. Communicate research results –both orally and in writing – in a style consistent with scientific standards\n5. Work as part of a research team Course content: During the internship, the student will conduct a research work either in a university lab or in a private companie's R&D department. Course name: http://example.org/course/ZZIV </page1> <page2> Pages: 178-179 HOURS CS Core = 1 KA Core = 2 HCI-Evaluation: Evaluating the\nDesign CS Core: 1\\. Methods for evaluation with users a. Formative (e.g.,\nneeds-finding, exploratory analysis) and summative assessment (e.g.,\nfunctionality and usability testing) b. Elements to evaluate (e.g., utility,\nefficiency, learnability, user satisfaction, affective elements such as\npleasure and engagement) c. Understanding ethical approval requirements before\nengaging in user research (See also: SETools, SEP-Ethical-Analysis, SEP-\nSecurity, SEP-Privacy, SEP-Professional-Ethics) KA Core: 2\\. Methods for\nevaluation with users (See also: SE-Validation) a. Qualitative methods\n(qualitative coding and thematic analysis) b. Quantitative methods\n(statistical tests) c. Mixed methods (e.g., observation, think-aloud,\ninterview, survey, experiment) d. Presentation requirements (e.g., reports,\npersonas) e. User-centered testing f. Heuristic evaluation g. Challenges and\nshortcomings to effective evaluation (e.g., sampling, generalization) 3\\.\nStudy planning a. How to set study goals b. Hypothesis design c. Approvals\nfrom Institutional Research Boards and ethics committees (See also: SEP-\nEthicalAnalysis, SEP-Security, SEP-Privacy) d. How to pre-register a study e.\nWithin-subjects vs between-subjects design 4\\. Implications and impacts of\ndesign with respect to the environment, material, society, security, privacy,\nethics, and broader impacts. (See also: SEC-Foundations) a. The environment b.\nMaterial c. Society d. Security e. Privacy f. Ethics g. Broader impacts Non-\ncore: 5\\. Techniques and tools for quantitative analysis a. Statistical\npackages b. Visualization tools c. Statistical tests (e.g., ANOVA, t-tests,\npost-hoc analysis, parametric vs non-parametric tests) d. Data exploration and\nvisual analytics; how to calculate effect size. 6\\. Data management a. Data\nstorage and data sharing (open science) b. Sensitivity and identifiability.\nIllustrative Learning Outcomes: CS Core: 1\\. Discuss the differences between\nformative and summative assessment and their role in evaluating design KA\nCore: 2\\. Select appropriate formative or summative evaluation methods at\ndifferent points throughout the development of a design. 3\\. Discuss the\nbenefits of using both qualitative and quantitative methods for evaluation.\n4\\. Evaluate the implications and broader impacts of a given design. 5\\. Plan\na usability evaluation for a given user interface, and justify its study\ngoals, hypothesis design, and study design. 6\\. Conduct a usability evaluation\nof a given user interface and draw defensible conclusions given the study\ndesign. Non-core: 7\\. Select and run appropriate statistical tests on provided\nstudy data to test for significance in the results. 8\\. Pre-register a study\ndesign, with planned statistical tests</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/874b63ab76e73005392008ef6e92f6029a7fa2a88c9f22edf9576d90aed26575> .
_:Nf04e778e9d5e4d739d5bb90477f88cda <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/874b63ab76e73005392008ef6e92f6029a7fa2a88c9f22edf9576d90aed26575> .
_:Nf04e778e9d5e4d739d5bb90477f88cda <http://schema.org/answer> "1" <http://ollama.org/874b63ab76e73005392008ef6e92f6029a7fa2a88c9f22edf9576d90aed26575> .
<http://example.org/course/ZZIV> <http://example.org/has_schema_type> _:Nf04e778e9d5e4d739d5bb90477f88cda <http://ollama.org/874b63ab76e73005392008ef6e92f6029a7fa2a88c9f22edf9576d90aed26575> .
_:Ne70874e0f9954595a1404aae5e7319e4 <http://schema.org/answer> "0" <http://ollama.org/887ff9a46eaf9d886d74ee8fb6b8853a3b12126ccb954c268ae5e7b596b789b9> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Corpus Objectif: nan Course content: Constitution d’un corpus : 1) metadonnées, 2) critères de sélection des textes et 3) normes linguistiques d'annotation.\n• Définition d'un corpus électronique,\n• Typologies des corpus : monolingues, bilingues, etc. ,\n• Corpus de références,\n• Contraintes de constitution d'un corpus : domaines, genres, situation de discours\n• Metadonnées : DublinCore CES TEI OLAP\n• Mesures d'évaluation intrinsèque et extrinsèque de la qualité du corpus\n• Annotation : mesurer la complexité de l’annotation\n• Codage de la parole, préparée ou conversationnelle\n• Appréhender les outils d’annotation (transcriber, Webanno)\n• Guide d’annotations Course name: http://example.org/course/X3IT060 </page1> <page2> Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing\nNon-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.\nCFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.\nRepresenting meaning/Semantics a. Logic-based knowledge representations b.\nSemantic roles c. Temporal representations d. Beliefs, desires, and intentions\n4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.\nExamples of use: POS tagging and morphology 8\\. Information retrieval (See\nalso: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and\nrecall 9\\. Information extraction 10\\. Language translation 11\\. Text\nclassification, categorization a. Bag of words model 12\\. Deep learning for\nNLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,\nimages + text) d. Generative language models Illustrative Learning Outcomes:\n1\\. Define and contrast deterministic and stochastic grammars, providing\nexamples to show the adequacy of each. 2\\. Simulate, apply, or implement\nclassic and stochastic algorithms for parsing natural language. 3\\. Identify\nthe challenges of representing meaning. 4\\. List the advantages of using\nstandard corpora. Identify examples of current corpora for a variety of NLP\ntasks. 5\\. Identify techniques for information retrieval, language\ntranslation, and text classification. 6\\. Implement a TF/IDF transform, use it\nto extract features from a corpus, and train an off-the-shelf machine learning\nalgorithm using those features to do text classification.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/887ff9a46eaf9d886d74ee8fb6b8853a3b12126ccb954c268ae5e7b596b789b9> .
<http://example.org/course/X3IT060> <http://example.org/has_schema_type> _:Ne70874e0f9954595a1404aae5e7319e4 <http://ollama.org/887ff9a46eaf9d886d74ee8fb6b8853a3b12126ccb954c268ae5e7b596b789b9> .
_:Ne70874e0f9954595a1404aae5e7319e4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/887ff9a46eaf9d886d74ee8fb6b8853a3b12126ccb954c268ae5e7b596b789b9> .
_:Ne70874e0f9954595a1404aae5e7319e4 <http://schema.org/explain> "The lecture only covers corpus constitution and annotation, but not the broader topics of natural language processing, such as parsing, semantics, and machine learning." <http://ollama.org/887ff9a46eaf9d886d74ee8fb6b8853a3b12126ccb954c268ae5e7b596b789b9> .
_:Nb592ee16be8f499699e93d3df3c405ae <http://schema.org/explain> "The lecture covers the CS Core topics of Social Implications and Impact on Individual Well-being, as well as aspects of KA Core on Growth and Control of the internet and Accessibility issues." <http://ollama.org/8b9dfdaf08f131fa50807fbec901bfb969bd65f69eca64949ab6e4cb92c3a698> .
_:Nb592ee16be8f499699e93d3df3c405ae <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/8b9dfdaf08f131fa50807fbec901bfb969bd65f69eca64949ab6e4cb92c3a698> .
_:Nb592ee16be8f499699e93d3df3c405ae <http://schema.org/answer> "1" <http://ollama.org/8b9dfdaf08f131fa50807fbec901bfb969bd65f69eca64949ab6e4cb92c3a698> .
<http://example.org/course/X2I5020> <http://example.org/has_schema_type> _:Nb592ee16be8f499699e93d3df3c405ae <http://ollama.org/8b9dfdaf08f131fa50807fbec901bfb969bd65f69eca64949ab6e4cb92c3a698> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Interaction and applications Objectif: A l'issu de ce cours l'étudiant devra être capable de :\n- Identifier les différentes modalités d’Interaction et leurs propriétés\n- Identifier les outils théorique et pratiques à mettre en œuvre pour développer un système d'interaction\n- Comprendre comment évaluer la pertinence d’une interaction et des solution techniques permettant de la mettre en oeuvre Course content: Dans cette UE, nous proposerons des exemples d'applications liées à l'interaction. Après une courte introduction à l'interaction homme machine, ces applications seront présentées selon 3 points de vue spécifiques aux 3 parcours du secteur données du Master informatique :\n• Introduction au traitement automatique des langues (ATAL)\n• Introduction à la datavisualisation et l'exploration visuelle de données (DS)\n• Introduction à la vision par ordinateur et l'évaluation de l'experience utilisateur (VICO) Course name: http://example.org/course/X2I5020 </page1> <page2> Pages : 211-212 CS Core : 3, KA Core : 2 Computers, the internet, and\nartificial intelligence - perhaps more than any other technologies - have\ntransformed society over the past several decades, with dramatic increases in\nhuman productivity; an explosion of options for news, entertainment, and\ncommunication; and fundamental breakthroughs in almost every branch of science\nand engineering. It is imperative to recognize that this is not a one-way\nstreet. Society also affects computing, resulting in a complex socio-technical\ncontext that is constantly changing, requiring the perspective of history to\nput the present as well as the possible future into appropriate perspective.\nSocial Context provides the foundation for all other knowledge units in SEP,\nparticularly Professional Ethics. CS Core: 1\\. Social implications (e.g.,\npolitical and cultural ideologies) in a hyper-networked world where the\ncapabilities and impact of social media, artificial intelligence, and\ncomputing in general are rapidly evolving. 2\\. Impact of computing\napplications (e.g., social media, artificial intelligence applications) on\nindividual well-being, and safety of all kinds (e.g., physical, emotional,\neconomic). 3\\. Consequences of involving computing technologies, particularly\nartificial intelligence, biometric technologies, and algorithmic decision-\nmaking systems, in civic life (e.g., facial recognition technology, biometric\ntags, resource distribution algorithms, policing software) and how human\nagency and oversight is crucial. 4\\. How deficits in diversity and\naccessibility in computing affect society and what steps can be taken to\nimprove equity in computing. KA Core: 5\\. Growth and control of the internet,\ndata, computing, and artificial intelligence 6\\. Often referred to as the\ndigital divide, differences in access to digital technology resources and its\nresulting ramifications for gender, class, ethnicity, geography, and/or\ndeveloping countries, including consideration of responsibility to those who\nmight be less wealthy, under threat, or who would struggle to have their\nvoices heard. 7\\. Accessibility issues, including legal requirements such as\nWeb Content Accessibility Guidelines (www.w3.org/TR/WCAG21) 8\\. Context-aware\ncomputing Illustrative Learning Outcomes: CS Core: 1\\. Describe the different\nways that computer technology (networks, mobile computing, artificial\nintelligence) mediates social interaction at the personal and collective\nlevels. 2\\. Identify developers' assumptions and values embedded in hardware\nand software design, especially as they pertain to usability for diverse\npopulations including under-served and those with disabilities. 3\\. Interpret\nthe social context of a given design and its implementation. 4\\. Analyze the\nefficacy of a given design and implementation using empirical data. 5\\.\nUnderstand the implications of technology use (e.g., social media) for\ndifferent identities, cultures, and communities. KA Core: 6\\. Describe the\ninternet's role in facilitating communication between citizens, governments,\nand each other. 7\\. Analyze the effects of reliance on computing in the\nimplementation of democracy (e.g., delivery of social services, electronic\nvoting). 8\\. Describe the impact of a lack of appropriate representation of\npeople from historically minoritized populations in the computing profession\n(e.g., industry culture, product diversity). 9\\. Discuss the implications of\ncontext awareness in ubiquitous computing systems. 10\\. Express how access to\nthe internet and computing technologies affect different societies. 11\\.\nIdentify why/how internet access can be viewed as a human right.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/8b9dfdaf08f131fa50807fbec901bfb969bd65f69eca64949ab6e4cb92c3a698> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Optimisation Globale Objectif: • explain the pros&cons of interval computations and their usage for solving nonlinear optimization problems (Understanding)\n• choose and apply the classical interval operators adapted to a global optimization problem (Analysis)\n• explain the role of the components of a branch-and-prune/bound algorithm, and choose the appropriate components for a given global optimization problem (Synthesis) Course content: nan Course name: http://example.org/course/X3IO030 </page1> <page2> Pages: 192-194 HOURS CS Core = 0 KA Core = 40 MSF-Calculus KA Core: 1\\.\nSequences, series, limits 2\\. Single-variable derivatives: definition,\ncomputation rules (chain rule etc.), derivatives of important functions,\napplications 3\\. Single-variable integration: definition, computation rules,\nintegrals of important functions, fundamental theorem of calculus, definite vs\nindefinite, applications (including in probability) 4\\. Parametric and polar\nrepresentations 5\\. Taylor series 6\\. Multivariate calculus: partial\nderivatives, gradient, chain-rule, vector valued functions, 7\\. Optimization:\nconvexity, global vs local minima, gradient descent, constrained optimization,\nand Lagrange multipliers. 8\\. Ordinary Differential Equations (ODEs):\ndefinition, Euler method, applications to simulation, Monte Carlo integration\n9\\. CS applications: gradient descent for machine learning, forward and\ninverse kinematics, applications of calculus to probability Note: the calculus\ntopics listed above are aligned with computer science goals rather than with\ntraditional calculus courses. For example, multivariate calculus is often a\ncourse by itself, but computer science undergraduates only need parts of it\nfor machine learning. Illustrative Learning Outcomes: KA Core: 1\\. Sequences,\nseries, limits a. Explain the difference between infinite sets and sequences.\nb. Explain the formal definition of a limit. c. Derive the limit for examples\nof sequences and series. d. Explain convergence and divergence. e. Apply\nL'Hospital's rule and other approaches to resolving limits. 2\\. Single-\nvariable derivatives: definition, computation rules (chain rule etc.),\nderivatives of important functions, applications a. Explain a derivative in\nterms of limits. b. Explain derivatives as functions. c. Perform elementary\nderivative calculations from limits. d. Apply sum, product, and quotient\nrules. e. Work through examples with important functions. 3\\. Single-variable\nintegration: definition, computation rules, integrals of important functions,\nfundamental theorem of calculus, definite vs indefinite, applications\n(including in probability) a. Explain the definitions of definite and\nindefinite integrals. b. Apply integration rules to examples with important\nfunctions. c. Explore the use of the fundamental theorem of calculus. d. Apply\nintegration to problems. 4\\. Parametric and polar representations a. Apply\nparametric representations of important curves. b. Apply polar\nrepresentations. 5\\. Taylor series a. Derive Taylor series for some important\nfunctions. b. Apply the Taylor series to approximations. 6\\. Multivariate\ncalculus: partial derivatives, gradient, chain-rule, vector valued functions,\napplications to optimization, convexity, global vs local minima. a. Compute\npartial derivatives and gradients. b. Work through examples with vector-valued\nfunctions with gradient notation. c. Explain applications to optimization. 7\\.\nODEs: definition, Euler method, applications to simulation a. Apply the Euler\nmethod to integration. b. Apply the Euler method to a single-variable\ndifferential equation. c. Apply the Euler method to multiple variables in an\nODE.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/0e8b59fca83f5927c9c966b18c968d86ef95ce88b910e5b067d483aae230e94f> .
_:Nee844f92b8414f10b5a9a378b487ae7f <http://schema.org/explain> "The lecture partially covers the content of the Knowledge Unit on Multivariate Calculus and ODEs, but not on Sequences, Series, Limits, Single-variable derivatives, and Single-variable integration." <http://ollama.org/0e8b59fca83f5927c9c966b18c968d86ef95ce88b910e5b067d483aae230e94f> .
_:Nee844f92b8414f10b5a9a378b487ae7f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/0e8b59fca83f5927c9c966b18c968d86ef95ce88b910e5b067d483aae230e94f> .
_:Nee844f92b8414f10b5a9a378b487ae7f <http://schema.org/answer> _:Ndc238ec582f54911a8af074d13e03e0c <http://ollama.org/0e8b59fca83f5927c9c966b18c968d86ef95ce88b910e5b067d483aae230e94f> .
<http://example.org/course/X3IO030> <http://example.org/has_schema_type> _:Nee844f92b8414f10b5a9a378b487ae7f <http://ollama.org/0e8b59fca83f5927c9c966b18c968d86ef95ce88b910e5b067d483aae230e94f> .
_:Ndc238ec582f54911a8af074d13e03e0c <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Integer> <http://ollama.org/0e8b59fca83f5927c9c966b18c968d86ef95ce88b910e5b067d483aae230e94f> .
<http://example.org/course/X3IO030> <http://example.org/has_schema_type> _:Ndc238ec582f54911a8af074d13e03e0c <http://ollama.org/0e8b59fca83f5927c9c966b18c968d86ef95ce88b910e5b067d483aae230e94f> .
_:Ndc238ec582f54911a8af074d13e03e0c <http://schema.org/value> "4"^^<http://www.w3.org/2001/XMLSchema#integer> <http://ollama.org/0e8b59fca83f5927c9c966b18c968d86ef95ce88b910e5b067d483aae230e94f> .
_:N732f7e73422d4cec8c1b1c8608096c8b <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Mathematical_and_Statistical_Foundations_MSF/MSF-Calculus.txt> <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:N9909b8ecd8344613b0cb510f4451886d <http://example.org/has_chunk> "Illustrative Learning Outcomes: \nCS Core: \n1. Explain/understand some of the intellectual property issues relating to programs.  \n2. Explain/understand when code developed by others can be used and proper ways of disclosing their use. \n3. Explain/understand the responsibility of programmers when developing code for an overall solution (which may be developed by a team). \n4. Explain/understand one or more codes of conduct applicable to programmers." <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
<http://example.org/course/X2II100> <http://example.org/is_aligned_with> _:N9909b8ecd8344613b0cb510f4451886d <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
<http://example.org/course/X2II100> <http://example.org/is_aligned_with> _:N732f7e73422d4cec8c1b1c8608096c8b <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:N732f7e73422d4cec8c1b1c8608096c8b <http://example.org/has_score> "0.68143857"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
<http://example.org/course/X2II100> <http://example.org/is_aligned_with> _:Ncfb659f0837a4a22bd0b98a633dde548 <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:Ncfb659f0837a4a22bd0b98a633dde548 <http://example.org/has_chunk> "Pages: TBD\nHOURS\n    CS Core = TBD\n    KA Core = TBD\n\nGIT-3D Modeling: Core Concepts\nCS Core:\n1. Placeholder topic 1\n2. Placeholder topic 2\n3. Placeholder topic 3\n\nKA Core:\n4. Placeholder advanced topic 1\n5. Placeholder advanced topic 2\n\nIllustrative Learning Outcomes:\n1. Explain key concepts of GIT-3D Modeling.\n2. Apply principles in practical scenarios.\n3. Analyze the importance of this topic in computing." <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:N9909b8ecd8344613b0cb510f4451886d <http://example.org/has_score> "0.68263304"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:N732f7e73422d4cec8c1b1c8608096c8b <http://example.org/has_chunk> ". CS applications: gradient descent for machine learning, forward and inverse kinematics,\napplications of calculus to probability\nNote: the calculus topics listed above are aligned with computer science goals rather than with\ntraditional calculus courses. For example, multivariate calculus is often a course by itself, but computer\nscience undergraduates only need parts of it for machine learning.\nIllustrative Learning Outcomes:\nKA Core:\n1. Sequences, series, limits\na" <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
<http://example.org/faiss> <http://example.org/input> "Label: Applications industrielles sur les données Objectif: nan Course content: L’objectif de cette UE est de proposer un panorama des cas d’usages et des frameworks associés actuellement déployés en milieu industriel sur des applications relevant de l’Intelligence Artificielle (IA). Trois domaines sont plus particulièrement visés : l’analyse d’images, l’analyse de données et l’analyse sémantique. Ces trois domaines sont au centre du secteur IA et données.\nL’UE se décomposera en 4 demi-journées à chaque fois sur le site de l’un des trois partenaires industriels (Capgemini, CGI et Sopra Steria). La première demi-journée sera consacrée à une présentation globale du contexte actuel de l’IA en milieu industrielle de même qu’un état des lieux sur les principaux cas d’usages. Les trois autres demi-journées seront consacrées à un cas d’usage particulier (RPA pour CGI, Analyse Sémantique Sopra, Data Science pour CAP) et à la manipulation des frameworks de base. Course name: http://example.org/course/X2II100" <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:Ncfb659f0837a4a22bd0b98a633dde548 <http://example.org/has_score> "0.6808791"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:Ncfb659f0837a4a22bd0b98a633dde548 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-3D_Modeling.txt> <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:N9909b8ecd8344613b0cb510f4451886d <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> <http://faiss.org/76d0b2df6b3ebe4e8427b2c251e9d353234c78ee8d903983113e95b47bb3bed9> .
_:Nb480f6f2adc14f2db6a0e18745730ff2 <http://example.org/has_score> "0.67315733"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:Nb6c271bc01244b2081d5b33c3bc5fa57 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Fundamental_Programming_Concepts_and_Practices.txt> <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:Nac59903a6fb144819cd258cb8e701ad1 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:Nb6c271bc01244b2081d5b33c3bc5fa57 <http://example.org/has_chunk> ". Libraries and frameworks provided by the language (when/where applicable) \n8. Recursion \n9. Dealing with runtime errors in programs (e.g., exception handling). \n10. Basic concepts of programming errors, testing, and debugging (See also:  SE-Construction, SEC-Coding)  \n11. Documenting/commenting code at the program and module level.(See also:  SE-Construction)   \n12. Develop a security mindset. (See also: SEC-Foundations)" <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:Nac59903a6fb144819cd258cb8e701ad1 <http://example.org/has_chunk> ". Layering principles (e.g., encapsulation and hourglass model) (See also: SF-Foundations)\n6. Network elements (e.g., routers, switches, hubs, access points, and hosts)\n7. Basic queueing concepts (e.g., relationship with latency, congestion, service levels, etc.)\nIllustrative Learning Outcomes:\nCS Core:\n1. Articulate the organization of the internet.\n2. List and define the appropriate network terminology\n3. Describe the layered structure of a typical networked architecture.\n4" <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
<http://example.org/course/X2I4020> <http://example.org/is_aligned_with> _:Nb6c271bc01244b2081d5b33c3bc5fa57 <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:Nb480f6f2adc14f2db6a0e18745730ff2 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Operating_Systems_OS/OS-Protection_Protection_and_Safety.txt> <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:Nac59903a6fb144819cd258cb8e701ad1 <http://example.org/has_score> "0.6966163"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
<http://example.org/course/X2I4020> <http://example.org/is_aligned_with> _:Nac59903a6fb144819cd258cb8e701ad1 <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
<http://example.org/course/X2I4020> <http://example.org/is_aligned_with> _:Nb480f6f2adc14f2db6a0e18745730ff2 <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:Nb480f6f2adc14f2db6a0e18745730ff2 <http://example.org/has_chunk> ". Security methods and devices (See also: SEC-Foundations)\n Example concepts:\na. Rings of protection (history from Multics to virtualized x86)\nb. x86_64 rings -1 and -2 (hypervisor and ME/PSP)\n7. Protection, access control, and authentication (See also: SEC-Foundations, SEC-Crypto)\nIllustrative Learning Outcomes:\nCS Core:\n1. Understand the requirement for protection and security mechanisms in operating systems.\n2. List and describe the attack vectors that leverage OS vulnerabilities.\n3" <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:Nb6c271bc01244b2081d5b33c3bc5fa57 <http://example.org/has_score> "0.6661657"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
<http://example.org/faiss> <http://example.org/input> "Label: Ingénierie des réseaux Objectif: •   Maîtriser le fonctionnement des réseaux locaux haut débit et des réseaux sans fil (M)\n• Etablir un plan d'adressage d'un réseau simple et maillé (M)\n• Savoir construire des tables de routage (M)\n•   Connaitre les algorithmes de routage dynamique (M)\n• Mettre en œuvre un protocole d'échange via la programmation réseaux ()\n•   Décrire le niveau de sécurité d'un réseau d'entreprise (I)\n• Etre capable de nommer des solutions de sécurité réseaux (I)\n• Configurer des services réseaux sur une infrastructure locale (A)\n• Comprendre les architectures réseaux à qualité de service (QoS) et celles permettant l'ingénierie de trafic (I)\n• Comprendre les problèmes de la cybercriminalité et appréhender les solutions préventives à ce risque (I) Course content: Adressage et routage IP (v4, v6)\nProtocole de routage dynamique (RIP, OSPF, BGP) Protocole IP et résolution d’adresse ARP et protocole ICMP\nLes réseaux sans fil : IEEE 802.11, IEEE802.15, Internet of Things (IoT) Les réseaux virtuels (VLAN)\nLa sécurité dans les réseaux (filaire, sans-fil, protocole, cryptographie)\nPolitique de la sécurité, les solutions, le coûts - La Cyberdéfense contre la Cybercriminalité La virtualisation (SDN/NFV/Cloud)\nPratique et projets : mise en oeuvre de routage (Packet Tracer), plateforme IoT Course name: http://example.org/course/X2I4020" <http://faiss.org/fdb8597ce9b672c3f51a2dd3ce50562c570b69cc4101318509c88978fa6b08d3> .
_:N0f98cfef85e644768b2485554229e45b <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Society_Ethics_and_the_Profession_SEP/SEP-Social_Context.txt> <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
<http://example.org/course/X2CI010> <http://example.org/is_aligned_with> _:N0f98cfef85e644768b2485554229e45b <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
_:N0f7b946210804c49840383390ea07dde <http://example.org/has_score> "0.6529287"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
_:N06803af280054c72b0770e39c63fdc8a <http://example.org/has_chunk> "CS Core: \n1. Oral, written, and electronic team and group communication \n2. Technical communication materials (e.g., source code, and documentation, tutorials, reference materials, API documentation) \n3. Communicating with different stakeholders such as customers, leadership, or the public \n4. Team collaboration (including tools) and conflict resolution \n5. Accessibility and inclusivity requirements for addressing professional audiences \n6" <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
<http://example.org/course/X2CI010> <http://example.org/is_aligned_with> _:N0f7b946210804c49840383390ea07dde <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
_:N0f7b946210804c49840383390ea07dde <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Security_SEC/SEC-Incident_Response.txt> <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
_:N06803af280054c72b0770e39c63fdc8a <http://example.org/has_score> "0.6488658"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
<http://example.org/faiss> <http://example.org/input> "Label: Communication CMI S8 Objectif: A l’issue de cette U.E., L’étudiant\n• connaît le fonctionnement d’un service RH,\n• connait le processus de recrutement dans une entreprise,\n• utilise les réseaux sociaux,\n• sait préparer un entretien pour un stage ou une embauche. Course content: nan Course name: http://example.org/course/X2CI010" <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
_:N06803af280054c72b0770e39c63fdc8a <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Society_Ethics_and_the_Profession_SEP/SEP-Communication.txt> <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
_:N0f98cfef85e644768b2485554229e45b <http://example.org/has_chunk> ". \n7. Accessibility issues, including legal requirements such as Web Content Accessibility Guidelines (www.w3.org/TR/WCAG21) \n8. Context-aware computing  \n \nIllustrative Learning Outcomes: \nCS Core: \n1. Describe the different ways that computer technology (networks, mobile computing, artificial intelligence) mediates social interaction at the personal and collective levels. \n2" <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
_:N0f98cfef85e644768b2485554229e45b <http://example.org/has_score> "0.6604669"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
<http://example.org/course/X2CI010> <http://example.org/is_aligned_with> _:N06803af280054c72b0770e39c63fdc8a <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
_:N0f7b946210804c49840383390ea07dde <http://example.org/has_chunk> "Pages: TBD\nHOURS\n    CS Core = TBD\n    KA Core = TBD\n\nSEC-Incident Response: Core Concepts\nCS Core:\n1. Placeholder topic 1\n2. Placeholder topic 2\n3. Placeholder topic 3\n\nKA Core:\n4. Placeholder advanced topic 1\n5. Placeholder advanced topic 2\n\nIllustrative Learning Outcomes:\n1. Explain key concepts of SEC-Incident Response.\n2. Apply principles in practical scenarios.\n3. Analyze the importance of this topic in computing." <http://faiss.org/3902a701fce92d3dbe9c959e0e82dfd89f5c07257724acc2945f2505fe44057f> .
<http://example.org/course/X2I4020> <http://example.org/has_schema_type> _:Na9affdcb156a401aa6e4260b3263070d <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
_:Na9affdcb156a401aa6e4260b3263070d <http://schema.org/text> "The lecture covers a large subset of the knowledge Unit, with a match rate of approximately 90%" <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Ingénierie des réseaux Objectif: •   Maîtriser le fonctionnement des réseaux locaux haut débit et des réseaux sans fil (M)\n• Etablir un plan d'adressage d'un réseau simple et maillé (M)\n• Savoir construire des tables de routage (M)\n•   Connaitre les algorithmes de routage dynamique (M)\n• Mettre en œuvre un protocole d'échange via la programmation réseaux ()\n•   Décrire le niveau de sécurité d'un réseau d'entreprise (I)\n• Etre capable de nommer des solutions de sécurité réseaux (I)\n• Configurer des services réseaux sur une infrastructure locale (A)\n• Comprendre les architectures réseaux à qualité de service (QoS) et celles permettant l'ingénierie de trafic (I)\n• Comprendre les problèmes de la cybercriminalité et appréhender les solutions préventives à ce risque (I) Course content: Adressage et routage IP (v4, v6)\nProtocole de routage dynamique (RIP, OSPF, BGP) Protocole IP et résolution d’adresse ARP et protocole ICMP\nLes réseaux sans fil : IEEE 802.11, IEEE802.15, Internet of Things (IoT) Les réseaux virtuels (VLAN)\nLa sécurité dans les réseaux (filaire, sans-fil, protocole, cryptographie)\nPolitique de la sécurité, les solutions, le coûts - La Cyberdéfense contre la Cybercriminalité La virtualisation (SDN/NFV/Cloud)\nPratique et projets : mise en oeuvre de routage (Packet Tracer), plateforme IoT Course name: http://example.org/course/X2I4020 </page1> <page2> Pages : 168-169 CS Core : 20, KA Core : None CS Core: 1\\. Basic concepts such\nas variables, primitive data types, expressions, and their evaluation 2\\. How\nimperative programs work: state and state transitions on execution of\nstatements, flow of control 3\\. Basic constructs such as assignment\nstatements, conditional and iterative statements, basic I/O 4\\. Key modularity\nconstructs such as functions (and methods and classes, if supported in the\nlanguage) and related concepts like parameter passing, scope, abstraction,\ndata encapsulation (See also: FPL-OOP) 5\\. Input and output using files and\nAPIs 6\\. Structured data types available in the chosen programming language\nlike sequences (e.g., arrays, lists), associative containers (e.g.,\ndictionaries, maps), others (e.g., sets, tuples) and when and how to use them\n(See also: AL-Foundational) 7\\. Libraries and frameworks provided by the\nlanguage (when/where applicable) 8\\. Recursion 9\\. Dealing with runtime errors\nin programs (e.g., exception handling). 10\\. Basic concepts of programming\nerrors, testing, and debugging (See also: SE-Construction, SEC-Coding) 11\\.\nDocumenting/commenting code at the program and module level.(See also: SE-\nConstruction) 12\\. Develop a security mindset. (See also: SEC-Foundations)\nIllustrative Learning Outcomes: CS Core: In these learning outcomes, the term\n\"develop\" means \"design, write, test, and debug.\" 1\\. Develop programs that\nuse the fundamental programming constructs: assignment and expressions, basic\nI/O, conditional and iterative statements. 2\\. Develop programs using\nfunctions with parameter passing. 3\\. Develop programs that effectively use\nthe different structured data types provided in the language like\narrays/lists, dictionaries, and sets. 4\\. Develop programs that use file I/O\nto provide data persistence across multiple executions. 5\\. Develop programs\nthat use language-provided libraries and frameworks (where applicable). 6\\.\nDevelop programs that use APIs to access or update data (e.g., from the web).\n7\\. Develop programs that create simple classes and instantiate objects of\nthose classes (if supported by the language). 8\\. Explain the concept of\nrecursion and identify when and how to use it effectively. 9\\. Develop\nrecursive functions. 10\\. Develop programs that can handle runtime errors.\n11\\. Read a given program and explain what it does. 12\\. Write comments for a\nprogram or a module specifying what it does. 13\\. Trace the flow of control\nduring the execution of a program. 14\\. Use appropriate terminology to\nidentify elements of a program (e.g., identifier, operator, operand).</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
_:Nd36d622fdb194ea490d837649b81180a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
_:Nd36d622fdb194ea490d837649b81180a <http://schema.org/answer> _:N9787e30003c64c8f8ff07059626baf92 <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
<http://example.org/course/X2I4020> <http://example.org/has_schema_type> _:N9787e30003c64c8f8ff07059626baf92 <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
_:Nd36d622fdb194ea490d837649b81180a <http://schema.org/explain> _:Na9affdcb156a401aa6e4260b3263070d <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
<http://example.org/course/X2I4020> <http://example.org/has_schema_type> _:Nd36d622fdb194ea490d837649b81180a <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
_:N9787e30003c64c8f8ff07059626baf92 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Quantity> <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
_:N9787e30003c64c8f8ff07059626baf92 <http://schema.org/value> "9"^^<http://www.w3.org/2001/XMLSchema#integer> <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
_:Na9affdcb156a401aa6e4260b3263070d <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Text> <http://ollama.org/e124c9e6366121623c376c56828a16b2a4bba57d1076462525d3e951e1ec69f9> .
_:Ne762a82904134af19ee83e89e572a468 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/f9c6754d95ce1645547057870af3ca86b38322b663b6b16f8f087cf9a2d071a2> .
_:Ne762a82904134af19ee83e89e572a468 <http://schema.org/answer> "1" <http://ollama.org/f9c6754d95ce1645547057870af3ca86b38322b663b6b16f8f087cf9a2d071a2> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Programmation par contraintes avancée Objectif: - Maîtriser différentes techniques (approche complète et incomplète) de résolution de problème de contraintes.\n- Connaître différentes approches de modélisation de problème de contraintes\n- Comprendre les mécanismes avancés de résolution de problème de contraintes, comme par exemple les méthodes parallèles, la recherche autonome, l'hybridation de méthode. Course content: nan Course name: http://example.org/course/X3IO020 </page1> <page2> Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic\nProgramming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-\nLRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See\nalso: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical\nconnectives and simpler relations. 4\\. Definitions of Horn clause, facts,\ngoals and subgoals. 5\\. Unification and unification algorithm; unification vs\nassertion vs expression evaluation. 6\\. Mixing relations with functions. (See\nalso: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-\nworld vs open-world assumptions. Non-core: 9\\. Memory overhead of variable\ncopying in handling iterative programs. 10\\. Programming constructs to store\npartial computation and pruning search trees. 11\\. Mixing functional\nprogramming and logic programming using concepts such as equational logic,\nnarrowing, residuation, and semantic unification. (See also: FPL-Functional)\n12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-\nLRR) 13\\. Integration with other programming paradigms such as object-oriented\nprogramming. 14\\. Advance programming constructs such as difference-lists,\ncreating user defined data structures, set of, etc. Illustrative learning\noutcomes: KA Core: 1\\. Use a logic language to implement a conventional\nalgorithm. 2\\. Use a logic language to implement an algorithm employing\nimplicit search using clauses, relations, and cuts. 3\\. Use a simple\nillustrative example to show correspondence between First Order Predicate\nLogic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to\nillustrate the unification algorithm and its role of parameter-passing in\nquery reduction. 5\\. Use simple logic programs interleaving relations,\nfunctions, and recursive programming such as factorial and Fibonacci numbers\nand simple complex relationships between entities and illustrate execution and\nparameter-passing using unification and backtracking. Non-core: 6\\. Illustrate\ncomputation of simple programs such as Fibonacci and show overhead of\nrecomputation, and then show how to improve execution overhead.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/f9c6754d95ce1645547057870af3ca86b38322b663b6b16f8f087cf9a2d071a2> .
_:Ne762a82904134af19ee83e89e572a468 <http://schema.org/explain> "The lecture covers the core content of the Knowledge Unit, including techniques for problem resolution and advanced mechanisms such as parallel methods and hybridization." <http://ollama.org/f9c6754d95ce1645547057870af3ca86b38322b663b6b16f8f087cf9a2d071a2> .
<http://example.org/course/X3IO020> <http://example.org/has_schema_type> _:Ne762a82904134af19ee83e89e572a468 <http://ollama.org/f9c6754d95ce1645547057870af3ca86b38322b663b6b16f8f087cf9a2d071a2> .
_:Nd197c484342e4f9eb48219f70de0279e <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Methodologies_Formal_Development_Methodologies.txt> <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
<http://example.org/course/X3IA040> <http://example.org/is_aligned_with> _:Nd197c484342e4f9eb48219f70de0279e <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:N69516f27723b40faa58a631c2bf1bb1f <http://example.org/has_chunk> ".\n2. Given a problem, develop an appropriate automaton that addresses the problem.\n3. Develop a regular expression for a given regular language expressed in natural language.\n4. Explain the difference between regular expressions (Type-3 acceptors) and the regular expressions\n(Type-2 acceptors) used in programming languages.\n5. For each formal model in this unit:\na. Explain its definition comparing its characteristics with the others in this unit,\nb" <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:N69516f27723b40faa58a631c2bf1bb1f <http://example.org/has_score> "0.721132"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:Nd197c484342e4f9eb48219f70de0279e <http://example.org/has_chunk> ".\n6. Formal modeling and manual refinement/implementation of software systems.\n7. Use of symbolic testing and fuzzing in software development.\n8. Model checking.\n9. Understanding of situations where formal methods can be effectively applied and how to structure\ndevelopment to maximize their value.\nIllustrative learning outcomes:\nNon-core:\n1. Use formal modeling techniques to develop and validate architectures.\n2" <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
<http://example.org/course/X3IA040> <http://example.org/is_aligned_with> _:N2c9d232182db4ff0b5a1217983dbb2fb <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:N2c9d232182db4ff0b5a1217983dbb2fb <http://example.org/has_chunk> "AL-Models: Computational Models and Formal Languages\nCS Core:\n1. Formal automata\na. Finite State\nb. Pushdown\nc. Linear Bounded\nd. Turing Machine\n2. Formal languages, grammars and Chomsky Hierarchy\n(See also: FPL-Translation, FPL-Syntax)\na. Regular (Type-3)\ni. Regular Expressions\nb. Context-Free (Type-2)\nc. Context-Sensitive (Type-1)\nd. Recursively Enumerable (Type-0)\n3. Relations among formal automata, languages, and grammars\n4. Decidability, (un)computability, and halting\n5. The Church-Turing thesis\n6" <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:N2c9d232182db4ff0b5a1217983dbb2fb <http://example.org/has_score> "0.7157275"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:Nd197c484342e4f9eb48219f70de0279e <http://example.org/has_score> "0.71972597"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:N2c9d232182db4ff0b5a1217983dbb2fb <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Algorithmic_Foundations_AL/AL-Models_Computational_Models_and_Formal_Languages.txt> <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
<http://example.org/faiss> <http://example.org/input> "Label: Ingénierie dirigée par les modèles Objectif: 1. Comprendre les principes et les objectifs de l'ingénierie dirigée par sur les modèles.\n2. Comprendre les différences entre la modélisation et la méta-modélisation.\n3. Comprendre les différences entre les langages spécifiques au domaine et les langages génériques.\n4. Connaître les différences entre la syntaxe abstraite , la syntaxe concrète et la sémantique d'un langage.\n5. Être capable de concevoir un langage spécifique au domaine.\n6. Être capable d'intégrer l'ingénierie basée sur les modèles dans le processus de développement logiciel.\n7. Être capable de réaliser des transformations de modèle à modèle.\n8. Être capable de réaliser effectuer des transformations de modèle à texte (génération de code). Course content: nan Course name: http://example.org/course/X3IA040" <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
<http://example.org/course/X3IA040> <http://example.org/is_aligned_with> _:N69516f27723b40faa58a631c2bf1bb1f <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:N69516f27723b40faa58a631c2bf1bb1f <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Algorithmic_Foundations_AL/AL-Models_Computational_Models_and_Formal_Languages.txt> <http://faiss.org/a1409cc1e5fd373a0ff7f2ba81000363a15a9c58f830d2b4f58e6b1e0c1b29b7> .
_:N9c2d9280aaf14224b66d618ce8d340ac <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
_:Nfd9a409ae05a40cab707d8dfd335869c <http://example.org/has_score> "0.73759866"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
<http://example.org/course/X3IT010> <http://example.org/is_aligned_with> _:N763ecc62f95e49d8afa5f4ca82392cdc <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
_:N763ecc62f95e49d8afa5f4ca82392cdc <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Design_Design_Principles_of_Programming_Languages.txt> <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
<http://example.org/faiss> <http://example.org/input> "Label: Développement logiciel en industrie de la langue Objectif: nan Course content: Sensibiliser aux problèmes/solutions d'analyse de contenus textuels non structurés multilingues et multimodaux\nSensibiliser aux problèmes/solutions d'interopérabilité technique et sémantique de composants de TALP\nSensibiliser aux problèmes/solutions de traitement et stockage de données distribués et échelonnables (scalables)\nPrésentation de cadres de développement de chaînes de traitement intégrant des composants hétérogènes et distribuées en favorisant la maintenance et la réutilisation de ressources\nDonner un aperçu des outils/instruments/framework existants pour les différentes activités du TALP et permettre la prise en main de quelques uns Course name: http://example.org/course/X3IT010" <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
<http://example.org/course/X3IT010> <http://example.org/is_aligned_with> _:Nfd9a409ae05a40cab707d8dfd335869c <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
_:N9c2d9280aaf14224b66d618ce8d340ac <http://example.org/has_score> "0.7229596"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
_:N763ecc62f95e49d8afa5f4ca82392cdc <http://example.org/has_score> "0.7165166"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
_:Nfd9a409ae05a40cab707d8dfd335869c <http://example.org/has_chunk> ". (See also: AI-LRR)\n13. Integration with other programming paradigms such as object-oriented programming.\n14. Advance programming constructs such as difference-lists, creating user defined data structures, set\nof, etc.\nIllustrative learning outcomes:\nKA Core:\n1. Use a logic language to implement a conventional algorithm.\n2. Use a logic language to implement an algorithm employing implicit search using clauses, relations,\nand cuts.\n3" <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
_:Nfd9a409ae05a40cab707d8dfd335869c <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
_:N9c2d9280aaf14224b66d618ce8d340ac <http://example.org/has_chunk> ". Techniques for learning and mastering a platform-specific programming language \n \nIllustrative Learning Outcomes: \nCS Core: \n1. List the constraints of mobile programming. \n2. List the characteristics of scripting languages. \n3. Describe the three-tier model of web programming.  \n4. Describe how the state is maintained in web programming." <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
_:N763ecc62f95e49d8afa5f4ca82392cdc <http://example.org/has_chunk> ". Formal description of a programming language\n6. Green computing principles (See also: SEP-Sustainability)\nIllustrative Learning Outcomes:\nNon-core:\n1. Understand what constitutes good language design and apply that knowledge to evaluate a real\nprogramming language." <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
<http://example.org/course/X3IT010> <http://example.org/is_aligned_with> _:N9c2d9280aaf14224b66d618ce8d340ac <http://faiss.org/8f4d9f14af50a1784051c3366fd0982a9786c0c4c77de0f55e7f5c5a7cd3ac48> .
<http://example.org/course/X2II110> <http://example.org/has_schema_type> _:Ne77e3a9610b54fe68ef1077a3c1ac8c6 <http://ollama.org/389a6238761b453862e48092136bd263a2dfeb73275a705701895e4da16667cb> .
_:Ne77e3a9610b54fe68ef1077a3c1ac8c6 <http://schema.org/answer> "0" <http://ollama.org/389a6238761b453862e48092136bd263a2dfeb73275a705701895e4da16667cb> .
_:Ne77e3a9610b54fe68ef1077a3c1ac8c6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/389a6238761b453862e48092136bd263a2dfeb73275a705701895e4da16667cb> .
_:Ne77e3a9610b54fe68ef1077a3c1ac8c6 <http://schema.org/explain> "The lecture content is unrelated to Software Engineering-Project Management topics such as Project Planning, Scheduling, Risk Management, and Quality Assurance." <http://ollama.org/389a6238761b453862e48092136bd263a2dfeb73275a705701895e4da16667cb> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Research Project Objectif: - Mettre en oeuvre sa capacité d'analyse sur un sujet de recherche, et être force de proposition.\n- Synthétiser le travail effectué dans un compte rendu de manière concise, correcte, et complète.\n- Préparer des supports puis présenter oralement le travail effectué de manière dynamique et convaincante. Course content: nan Course name: http://example.org/course/X2II110 </page1> <page2> Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Project Management: Core\nConcepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.\nPlaceholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder\nadvanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of\nSE-Project Management. 2\\. Apply principles in practical scenarios. 3\\.\nAnalyze the importance of this topic in computing.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/389a6238761b453862e48092136bd263a2dfeb73275a705701895e4da16667cb> .
_:N13c2188942034af59c0019be866ecced <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/e8e33f166f179a07aa5aa5bcce8b06a81d59c5a0ec924fde0dd166ccb188dfcc> .
_:N13c2188942034af59c0019be866ecced <http://schema.org/answer> "1" <http://ollama.org/e8e33f166f179a07aa5aa5bcce8b06a81d59c5a0ec924fde0dd166ccb188dfcc> .
<http://example.org/course/X3IA100> <http://example.org/has_schema_type> _:N13c2188942034af59c0019be866ecced <http://ollama.org/e8e33f166f179a07aa5aa5bcce8b06a81d59c5a0ec924fde0dd166ccb188dfcc> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Conferences Objectif: nan Course content: nan Course name: http://example.org/course/X3IA100 </page1> <page2> Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-\nFundamentals: Fundamentals CS Core: 1\\. Importance of networking in\ncontemporary computing, and associated challenges. (See also: SEPContext, SEP-\nPrivacy) 2\\. Organization of the internet (e.g., users, Internet Service\nProviders, autonomous systems, content providers, content delivery networks)\n3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles\n(application, transport, network, datalink, and physical) 5\\. Layering\nprinciples (e.g., encapsulation and hourglass model) (See also: SF-\nFoundations) 6\\. Network elements (e.g., routers, switches, hubs, access\npoints, and hosts) 7\\. Basic queueing concepts (e.g., relationship with\nlatency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS\nCore: 1\\. Articulate the organization of the internet. 2\\. List and define the\nappropriate network terminology 3\\. Describe the layered structure of a\ntypical networked architecture. 4\\. Identify the different types of complexity\nin a network (edges, core, etc.).</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/e8e33f166f179a07aa5aa5bcce8b06a81d59c5a0ec924fde0dd166ccb188dfcc> .
_:N13c2188942034af59c0019be866ecced <http://schema.org/explain> "Most of the Fundamentals CS Core content is covered in this lecture." <http://ollama.org/e8e33f166f179a07aa5aa5bcce8b06a81d59c5a0ec924fde0dd166ccb188dfcc> .
<http://example.org/course/ZZFLAEC> <http://example.org/is_aligned_with> _:N6aad39c8f1e145bb985795eaa657a226 <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
<http://example.org/course/ZZFLAEC> <http://example.org/is_aligned_with> _:Ncd30e070bed747ccb5cdda63e1edfed3 <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:Ncd30e070bed747ccb5cdda63e1edfed3 <http://example.org/has_score> "0.6389125"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:Ncd30e070bed747ccb5cdda63e1edfed3 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-SEP_Society_Ethics_and_the_Profession.txt> <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
<http://example.org/faiss> <http://example.org/input> "Label: French langage and European culture Objectif: Upon completing the course in French as a foreign language, students will be able to :\n• introduce themselves giving basic information about their country, family, studies\n• greet native speakers in an appropriate way\n• interact with native speakers in routine basic tasks (shopping, ordering at a restaurant)\n• fill in registration forms Course content: Grammar\n• tenses : présent, futur proche, passé proche, the imperative\n• questions and negations\n• pronouns (subject and object)\n• some irregular verbs (être, avoir, prendre, faire, aller, venir) Vocabulary\n• days of the week, months, numbers, jobs, food items, clothes, modes of transportation, nationalities...\nPhonetics\n• difficult vowel and consonant sounds\n• liaisons\nCulture and civilization\n• the outdoor market, Christmas, food and meals, the pace of life in France Course name: http://example.org/course/ZZFLAEC" <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:Nf0e8c4c930c645458739b268bb9180d2 <http://example.org/has_score> "0.6379156"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:N6aad39c8f1e145bb985795eaa657a226 <http://example.org/has_score> "0.6604949"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
<http://example.org/course/ZZFLAEC> <http://example.org/is_aligned_with> _:Nf0e8c4c930c645458739b268bb9180d2 <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:Nf0e8c4c930c645458739b268bb9180d2 <http://example.org/has_chunk> ". Cultural competence in communication including considering the impact of difference in natural language \n \nKA Core: \n7. Tradeoffs in competing factors that affect communication channels and choices \n8. Communicating to solve problems or make recommendations in the workplace, such as raising ethical concerns or addressing accessibility issues \n \nIllustrative Learning Outcomes: \nCS Core: \n1" <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:N6aad39c8f1e145bb985795eaa657a226 <http://example.org/has_chunk> "FPL-Pragmatics: Language Pragmatics\nNon-core:\n1. Effect of technology needs and software requirements on programming language development and\nevolution\n2. Problem domains and programming paradigm\n3. Criteria for good programming language design\na. Principles of language design such as orthogonality\nb. Defining control and iteration constructs\nc. Modularization of large software\n4. Evaluation order, precedence, and associativity\n5. Eager vs delayed evaluation\n6. Defining control and iteration constructs\n7" <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:Nf0e8c4c930c645458739b268bb9180d2 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Society_Ethics_and_the_Profession_SEP/SEP-Communication.txt> <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:Ncd30e070bed747ccb5cdda63e1edfed3 <http://example.org/has_chunk> "FPL-SEP: Society, Ethics, and the Profession\nNon-core:\n1. Impact of English-centric programming languages\n2. Enhancing accessibility and inclusivity for people with disabilities – Supporting assistive\ntechnologies\n3. Human factors related to programming languages and usability\na. Impact of syntax on accessibility\nb. Supporting cultural differences (e.g., currency, decimals, dates)\nc. Neurodiversity\n4. Etymology of terms such as “class,” “master,” and “slave” in programming languages\n5" <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
_:N6aad39c8f1e145bb985795eaa657a226 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Pragmatics_Language_Pragmatics.txt> <http://faiss.org/79028b75a9331f737644eb51e0455f701770b651d86c7ab1e21fe8901396a6fb> .
<http://example.org/faiss> <http://example.org/input> "Label: Langages de programmation de haut-niveau Objectif: • Comprendre les différences d'objectifs et de moyens entre langages interprétés et langages compilés. Appréhender les notions de typage fort, typage dynamique, passage de paramètre par adresse, les\n• Appliquer différents paradigmes de programmation dans un même langage et étudier les moyens d'y parvenir : fonctionnel, objet, récursif, second ordre.\n• Utiliser des bibliothèques scientifiques riches, importer des bibliothèques programmées dans d'autres langages.\n• Comparer différentes implémentations d'un même algorithme, plusieurs au sein d'un même langage, ou dans plusieurs langages. Évaluer, quantifier ces différences.\n• Utiliser ou créer des structures de données complexes (matrices creuses, arbres, graphes).\n• Implémenter des algorithmes standards d'algèbre linéaire (calcul matriciel : décomposition LU, pivot de Gauss), éventuellement étudiés dans d'autres UE.\n• Implémenter des algorithmes standards de calcul probabiliste (suites pseudo-aléatoire, générateurs selon une loi), éventuellement étudiés dans d'autres UE.\n• Implémenter des algorithmes standards de calcul numérique (par exemple polynômes d'interpolation, courbes de Béziers, splines), éventuellement étudiés dans d'autres UE.\n• Implémenter des algorithmes standards de théorie des graphes (par exemple arbre couvrant, plus court chemin, diamètre), éventuellement étudiés dans d'autres UE. Course content: Après avoir vu différentes caractéristiques des langages de programmation en général (interprétation/compilation, typage des variables/des données, typage statique/dynamique, paradigmes impératif/fonctionnel/objet), l’étudiant sera amené à créer des structures de données ou à utiliser des structures de données déjà implémentées dans des bibliothèques, avec un regard critique sur leurs qualités (temps d’exécution, empreinte mémoire).\nCes structures de données seront utilisées pour des algorithmes d’algèbre linéaire, de calcul probabiliste (définition et utilisation de générateur aléatoire en particulier), de théorie des graphes. Course name: http://example.org/course/X1II020" <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N9f8bddc5428f45e3a2658993ecab448a <http://example.org/has_chunk> ".\nc. Model a variety of real-world problems in computer science using appropriate forms of graphs\nand trees, such as representing a network topology, the organization of a hierarchical file\nsystem, or a social network.\nd. Show how concepts from graphs and trees appear in data structures, algorithms, proof\ntechniques (structural induction), and counting" <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N9f8bddc5428f45e3a2658993ecab448a <http://example.org/has_score> "0.6866273"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
<http://example.org/course/X1II020> <http://example.org/is_aligned_with> _:N15eccc188b0848d3b509012c6fa68ea7 <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N7e1d7823d9b54e9f9ab1be87abe380a9 <http://example.org/has_chunk> ". Axioms of probability\nb. Probabilistic inference\nc. Bayes’ Rule (derivation)\nd. Bayesian inference (more complex examples)\n5. Independence\n6. Conditional Independence\n7. Markov chains and Markov models\n8. Utility and decision making\nIllustrative Learning Outcomes:\n1. Given a natural language problem statement, encode it as a symbolic or logical representation.\n2. Explain how we can make decisions under uncertainty, using concepts such as Bayes theorem and\nutility.\n3" <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N15eccc188b0848d3b509012c6fa68ea7 <http://example.org/has_score> "0.6635672"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N9f8bddc5428f45e3a2658993ecab448a <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Mathematical_and_Statistical_Foundations_MSF/MSF-Discrete_Discrete_Mathematics.txt> <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N7e1d7823d9b54e9f9ab1be87abe380a9 <http://example.org/has_score> "0.6672282"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N15eccc188b0848d3b509012c6fa68ea7 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Mathematical_and_Statistical_Foundations_MSF/MSF-Probability_Probability.txt> <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
<http://example.org/course/X1II020> <http://example.org/is_aligned_with> _:N7e1d7823d9b54e9f9ab1be87abe380a9 <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N7e1d7823d9b54e9f9ab1be87abe380a9 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-KRR_Fundamental_Knowledge_Representation_and_Reasoning.txt> <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
<http://example.org/course/X1II020> <http://example.org/is_aligned_with> _:N9f8bddc5428f45e3a2658993ecab448a <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N15eccc188b0848d3b509012c6fa68ea7 <http://example.org/has_chunk> ". Translate a prose description of a probabilistic process into a formal setting of sample spaces,\noutcome probabilities, and events.\nb. Calculate the probability of simple events.\nc. Determine whether two events are independent.\nd. Compute conditional probabilities, including through applying (and explaining) Bayes' Rule.\n2. Discrete random variables and distributions\na. Define the concept of a random variable and indicator random variable.\nb. Determine whether two random variables are independent.\nc" <http://faiss.org/23fd50ce8cd87d48a2ec31700e6f9f649913ab3f0b7994269c2144d68ff9fc98> .
_:N12e1472af163434888519f9bb6f5e53a <http://schema.org/answer> "1" <http://ollama.org/be8e8800d80838d3e69f47689f50e00d2ebe2bf80027e85d69fd39ba8a45ccb2> .
_:N12e1472af163434888519f9bb6f5e53a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/be8e8800d80838d3e69f47689f50e00d2ebe2bf80027e85d69fd39ba8a45ccb2> .
<http://example.org/course/ZZMC> <http://example.org/has_schema_type> _:N12e1472af163434888519f9bb6f5e53a <http://ollama.org/be8e8800d80838d3e69f47689f50e00d2ebe2bf80027e85d69fd39ba8a45ccb2> .
_:N12e1472af163434888519f9bb6f5e53a <http://schema.org/explain> "The lecture covers most of the cryptography domain and some image/video coding principles." <http://ollama.org/be8e8800d80838d3e69f47689f50e00d2ebe2bf80027e85d69fd39ba8a45ccb2> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Multimedia Communication Objectif: Multimedia communications require a careful design of source coding and security.\nFor this purpose, this module gives advanced notions in Image and Video Coding, and in Cryptography.\nAt the end of this course, the student will be able :\nIn the Cryptography domain:\n• To provide principles, theory and methods for designing data security and chaos-based data security.\n• To be able to design, realize and analyse a chaos-based cryptographic systems.\n• To know applications: Images and videos security ; Network security and Network access control ; Internet of Things (IoT) security ; Mobile security.\nIn the image and video coding domain:\n• To know the fundamental principles, methods and technics of image and video compression\n• To describe the caracteristics of the main image/video compression standards (JPEG, JPEG2000, H26X, MPEG-X video)\n• To implement a complete video coding/decoding chain Course content: Cryptography:\n• Pseudo-chaotic number generators\n• Symetric and Asymetric Ciphers\n• Hash Functions\n• Steganography Systems Image and video coding :\n• Principles, methods and technics of image and video compression\n• Image and video compression standards\n• Advanced image/video coding (scalability, rate-distortion optimization, coding strategy, multi- views)\n• Next generation of image and video coding (for immersive video formats) Course name: http://example.org/course/ZZMC </page1> <page2> Pages: 255-256 HOURS CS Core = 3 KA Core = 2 SEC-Security Foundations:\nPrinciples of Secure Computing CS Core: 1\\. Fundamental security principles\n(Confidentiality, Integrity, Availability). 2\\. Threat models and risk\nassessment. 3\\. Cryptographic techniques for data protection. 4\\. Secure\ncoding practices. 5\\. Authentication and access control mechanisms. KA Core:\n6\\. Network security concepts and protocols. 7\\. Incident response and\nforensics. 8\\. Advanced cryptographic methods. Illustrative Learning Outcomes:\n1\\. Explain the CIA triad and its role in security. 2\\. Identify common\nsecurity vulnerabilities in software applications. 3\\. Apply cryptographic\ntechniques to ensure secure communications.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/be8e8800d80838d3e69f47689f50e00d2ebe2bf80027e85d69fd39ba8a45ccb2> .
_:N46844c2fa5bb44dcaf512f9b0b50080f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/a9c4f1685a13b280411559a0eb1e42fb2030ebc8602a15d95c9f897c6644dbe4> .
_:N46844c2fa5bb44dcaf512f9b0b50080f <http://schema.org/explain> "The lecture does not cover the topics related to development platforms, programming languages and platform constraints which are central themes of the Knowledge Unit." <http://ollama.org/a9c4f1685a13b280411559a0eb1e42fb2030ebc8602a15d95c9f897c6644dbe4> .
<http://example.org/course/X1I2010> <http://example.org/has_schema_type> _:N46844c2fa5bb44dcaf512f9b0b50080f <http://ollama.org/a9c4f1685a13b280411559a0eb1e42fb2030ebc8602a15d95c9f897c6644dbe4> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Optimisation discrète et combinatoire Objectif: contrainte (Rappel - Remise à niveau) [A] Course content: nan Course name: http://example.org/course/X1I2010 </page1> <page2> Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development\nplatforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.\nInput/sensors/control devices/haptic devices b. Resource constraints i.\nComputational ii. Data storage iii. Memory iv. Communication c. Requirements -\nsecurity, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering) d. Output/actuators/haptic devices 2\\. Programming via platform-\nspecific Application Programming Interface (API) vs traditional application\nconstruction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,\nKotlin) 4\\. Programming under platform constraints and requirements (e.g.,\navailable development tools, development, security considerations) (See also:\nSEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific\nprogramming language Illustrative Learning Outcomes: CS Core: 1\\. List the\nconstraints of mobile programming. 2\\. List the characteristics of scripting\nlanguages. 3\\. Describe the three-tier model of web programming. 4\\. Describe\nhow the state is maintained in web programming.</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/a9c4f1685a13b280411559a0eb1e42fb2030ebc8602a15d95c9f897c6644dbe4> .
_:N46844c2fa5bb44dcaf512f9b0b50080f <http://schema.org/answer> "0" <http://ollama.org/a9c4f1685a13b280411559a0eb1e42fb2030ebc8602a15d95c9f897c6644dbe4> .
_:Ne25505bd29df4af08e50192a4bb625ec <http://example.org/has_score> "0.6707417"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:Ncdc9a2e8f98d4db594e67ba3a3d5ae69 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/System_Fundamentals_SF/SF-Overview_of_Computer_Systems.txt> <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:N8640ff3cab2f40ccbbf61e13e39a8b33 <http://example.org/has_chunk> ".\n3. Differentiate the terms: AI, machine learning, and deep learning.\n4. Enumerate the characteristics of a specific problem." <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
<http://example.org/course/X3IOM20> <http://example.org/is_aligned_with> _:N8640ff3cab2f40ccbbf61e13e39a8b33 <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
<http://example.org/course/X3IOM20> <http://example.org/is_aligned_with> _:Ne25505bd29df4af08e50192a4bb625ec <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:Ncdc9a2e8f98d4db594e67ba3a3d5ae69 <http://example.org/has_score> "0.6649231"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:Ncdc9a2e8f98d4db594e67ba3a3d5ae69 <http://example.org/has_chunk> ". Basic concept of pipelining, overlapped processing stages (See also: AR-Organization) \n6. Basic concept of scaling: performance vs problem size \n \nIllustrative Learning Outcomes:  \nCS Core: \n1. Describe the basic building blocks of computers and their role in the historical development of computer architecture. \n2. Design a simple logic circuit using the fundamental building blocks of logic design to solve a simple problem (e.g., adder). \n3" <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:Ne25505bd29df4af08e50192a4bb625ec <http://example.org/has_chunk> "FPL-OOP: Object-Oriented Programming\nCS Core:\n1. Imperative programming as a subset of object-oriented programming.\n2. Object-oriented design:\na. Decomposition into objects carrying state and having behavior.\nb. Class-hierarchy design for modeling.\n3. Definition of classes: fields, methods, and constructors. (See also: SDF-Fundamentals)\n4. Subclasses, inheritance (including multiple inheritance), and method overriding.\n5. Dynamic dispatch: definition of method-call.\n6. Exception handling" <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
<http://example.org/faiss> <http://example.org/input> "Label: Planification et Ordonnancement Objectif: - Comprendre un problème d'ordonnancement et en construire une modélisation.\n- Connaitre les grandes familles de problèmes d'ordonnancement, de gestion de projet et de planification de personnel.\n- établir la complexité d'un problème au regard de sa classification et de la littérature.\n- proposer une méthode de résolution adaptée au contexte et à la problématique.\n- comprendre un problème nouveau à partir d'une description ou d'un article de recherche. Course content: nan Course name: http://example.org/course/X3IOM20" <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:Ne25505bd29df4af08e50192a4bb625ec <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-OOP_Object-Oriented_Programming.txt> <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:N8640ff3cab2f40ccbbf61e13e39a8b33 <http://example.org/has_score> "0.6644593"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:N8640ff3cab2f40ccbbf61e13e39a8b33 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-Introduction_Fundamental_Issues.txt> <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
<http://example.org/course/X3IOM20> <http://example.org/is_aligned_with> _:Ncdc9a2e8f98d4db594e67ba3a3d5ae69 <http://faiss.org/d6799cb403b9195e91ac5413b1b2bc779f47109a525a436bf8ce91e76999182f> .
_:Na63869eb2cc9452ba1240ee8ad6ce2e2 <http://example.org/has_chunk> ".\nb. Apply the Taylor series to approximations.\n6. Multivariate calculus: partial derivatives, gradient, chain-rule, vector valued functions, applications\nto optimization, convexity, global vs local minima.\na. Compute partial derivatives and gradients.\nb. Work through examples with vector-valued functions with gradient notation.\nc. Explain applications to optimization.\n7. ODEs: definition, Euler method, applications to simulation\na. Apply the Euler method to integration.\nb" <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:N8ae967b0604c46dcb3305f0b142cf83e <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI_Search_Search.txt> <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:Na63869eb2cc9452ba1240ee8ad6ce2e2 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Mathematical_and_Statistical_Foundations_MSF/MSF-Calculus.txt> <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:Na63869eb2cc9452ba1240ee8ad6ce2e2 <http://example.org/has_score> "0.7095023"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:N8ae967b0604c46dcb3305f0b142cf83e <http://example.org/has_score> "0.7100067"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
<http://example.org/course/X3IO080> <http://example.org/is_aligned_with> _:N8ae967b0604c46dcb3305f0b142cf83e <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:N3a8146ef0cbe4e7499c918e619b7cc10 <http://example.org/has_chunk> ".\n4. Apply two or more simple statistical learning algorithms to a classification task and measure the\nclassifiers’ accuracy.\n5. Identify overfitting in the context of a problem and learning curves and describe solutions to\noverfitting.\n6. Explain how machine learning works as an optimization/search process.\n7. Implement a statistical learning algorithm and the corresponding optimization process to train the\nclassifier and obtain a prediction on new data.\n8" <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
<http://example.org/course/X3IO080> <http://example.org/is_aligned_with> _:Na63869eb2cc9452ba1240ee8ad6ce2e2 <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
<http://example.org/faiss> <http://example.org/input> "Label: Optimisation multi-objectif Objectif: - To know the notion of feasible set, outcome set, solution, point, (weakly) efficient, (weakly) nondominated point, lexicographically optimal solution (M)\n- To know the ideal point and the nadir point, the way to compute these points and the difficulty in their computation (M)\n- To know the main scalarization methods (weighted sum, e-constraint, weighted tchebychev method) and their properties (A)\n- To know the geometrical properties of the feasible set and the outcome set of a MOLP (M)\n- To know the geometrical and topological properties of the efficient set and the nondominated set of a MOLP (M)\n- To be able to apply the parametric simplex algorithm to solve a bi-objective linear programme (A)\n- To know the topological property of the feasible, outcome, efficient, nondominated sets of a Multi- Objective Combinatorial Optimization (MOCO) problem (M)\n- To know the classification of efficient solutions and nondominated points, and the notion of complete set (M)\n- To know results about connectedness and non-connectedness of efficient solutions of MOCO problems (M)\n- To be able to apply the e-constraint algorithm with adaptive step to solve a bi-objective combinatorial problem (A)\n- To be able to apply the weighted sum scalarization to compute a complete set of extreme supported solution of a bi-objective combinatorial optimization problem (A)\n- To be able to define and update the search area of a bi-objective combinatorial optimization problem (Phase 2 of the two phase method) (A)\n- To know the main strategies (variable fixing, ranking, branch and bound) to explore the search area, and to be able to apply them (Phase 2 of the two phase method) (M)\n- To know the notion of bound sets (M)\n- To be able to apply a branch and bound algorithm to solve a bi-objective combinatorial optimization problem (A)\n- To be able to apply a dynamic programming algorithm for multi-objective combinatorial optimization problem, application to the shortest path problem (A) Course content: nan Course name: http://example.org/course/X3IO080" <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:N3a8146ef0cbe4e7499c918e619b7cc10 <http://example.org/has_source> <file:///Users/molli-p/slm-exp/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-ML_Machine_Learning.txt> <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:N3a8146ef0cbe4e7499c918e619b7cc10 <http://example.org/has_score> "0.7037507"^^<http://www.w3.org/2001/XMLSchema#float> <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:N8ae967b0604c46dcb3305f0b142cf83e <http://example.org/has_chunk> ". What it means to “solve” a game (e.g., checkers)\n15. Implementation of minimax search, beam search\n16. Expectimax search (MDP-solving) and chance nodes\n17. Stochastic search\na. Simulated annealing\nb. Genetic algorithms\nc. Monte-Carlo tree search\nIllustrative Learning Outcomes:\n1. Design the state space representation for a puzzle (e.g., N-queens or 3-jug problem)\n2. Select and implement an appropriate uninformed search algorithm for a problem (e.g" <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
<http://example.org/course/X3IO080> <http://example.org/is_aligned_with> _:N3a8146ef0cbe4e7499c918e619b7cc10 <http://faiss.org/1b1688ff12957e25309392962cf8a5a1b033c08778103b96f90aef0a2a22a63a> .
_:N325d2702ae8448e6b37b2c4882c39b72 <http://schema.org/answer> "0" <http://ollama.org/43de1b9590fa9b67b639d1e035b1ff0ced5eba4dd8ebf08ac8792d324fd5b600> .
_:N325d2702ae8448e6b37b2c4882c39b72 <http://schema.org/explain> "The lecture covers only the CS Core topics of formal automata and languages, but not the KA Core topics such as decidability, reducibility, time and space complexity, or quantum computation." <http://ollama.org/43de1b9590fa9b67b639d1e035b1ff0ced5eba4dd8ebf08ac8792d324fd5b600> .
_:N325d2702ae8448e6b37b2c4882c39b72 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Report> <http://ollama.org/43de1b9590fa9b67b639d1e035b1ff0ced5eba4dd8ebf08ac8792d324fd5b600> .
<http://example.org/course/X3IT060> <http://example.org/has_schema_type> _:N325d2702ae8448e6b37b2c4882c39b72 <http://ollama.org/43de1b9590fa9b67b639d1e035b1ff0ced5eba4dd8ebf08ac8792d324fd5b600> .
<http://example.org/ollama> <http://example.org/input> "\n            This first page describe the content of a lecture,\n            the second page describe the content of a Knowledge Unit in Computer Science:\n            <page1>Label: Corpus Objectif: nan Course content: Constitution d’un corpus : 1) metadonnées, 2) critères de sélection des textes et 3) normes linguistiques d'annotation.\n• Définition d'un corpus électronique,\n• Typologies des corpus : monolingues, bilingues, etc. ,\n• Corpus de références,\n• Contraintes de constitution d'un corpus : domaines, genres, situation de discours\n• Metadonnées : DublinCore CES TEI OLAP\n• Mesures d'évaluation intrinsèque et extrinsèque de la qualité du corpus\n• Annotation : mesurer la complexité de l’annotation\n• Codage de la parole, préparée ou conversationnelle\n• Appréhender les outils d’annotation (transcriber, Webanno)\n• Guide d’annotations Course name: http://example.org/course/X3IT060 </page1> <page2> Pages:93-95 HOURS CS Core = 9 KA Core = 23 AL-Models: Computational Models and\nFormal Languages CS Core: 1\\. Formal automata a. Finite State b. Pushdown c.\nLinear Bounded d. Turing Machine 2\\. Formal languages, grammars and Chomsky\nHierarchy (See also: FPL-Translation, FPL-Syntax) a. Regular (Type-3) i.\nRegular Expressions b. Context-Free (Type-2) c. Context-Sensitive (Type-1) d.\nRecursively Enumerable (Type-0) 3\\. Relations among formal automata,\nlanguages, and grammars 4\\. Decidability, (un)computability, and halting 5\\.\nThe Church-Turing thesis 6\\. Algorithmic correctness a. Invariants (e.g., in\niteration, recursion, tree search) KA Core: 7\\. Deterministic and\nnondeterministic automata 8\\. Pumping Lemma proofs a. Proof of Finite\nState/Regular-Language limitation b. Pushdown Automata/Context-Free-Language\nlimitation 9\\. Decidability a. Arithmetization and diagonalization 10\\.\nReducibility and reductions 11\\. Time complexity based on Turing Machine 12\\.\nSpace complexity (e.g., Pspace, Savitch's Theorem) 13\\. Equivalent models of\nalgorithmic computation a. Turing Machines and Variations (e.g., multi-tape,\nnon-deterministic) b. Lambda Calculus (See also: FPL-Functional) c. Mu-\nRecursive Functions Non-core: 14\\. Quantum computation (See also: AR-Quantum)\na. Postulates of quantum mechanics i. State space 94 ii. State evolution iii.\nState composition iv. State measurement b. Column vector representations of\nqubits c. Matrix representations of quantum operations d. Simple quantum gates\n(e.g., XNOT, CNOT) Illustrative Learning Outcomes: CS Core: 1\\. For each\nformal automaton in this unit: a. Explain its definition comparing its\ncharacteristics with this unit's other automata, b. Using an example, explain\nstep-by-step how the automaton operates on input including whether it accepts\nthe associated input, c. Explain an example of inputs that can and cannot be\naccepted by the automaton. 2\\. Given a problem, develop an appropriate\nautomaton that addresses the problem. 3\\. Develop a regular expression for a\ngiven regular language expressed in natural language. 4\\. Explain the\ndifference between regular expressions (Type-3 acceptors) and the regular\nexpressions (Type-2 acceptors) used in programming languages. 5\\. For each\nformal model in this unit: a. Explain its definition comparing its\ncharacteristics with the others in this unit, b. Explain example inputs that\nare and cannot be accepted by the language/grammar. 6\\. Explain a universal\nTuring Machine and its operation. 7\\. Present to an audience of co-workers and\nmanagers the impossibility of providing them a program that checks all other\nprograms, including some seemingly simple ones, for infinite loops including\nan explanation of the Halting problem, why it has no algorithmic solution, and\nits significance for real-world algorithmic computation. 8\\. Explain examples\nof classic uncomputable problems. 9\\. Explain the Church-Turing Thesis and its\nsignificance for algorithmic computation. 10\\. Explain how (loop) invariants\ncan be used to prove the correctness of an algorithm. Illustrative Learning\nOutcomes: KA Core: 11\\. For each formal automaton in this unit explain\n(compare/contrast) its deterministic and nondeterministic capabilities. 12\\.\nApply pumping lemmas, or alternative means, to prove the limitations of Finite\nState and Pushdown automata. 13\\. Apply arithmetization and diagonalization to\nprove the Halting Problem for Turing Machines is Undecidability. 14\\. Given a\nknown undecidable language, apply a mapping reduction or computational history\nto prove that another language is undecidable. 15\\. Convert among equivalently\npowerful notations for a language, including among DFAs, NFAs, and regular\nexpressions, and between PDAs and CFGs. 16\\. Explain Rice's theorem and its\nsignificance. 95 17\\. Explain an example proof of a problem that is\nuncomputable by reducing a classic known uncomputable problem to it. 18\\.\nExplain the Primitive and General Recursive functions (zero, successor,\nselection, primitive recursion, composition, and Mu), their significance, and\nTuring Machine implementations. 19\\. Explain how computation is performed in\nLambda Calculus (e.g., Alpha conversion and Beta reduction) Non-core: 20\\. For\na quantum system give examples that explain the following postulates. a. State\nSpace - system state represented as a unit vector in Hilbert space, b. State\nEvolution - the use of unitary operators to evolve system state, c. State\nComposition - the use of tensor product to compose systems states, d. State\nMeasurement - the probabilistic output of measuring a system state. 21\\.\nExplain the operation of a quantum XNOT or CNOT gate on a quantum bit\nrepresented as a matrix and column vector, respectively</page2> \n            Does the lecture cover a large subset of the knowledge Unit. Answer in JSN-LD only with a type Report\",\n                 \"@context\": \"https://schema.org/\",\n                 \"@type\": \"Report\",\n                 \"http://schema.org/answer\": \"A\",\n                 \"http://schema.org/explain\": \"B\",\n            Replace A by 0 it does not cover, 1 if it cover.\n            Replace B by a very short explanation" <http://ollama.org/43de1b9590fa9b67b639d1e035b1ff0ced5eba4dd8ebf08ac8792d324fd5b600> .
