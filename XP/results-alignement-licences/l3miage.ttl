@prefix ns1: <http://align.org/> .
@prefix ns2: <http://example.org/course/> .
@prefix ns3: <http://provo.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ns2:UE_XLG5AU010 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.63434273"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the specific NLP topics outlined in the KU." ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64352226"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.63434273"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods in French, while KU covers technical NLP concepts." ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.6300193"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including scripting, error handling, piping, system commands, environment variables, file abstraction, data structures, and regular expressions." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.6300193"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on English language, not CS/scripting topics" ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.6300193"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical topics of the KU." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64352226"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on English teaching methods, not CS platforms/programming" ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.63434273"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including topics such as deterministic and stochastic grammars, parsing algorithms, and natural language processing." ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64352226"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the technical aspects of development platforms and programming described in the KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ] ;
    ns1:uetext "Label: Anglais Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5AU010" .

ns2:UE_XLG5IU010 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> ;
            ns1:ku_text """Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-
Fundamentals: Fundamentals CS Core: 1\\. Importance of networking in
contemporary computing, and associated challenges. (See also: SEPContext, SEP-
Privacy) 2\\. Organization of the internet (e.g., users, Internet Service
Providers, autonomous systems, content providers, content delivery networks)
3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles
(application, transport, network, datalink, and physical) 5\\. Layering
principles (e.g., encapsulation and hourglass model) (See also: SF-
Foundations) 6\\. Network elements (e.g., routers, switches, hubs, access
points, and hosts) 7\\. Basic queueing concepts (e.g., relationship with
latency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS
Core: 1\\. Articulate the organization of the internet. 2\\. List and define the
appropriate network terminology 3\\. Describe the layered structure of a
typical networked architecture. 4\\. Identify the different types of complexity
in a network (edges, core, etc.)."""^^xsd:string ;
            ns1:score "0.6753991"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers topics such as logique, circuits combinatoires, and assembleur MIPS, which are related to the fundamentals of computer architecture and networking, substantially covering the knowledge described in the KU." ;
            ns2:ka "Networking_and_Communication_NC" ;
            ns2:ku "NC-Fundamentals_Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/System_Fundamentals_SF/SF-Overview_of_Computer_Systems.txt> ;
            ns1:ku_text """Pages : 230-231 CS Core : 3, KA Core : 0 CS Core: 1\\. Basic building blocks
and components of a computer (gates, flip-flops, registers, interconnections;
datapath + control + memory) 2\\. Hardware as a computational paradigm:
Fundamental logic building blocks; Logic expressions, minimization, sum of
product forms (See also: AR-Logic) 3\\. Programming abstractions, interfaces,
use of libraries (See also: PDC-Programs) 4\\. Distinction and interaction
between application and OS services, remote procedure call (See also: OS-
Purpose) 5\\. Basic concept of pipelining, overlapped processing stages (See
also: AR-Organization) 6\\. Basic concept of scaling: performance vs problem
size Illustrative Learning Outcomes: CS Core: 1\\. Describe the basic building
blocks of computers and their role in the historical development of computer
architecture. 2\\. Design a simple logic circuit using the fundamental building
blocks of logic design to solve a simple problem (e.g., adder). 3\\. Describe
how computing systems are constructed of layers upon layers, based on
separation of concerns, with well-defined interfaces, hiding details of low
layers from the higher layers. 4\\. Describe that hardware, OS, VM, and
application are additional layers of interpretation/processing. 5\\. Describe
the mechanisms of how errors are detected, signaled back, and handled through
the layers. 6\\. Construct a simple program (e.g., a TCP client/server) using
methods of layering, error detection and recovery, and reflection of error
status across layers. 7\\. Identify bugs in a layered program by using tools
for program tracing, single stepping, and debugging. 8\\. Understand the
concept of strong vs weak scaling, i.e., how performance is affected by the
scale of the problem vs the scale of resources to solve the problem. This can
be motivated by simple, real-world examples."""^^xsd:string ;
            ns1:score "0.680892"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture covers basic building blocks and logic circuits but lacks substantial coverage of higher-level concepts like OS interactions, pipelining, and scaling." ;
            ns2:ka "System_Fundamentals_SF" ;
            ns2:ku "SF-Overview_of_Computer_Systems" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Architecture_and_Organization_AR/AR-Logic_Digital_Logic_and_Digital_Systems.txt> ;
            ns1:ku_text """Pages:102-103 HOURS CS Core = 0 KA Core = 3 AR-Logic: Digital Logic and
Digital Systems KA Core: 1\\. Combinational vs sequential logic/field
programmable gate arrays (FPGAs) (See also: SF- Overview, SF-Foundations, SPD-
Embedded) a. Fundamental combinational b. Sequential logic building block 2\\.
Computer-aided design tools that process hardware and architectural
representations 3\\. High-level synthesis a. Register transfer notation b.
Hardware description language (e.g., Verilog/VHDL/Chisel) 4\\. System-on-chip
(SoC) design flow 5\\. Physical constraints a. Gate delays b. Fan-in and fan-
out c. Energy/power d. Speed of light Illustrative Learning Outcomes: 103 KA
Core: 1\\. Discuss the progression of computer technology components from
vacuum tubes to VLSI, from mainframe computer architectures to the
organization of warehouse-scale computers. 2\\. Describe parallelism and data
dependencies between and within components in a modern heterogeneous computer
architecture. 3\\. Explain the relationship between parallelism and power
consumption. 4\\. Construct the design of basic building blocks for a computer:
arithmetic-logic unit (gate-level), registers (gate-level), central processing
unit (register transfer-level), and memory (register transfer- level). 5\\.
Evaluate simple building blocks (e.g., arithmetic-logic unit, registers,
movement between registers) of a simple computer design. 6\\. Analyze the
timing behavior of a pipelined processor, identifying data dependency issues."""^^xsd:string ;
            ns1:score "0.66761684"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture covers some aspects like combinational and sequential logic but lacks coverage of design tools, synthesis, and physical constraints." ;
            ns2:ka "Architecture_and_Organization_AR" ;
            ns2:ku "AR-Logic_Digital_Logic_and_Digital_Systems" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> ;
            ns1:ku_text """Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-
Fundamentals: Fundamentals CS Core: 1\\. Importance of networking in
contemporary computing, and associated challenges. (See also: SEPContext, SEP-
Privacy) 2\\. Organization of the internet (e.g., users, Internet Service
Providers, autonomous systems, content providers, content delivery networks)
3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles
(application, transport, network, datalink, and physical) 5\\. Layering
principles (e.g., encapsulation and hourglass model) (See also: SF-
Foundations) 6\\. Network elements (e.g., routers, switches, hubs, access
points, and hosts) 7\\. Basic queueing concepts (e.g., relationship with
latency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS
Core: 1\\. Articulate the organization of the internet. 2\\. List and define the
appropriate network terminology 3\\. Describe the layered structure of a
typical networked architecture. 4\\. Identify the different types of complexity
in a network (edges, core, etc.)."""^^xsd:string ;
            ns1:score "0.6753991"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture covers computer architecture (circuits, assembly), not networking fundamentals." ;
            ns2:ka "Networking_and_Communication_NC" ;
            ns2:ku "NC-Fundamentals_Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Architecture_and_Organization_AR/AR-Logic_Digital_Logic_and_Digital_Systems.txt> ;
            ns1:ku_text """Pages:102-103 HOURS CS Core = 0 KA Core = 3 AR-Logic: Digital Logic and
Digital Systems KA Core: 1\\. Combinational vs sequential logic/field
programmable gate arrays (FPGAs) (See also: SF- Overview, SF-Foundations, SPD-
Embedded) a. Fundamental combinational b. Sequential logic building block 2\\.
Computer-aided design tools that process hardware and architectural
representations 3\\. High-level synthesis a. Register transfer notation b.
Hardware description language (e.g., Verilog/VHDL/Chisel) 4\\. System-on-chip
(SoC) design flow 5\\. Physical constraints a. Gate delays b. Fan-in and fan-
out c. Energy/power d. Speed of light Illustrative Learning Outcomes: 103 KA
Core: 1\\. Discuss the progression of computer technology components from
vacuum tubes to VLSI, from mainframe computer architectures to the
organization of warehouse-scale computers. 2\\. Describe parallelism and data
dependencies between and within components in a modern heterogeneous computer
architecture. 3\\. Explain the relationship between parallelism and power
consumption. 4\\. Construct the design of basic building blocks for a computer:
arithmetic-logic unit (gate-level), registers (gate-level), central processing
unit (register transfer-level), and memory (register transfer- level). 5\\.
Evaluate simple building blocks (e.g., arithmetic-logic unit, registers,
movement between registers) of a simple computer design. 6\\. Analyze the
timing behavior of a pipelined processor, identifying data dependency issues."""^^xsd:string ;
            ns1:score "0.66761684"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the fundamental concepts of digital logic and sequential logic, which are the core topics of the KU." ;
            ns2:ka "Architecture_and_Organization_AR" ;
            ns2:ku "AR-Logic_Digital_Logic_and_Digital_Systems" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Architecture_and_Organization_AR/AR-Logic_Digital_Logic_and_Digital_Systems.txt> ;
            ns1:ku_text """Pages:102-103 HOURS CS Core = 0 KA Core = 3 AR-Logic: Digital Logic and
Digital Systems KA Core: 1\\. Combinational vs sequential logic/field
programmable gate arrays (FPGAs) (See also: SF- Overview, SF-Foundations, SPD-
Embedded) a. Fundamental combinational b. Sequential logic building block 2\\.
Computer-aided design tools that process hardware and architectural
representations 3\\. High-level synthesis a. Register transfer notation b.
Hardware description language (e.g., Verilog/VHDL/Chisel) 4\\. System-on-chip
(SoC) design flow 5\\. Physical constraints a. Gate delays b. Fan-in and fan-
out c. Energy/power d. Speed of light Illustrative Learning Outcomes: 103 KA
Core: 1\\. Discuss the progression of computer technology components from
vacuum tubes to VLSI, from mainframe computer architectures to the
organization of warehouse-scale computers. 2\\. Describe parallelism and data
dependencies between and within components in a modern heterogeneous computer
architecture. 3\\. Explain the relationship between parallelism and power
consumption. 4\\. Construct the design of basic building blocks for a computer:
arithmetic-logic unit (gate-level), registers (gate-level), central processing
unit (register transfer-level), and memory (register transfer- level). 5\\.
Evaluate simple building blocks (e.g., arithmetic-logic unit, registers,
movement between registers) of a simple computer design. 6\\. Analyze the
timing behavior of a pipelined processor, identifying data dependency issues."""^^xsd:string ;
            ns1:score "0.66761684"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture covers logic/circuits but lacks CAD tools, HDLs, SoC, physical constraints, and historical context required by KU." ;
            ns2:ka "Architecture_and_Organization_AR" ;
            ns2:ku "AR-Logic_Digital_Logic_and_Digital_Systems" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/System_Fundamentals_SF/SF-Overview_of_Computer_Systems.txt> ;
            ns1:ku_text """Pages : 230-231 CS Core : 3, KA Core : 0 CS Core: 1\\. Basic building blocks
and components of a computer (gates, flip-flops, registers, interconnections;
datapath + control + memory) 2\\. Hardware as a computational paradigm:
Fundamental logic building blocks; Logic expressions, minimization, sum of
product forms (See also: AR-Logic) 3\\. Programming abstractions, interfaces,
use of libraries (See also: PDC-Programs) 4\\. Distinction and interaction
between application and OS services, remote procedure call (See also: OS-
Purpose) 5\\. Basic concept of pipelining, overlapped processing stages (See
also: AR-Organization) 6\\. Basic concept of scaling: performance vs problem
size Illustrative Learning Outcomes: CS Core: 1\\. Describe the basic building
blocks of computers and their role in the historical development of computer
architecture. 2\\. Design a simple logic circuit using the fundamental building
blocks of logic design to solve a simple problem (e.g., adder). 3\\. Describe
how computing systems are constructed of layers upon layers, based on
separation of concerns, with well-defined interfaces, hiding details of low
layers from the higher layers. 4\\. Describe that hardware, OS, VM, and
application are additional layers of interpretation/processing. 5\\. Describe
the mechanisms of how errors are detected, signaled back, and handled through
the layers. 6\\. Construct a simple program (e.g., a TCP client/server) using
methods of layering, error detection and recovery, and reflection of error
status across layers. 7\\. Identify bugs in a layered program by using tools
for program tracing, single stepping, and debugging. 8\\. Understand the
concept of strong vs weak scaling, i.e., how performance is affected by the
scale of the problem vs the scale of resources to solve the problem. This can
be motivated by simple, real-world examples."""^^xsd:string ;
            ns1:score "0.680892"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the fundamental building blocks of computers, logic design, and programming abstractions, which are the core topics of the KU." ;
            ns2:ka "System_Fundamentals_SF" ;
            ns2:ku "SF-Overview_of_Computer_Systems" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/System_Fundamentals_SF/SF-Overview_of_Computer_Systems.txt> ;
            ns1:ku_text """Pages : 230-231 CS Core : 3, KA Core : 0 CS Core: 1\\. Basic building blocks
and components of a computer (gates, flip-flops, registers, interconnections;
datapath + control + memory) 2\\. Hardware as a computational paradigm:
Fundamental logic building blocks; Logic expressions, minimization, sum of
product forms (See also: AR-Logic) 3\\. Programming abstractions, interfaces,
use of libraries (See also: PDC-Programs) 4\\. Distinction and interaction
between application and OS services, remote procedure call (See also: OS-
Purpose) 5\\. Basic concept of pipelining, overlapped processing stages (See
also: AR-Organization) 6\\. Basic concept of scaling: performance vs problem
size Illustrative Learning Outcomes: CS Core: 1\\. Describe the basic building
blocks of computers and their role in the historical development of computer
architecture. 2\\. Design a simple logic circuit using the fundamental building
blocks of logic design to solve a simple problem (e.g., adder). 3\\. Describe
how computing systems are constructed of layers upon layers, based on
separation of concerns, with well-defined interfaces, hiding details of low
layers from the higher layers. 4\\. Describe that hardware, OS, VM, and
application are additional layers of interpretation/processing. 5\\. Describe
the mechanisms of how errors are detected, signaled back, and handled through
the layers. 6\\. Construct a simple program (e.g., a TCP client/server) using
methods of layering, error detection and recovery, and reflection of error
status across layers. 7\\. Identify bugs in a layered program by using tools
for program tracing, single stepping, and debugging. 8\\. Understand the
concept of strong vs weak scaling, i.e., how performance is affected by the
scale of the problem vs the scale of resources to solve the problem. This can
be motivated by simple, real-world examples."""^^xsd:string ;
            ns1:score "0.680892"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture covers logic/circuits and assembly, but lacks OS layers, error handling, pipelining, and scaling concepts from KU." ;
            ns2:ka "System_Fundamentals_SF" ;
            ns2:ku "SF-Overview_of_Computer_Systems" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> ;
            ns1:ku_text """Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-
Fundamentals: Fundamentals CS Core: 1\\. Importance of networking in
contemporary computing, and associated challenges. (See also: SEPContext, SEP-
Privacy) 2\\. Organization of the internet (e.g., users, Internet Service
Providers, autonomous systems, content providers, content delivery networks)
3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles
(application, transport, network, datalink, and physical) 5\\. Layering
principles (e.g., encapsulation and hourglass model) (See also: SF-
Foundations) 6\\. Network elements (e.g., routers, switches, hubs, access
points, and hosts) 7\\. Basic queueing concepts (e.g., relationship with
latency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS
Core: 1\\. Articulate the organization of the internet. 2\\. List and define the
appropriate network terminology 3\\. Describe the layered structure of a
typical networked architecture. 4\\. Identify the different types of complexity
in a network (edges, core, etc.)."""^^xsd:string ;
            ns1:score "0.6753991"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on computer architecture, while the KU covers networking fundamentals." ;
            ns2:ka "Networking_and_Communication_NC" ;
            ns2:ku "NC-Fundamentals_Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ] ;
    ns1:uetext """Label: Introduction à l'architecture des ordinateurs Objectif: (résultats d'apprentissage) Course content: • Logique et Circuits combinatoires
• Circuits séquentiels
• Assembleur MIPS Course name: http://example.org/course/UE_XLG5IU010""" .

ns2:UE_XLG5IU020 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64289594"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the development platforms, programming languages, and constraints, which align with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64289594"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on requirements engineering, while KU covers programming platforms and constraints, which are distinct topics." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.63751477"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on requirements engineering does not substantially cover the ethical and legal knowledge unit topics." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.63751477"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on requirements engineering methods, not ethics/legal topics in KU" ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.63751477"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers most of the intellectual property rights, plagiarism, responsibility, and professional ethics of programmers, which are the main topics of the KU." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6477115"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the course content, including key concepts, principles, and importance of SE-Formal Methods, which aligns with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6477115"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on Requirements Engineering, while the KU covers Formal Methods, which are distinct areas." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64289594"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on requirements engineering, while the KU covers development platforms and programming constraints." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ] ;
    ns1:uetext "Label: Ingénierie des exigences Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5IU020" .

ns2:UE_XLG5IU030 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-3D_Modeling.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-3D Modeling: Core Concepts CS
Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic 3
KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of GIT-3D Modeling.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6300565"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of GIT-3D Modeling, practical scenarios, and importance in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-3D_Modeling" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-3D_Modeling.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-3D Modeling: Core Concepts CS
Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic 3
KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of GIT-3D Modeling.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6300565"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on financial accounting does not cover the KU on GIT-3D Modeling." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-3D_Modeling" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-3D_Modeling.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-3D Modeling: Core Concepts CS
Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic 3
KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of GIT-3D Modeling.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6300565"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Topics unrelated (accounting vs. 3D modeling)" ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-3D_Modeling" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.6306674"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in subject matter (accounting vs. CS ethics)" ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6370726"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in subject matter; lecture focuses on financial accounting while KU addresses SE-Formal Methods." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.6306674"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on financial accounting does not cover the knowledge unit on computer science ethics and professional conduct." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6370726"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on financial accounting does not cover the knowledge unit on SE-Formal Methods." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.6306674"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers intellectual property rights, plagiarism, responsibility, and professional ethics, which are all key aspects of the KU." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6370726"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, including placeholder topics 1, 2, and 3, which align with the KU's core concepts." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ] ;
    ns1:uetext "Label: Comptabilité financière Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5IU030" .

ns2:UE_XLG5IU040 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Architecture_and_Organization_AR/AR-Assembly_Assembly_Level_Machine_Organization.txt> ;
            ns1:ku_text """Pages:103-104 HOURS CS Core = 1 KA Core = 2 AR-Assembly: Assembly Level
Machine Organization CS Core: 1\\. von Neumann machine architecture 2\\. Control
unit: instruction fetch, decode, and execution (See also: OS-Principles) 3\\.
Introduction to SIMD vs MIMD and the Flynn taxonomy (See also: PDC-Programs,
OS-Scheduling, OS-Process) 104 4\\. Shared memory multiprocessors/multicore
organization (See also: PDC-Programs, OS-Scheduling) KA Core: 5\\. Instruction
set architecture (ISA) (e.g., x86, ARM and RISC-V) a. Fixed vs variable-width
instruction sets b. Instruction formats c. Data manipulation, control, I/O d.
Addressing modes e. Machine language programming f. Assembly language
programming 6\\. Subroutine call and return mechanisms (See also: FPL-
Translation, OS-Principles) 7\\. I/O and interrupts (See also: OS-Principles)
8\\. Heap, static, stack, and code segments (See also: FPL-Translation, OS-
Process) Illustrative Learning Outcomes: CS Core: 1\\. Discuss how the
classical von Neumann functional units are implemented in embedded systems,
particularly on-chip and off-chip memory. 2\\. Describe how instructions are
executed in a classical von Neumann machine, with extensions for threads,
multiprocessor synchronization, and SIMD execution. 3\\. Assess an example
diagram with instruction-level parallelism and hazards to describe how they
are managed in typical processor pipelines. KA Core: 4\\. Discuss how
instructions are represented at the machine level and in the context of a
symbolic assembler. 5\\. Map an example of high-level language patterns into
assembly/machine language notations. 6\\. Contrast different instruction
formats considering aspects such as addresses per instruction and variable-
length vs fixed-length formats. 7\\. Analyze a subroutine diagram to comment on
how subroutine calls are handled at the assembly level. 8\\. Describe basic
concepts of interrupts and I/O operations. 9\\. Write a simple assembly
language program for string/array processing and manipulation."""^^xsd:string ;
            ns1:score "0.6761725"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on optimization and automates finis does not cover the knowledge unit on machine organization and assembly level concepts." ;
            ns2:ka "Architecture_and_Organization_AR" ;
            ns2:ku "AR-Assembly_Assembly_Level_Machine_Organization" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Architecture_and_Organization_AR/AR-Assembly_Assembly_Level_Machine_Organization.txt> ;
            ns1:ku_text """Pages:103-104 HOURS CS Core = 1 KA Core = 2 AR-Assembly: Assembly Level
Machine Organization CS Core: 1\\. von Neumann machine architecture 2\\. Control
unit: instruction fetch, decode, and execution (See also: OS-Principles) 3\\.
Introduction to SIMD vs MIMD and the Flynn taxonomy (See also: PDC-Programs,
OS-Scheduling, OS-Process) 104 4\\. Shared memory multiprocessors/multicore
organization (See also: PDC-Programs, OS-Scheduling) KA Core: 5\\. Instruction
set architecture (ISA) (e.g., x86, ARM and RISC-V) a. Fixed vs variable-width
instruction sets b. Instruction formats c. Data manipulation, control, I/O d.
Addressing modes e. Machine language programming f. Assembly language
programming 6\\. Subroutine call and return mechanisms (See also: FPL-
Translation, OS-Principles) 7\\. I/O and interrupts (See also: OS-Principles)
8\\. Heap, static, stack, and code segments (See also: FPL-Translation, OS-
Process) Illustrative Learning Outcomes: CS Core: 1\\. Discuss how the
classical von Neumann functional units are implemented in embedded systems,
particularly on-chip and off-chip memory. 2\\. Describe how instructions are
executed in a classical von Neumann machine, with extensions for threads,
multiprocessor synchronization, and SIMD execution. 3\\. Assess an example
diagram with instruction-level parallelism and hazards to describe how they
are managed in typical processor pipelines. KA Core: 4\\. Discuss how
instructions are represented at the machine level and in the context of a
symbolic assembler. 5\\. Map an example of high-level language patterns into
assembly/machine language notations. 6\\. Contrast different instruction
formats considering aspects such as addresses per instruction and variable-
length vs fixed-length formats. 7\\. Analyze a subroutine diagram to comment on
how subroutine calls are handled at the assembly level. 8\\. Describe basic
concepts of interrupts and I/O operations. 9\\. Write a simple assembly
language program for string/array processing and manipulation."""^^xsd:string ;
            ns1:score "0.6761725"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on optimization/scheduling, while KU covers hardware architecture and assembly programming, which are unrelated." ;
            ns2:ka "Architecture_and_Organization_AR" ;
            ns2:ku "AR-Assembly_Assembly_Level_Machine_Organization" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Functional_Functional_Programming.txt> ;
            ns1:ku_text """Pages: 131-132-133 HOURS CS Core = 4 KA Core = 3 FPL-Functional: Functional
Programming CS Core: 1\\. Lambda expressions and evaluation: (See also: AL-
Models, FPL-Formalism) a. Variable binding and scope rules. (See also: SDF-
Fundamentals) b. Parameter-passing. (See also: SDF-Fundamentals) c. Nested
lambda expressions and reduction order. 2\\. Effect-free programming: a.
Function calls have no side effects, facilitating compositional reasoning. b.
Immutable variables and data copying vs reduction. c. Use of recursion vs
loops vs pipelining (map/reduce). 3\\. Processing structured data (e.g., trees)
via functions with cases for each data variant: a. Functions defined over
compound data in terms of functions applied to the constituent pieces. b.
Persistent data structures. 4\\. Using higher-order functions (taking,
returning, and storing functions). KA Core: 5\\. Metaprogramming and
reflection. 6\\. Function closures (functions using variables in the enclosing
lexical environment). a. Basic meaning and definition - creating closures at
run-time by capturing the environment. b. Canonical idioms: call-backs,
arguments to iterators, reusable code via function arguments. c. Using a
closure to encapsulate data in its environment. d. Delayed versus eager
evaluation. Non-core: 7\\. Graph reduction machine and call-by-need. 8\\.
Implementing delayed evaluation. 9\\. Integration with logic programming
paradigm using concepts such as equational logic, narrowing, residuation and
semantic unification. (See also: FPL-Logic) 10\\. Integration with other
programming paradigms such as imperative and object-oriented. Illustrative
learning outcomes: CS Core: 1\\. Develop basic algorithms that avoid assigning
to mutable states or considering reference equality. 2\\. Develop useful
functions that take and return other functions. 3\\. Compare and contrast how
computational solutions to a problem differ in procedural, functional, and
object-oriented approaches. 4\\. Compare and contrast mechanisms to define and
protect data elements within procedural, functional, and object-oriented
approaches. KA Core: 5\\. Explain a simple example of lambda expression being
implemented using a virtual machine, such as a SECD machine, showing storage
and reclaim of the environment. 6\\. Correctly interpret variables and lexical
scope in a program using function closures. 7\\. Use functional encapsulation
mechanisms such as closures and modular interfaces. 8\\. Compare and contrast
stateful vs stateless execution. 9\\. Define and use iterators and other
operations on aggregates, including operations that take functions as
arguments, in multiple programming languages, selecting the most natural
idioms for each language. (See also: FPL-OOP) Non-core: 10\\. Illustrate graph
reduction using a l-expression using a shared subexpression. 11\\. Illustrate
the execution of a simple nested l-expression using an abstract machine, such
as an ABC machine. 12\\. Illustrate narrowing, residuation, and semantic
unification using simple illustrative examples. 13\\. Illustrate the
concurrency constructs using simple programming examples of known concepts
such as a buffer being read and written concurrently or sequentially. (See
also: FPL-OOP)"""^^xsd:string ;
            ns1:score "0.6756594"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on optimization and scheduling does not cover functional programming concepts." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Functional_Functional_Programming" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Functional_Functional_Programming.txt> ;
            ns1:ku_text """Pages: 131-132-133 HOURS CS Core = 4 KA Core = 3 FPL-Functional: Functional
Programming CS Core: 1\\. Lambda expressions and evaluation: (See also: AL-
Models, FPL-Formalism) a. Variable binding and scope rules. (See also: SDF-
Fundamentals) b. Parameter-passing. (See also: SDF-Fundamentals) c. Nested
lambda expressions and reduction order. 2\\. Effect-free programming: a.
Function calls have no side effects, facilitating compositional reasoning. b.
Immutable variables and data copying vs reduction. c. Use of recursion vs
loops vs pipelining (map/reduce). 3\\. Processing structured data (e.g., trees)
via functions with cases for each data variant: a. Functions defined over
compound data in terms of functions applied to the constituent pieces. b.
Persistent data structures. 4\\. Using higher-order functions (taking,
returning, and storing functions). KA Core: 5\\. Metaprogramming and
reflection. 6\\. Function closures (functions using variables in the enclosing
lexical environment). a. Basic meaning and definition - creating closures at
run-time by capturing the environment. b. Canonical idioms: call-backs,
arguments to iterators, reusable code via function arguments. c. Using a
closure to encapsulate data in its environment. d. Delayed versus eager
evaluation. Non-core: 7\\. Graph reduction machine and call-by-need. 8\\.
Implementing delayed evaluation. 9\\. Integration with logic programming
paradigm using concepts such as equational logic, narrowing, residuation and
semantic unification. (See also: FPL-Logic) 10\\. Integration with other
programming paradigms such as imperative and object-oriented. Illustrative
learning outcomes: CS Core: 1\\. Develop basic algorithms that avoid assigning
to mutable states or considering reference equality. 2\\. Develop useful
functions that take and return other functions. 3\\. Compare and contrast how
computational solutions to a problem differ in procedural, functional, and
object-oriented approaches. 4\\. Compare and contrast mechanisms to define and
protect data elements within procedural, functional, and object-oriented
approaches. KA Core: 5\\. Explain a simple example of lambda expression being
implemented using a virtual machine, such as a SECD machine, showing storage
and reclaim of the environment. 6\\. Correctly interpret variables and lexical
scope in a program using function closures. 7\\. Use functional encapsulation
mechanisms such as closures and modular interfaces. 8\\. Compare and contrast
stateful vs stateless execution. 9\\. Define and use iterators and other
operations on aggregates, including operations that take functions as
arguments, in multiple programming languages, selecting the most natural
idioms for each language. (See also: FPL-OOP) Non-core: 10\\. Illustrate graph
reduction using a l-expression using a shared subexpression. 11\\. Illustrate
the execution of a simple nested l-expression using an abstract machine, such
as an ABC machine. 12\\. Illustrate narrowing, residuation, and semantic
unification using simple illustrative examples. 13\\. Illustrate the
concurrency constructs using simple programming examples of known concepts
such as a buffer being read and written concurrently or sequentially. (See
also: FPL-OOP)"""^^xsd:string ;
            ns1:score "0.6756594"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the Knowledge Unit, including topics such as lambda expressions, effect-free programming, and higher-order functions, which are all core components of the KU." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Functional_Functional_Programming" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> ;
            ns1:ku_text """Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic
Programming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-
LRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See
also: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical
connectives and simpler relations. 4\\. Definitions of Horn clause, facts,
goals and subgoals. 5\\. Unification and unification algorithm; unification vs
assertion vs expression evaluation. 6\\. Mixing relations with functions. (See
also: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-
world vs open-world assumptions. Non-core: 9\\. Memory overhead of variable
copying in handling iterative programs. 10\\. Programming constructs to store
partial computation and pruning search trees. 11\\. Mixing functional
programming and logic programming using concepts such as equational logic,
narrowing, residuation, and semantic unification. (See also: FPL-Functional)
12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-
LRR) 13\\. Integration with other programming paradigms such as object-oriented
programming. 14\\. Advance programming constructs such as difference-lists,
creating user defined data structures, set of, etc. Illustrative learning
outcomes: KA Core: 1\\. Use a logic language to implement a conventional
algorithm. 2\\. Use a logic language to implement an algorithm employing
implicit search using clauses, relations, and cuts. 3\\. Use a simple
illustrative example to show correspondence between First Order Predicate
Logic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to
illustrate the unification algorithm and its role of parameter-passing in
query reduction. 5\\. Use simple logic programs interleaving relations,
functions, and recursive programming such as factorial and Fibonacci numbers
and simple complex relationships between entities and illustrate execution and
parameter-passing using unification and backtracking. Non-core: 6\\. Illustrate
computation of simple programs such as Fibonacci and show overhead of
recomputation, and then show how to improve execution overhead."""^^xsd:string ;
            ns1:score "0.6776459"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on optimization and automata, while the KU covers logic programming, with no substantial overlap." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Logic_Logic_Programming" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Architecture_and_Organization_AR/AR-Assembly_Assembly_Level_Machine_Organization.txt> ;
            ns1:ku_text """Pages:103-104 HOURS CS Core = 1 KA Core = 2 AR-Assembly: Assembly Level
Machine Organization CS Core: 1\\. von Neumann machine architecture 2\\. Control
unit: instruction fetch, decode, and execution (See also: OS-Principles) 3\\.
Introduction to SIMD vs MIMD and the Flynn taxonomy (See also: PDC-Programs,
OS-Scheduling, OS-Process) 104 4\\. Shared memory multiprocessors/multicore
organization (See also: PDC-Programs, OS-Scheduling) KA Core: 5\\. Instruction
set architecture (ISA) (e.g., x86, ARM and RISC-V) a. Fixed vs variable-width
instruction sets b. Instruction formats c. Data manipulation, control, I/O d.
Addressing modes e. Machine language programming f. Assembly language
programming 6\\. Subroutine call and return mechanisms (See also: FPL-
Translation, OS-Principles) 7\\. I/O and interrupts (See also: OS-Principles)
8\\. Heap, static, stack, and code segments (See also: FPL-Translation, OS-
Process) Illustrative Learning Outcomes: CS Core: 1\\. Discuss how the
classical von Neumann functional units are implemented in embedded systems,
particularly on-chip and off-chip memory. 2\\. Describe how instructions are
executed in a classical von Neumann machine, with extensions for threads,
multiprocessor synchronization, and SIMD execution. 3\\. Assess an example
diagram with instruction-level parallelism and hazards to describe how they
are managed in typical processor pipelines. KA Core: 4\\. Discuss how
instructions are represented at the machine level and in the context of a
symbolic assembler. 5\\. Map an example of high-level language patterns into
assembly/machine language notations. 6\\. Contrast different instruction
formats considering aspects such as addresses per instruction and variable-
length vs fixed-length formats. 7\\. Analyze a subroutine diagram to comment on
how subroutine calls are handled at the assembly level. 8\\. Describe basic
concepts of interrupts and I/O operations. 9\\. Write a simple assembly
language program for string/array processing and manipulation."""^^xsd:string ;
            ns1:score "0.6761725"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including topics such as von Neumann machine architecture, control units, and instruction set architecture." ;
            ns2:ka "Architecture_and_Organization_AR" ;
            ns2:ku "AR-Assembly_Assembly_Level_Machine_Organization" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Functional_Functional_Programming.txt> ;
            ns1:ku_text """Pages: 131-132-133 HOURS CS Core = 4 KA Core = 3 FPL-Functional: Functional
Programming CS Core: 1\\. Lambda expressions and evaluation: (See also: AL-
Models, FPL-Formalism) a. Variable binding and scope rules. (See also: SDF-
Fundamentals) b. Parameter-passing. (See also: SDF-Fundamentals) c. Nested
lambda expressions and reduction order. 2\\. Effect-free programming: a.
Function calls have no side effects, facilitating compositional reasoning. b.
Immutable variables and data copying vs reduction. c. Use of recursion vs
loops vs pipelining (map/reduce). 3\\. Processing structured data (e.g., trees)
via functions with cases for each data variant: a. Functions defined over
compound data in terms of functions applied to the constituent pieces. b.
Persistent data structures. 4\\. Using higher-order functions (taking,
returning, and storing functions). KA Core: 5\\. Metaprogramming and
reflection. 6\\. Function closures (functions using variables in the enclosing
lexical environment). a. Basic meaning and definition - creating closures at
run-time by capturing the environment. b. Canonical idioms: call-backs,
arguments to iterators, reusable code via function arguments. c. Using a
closure to encapsulate data in its environment. d. Delayed versus eager
evaluation. Non-core: 7\\. Graph reduction machine and call-by-need. 8\\.
Implementing delayed evaluation. 9\\. Integration with logic programming
paradigm using concepts such as equational logic, narrowing, residuation and
semantic unification. (See also: FPL-Logic) 10\\. Integration with other
programming paradigms such as imperative and object-oriented. Illustrative
learning outcomes: CS Core: 1\\. Develop basic algorithms that avoid assigning
to mutable states or considering reference equality. 2\\. Develop useful
functions that take and return other functions. 3\\. Compare and contrast how
computational solutions to a problem differ in procedural, functional, and
object-oriented approaches. 4\\. Compare and contrast mechanisms to define and
protect data elements within procedural, functional, and object-oriented
approaches. KA Core: 5\\. Explain a simple example of lambda expression being
implemented using a virtual machine, such as a SECD machine, showing storage
and reclaim of the environment. 6\\. Correctly interpret variables and lexical
scope in a program using function closures. 7\\. Use functional encapsulation
mechanisms such as closures and modular interfaces. 8\\. Compare and contrast
stateful vs stateless execution. 9\\. Define and use iterators and other
operations on aggregates, including operations that take functions as
arguments, in multiple programming languages, selecting the most natural
idioms for each language. (See also: FPL-OOP) Non-core: 10\\. Illustrate graph
reduction using a l-expression using a shared subexpression. 11\\. Illustrate
the execution of a simple nested l-expression using an abstract machine, such
as an ABC machine. 12\\. Illustrate narrowing, residuation, and semantic
unification using simple illustrative examples. 13\\. Illustrate the
concurrency constructs using simple programming examples of known concepts
such as a buffer being read and written concurrently or sequentially. (See
also: FPL-OOP)"""^^xsd:string ;
            ns1:score "0.6756594"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture covers optimization/scheduling; KU focuses on functional programming concepts not addressed." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Functional_Functional_Programming" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> ;
            ns1:ku_text """Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic
Programming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-
LRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See
also: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical
connectives and simpler relations. 4\\. Definitions of Horn clause, facts,
goals and subgoals. 5\\. Unification and unification algorithm; unification vs
assertion vs expression evaluation. 6\\. Mixing relations with functions. (See
also: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-
world vs open-world assumptions. Non-core: 9\\. Memory overhead of variable
copying in handling iterative programs. 10\\. Programming constructs to store
partial computation and pruning search trees. 11\\. Mixing functional
programming and logic programming using concepts such as equational logic,
narrowing, residuation, and semantic unification. (See also: FPL-Functional)
12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-
LRR) 13\\. Integration with other programming paradigms such as object-oriented
programming. 14\\. Advance programming constructs such as difference-lists,
creating user defined data structures, set of, etc. Illustrative learning
outcomes: KA Core: 1\\. Use a logic language to implement a conventional
algorithm. 2\\. Use a logic language to implement an algorithm employing
implicit search using clauses, relations, and cuts. 3\\. Use a simple
illustrative example to show correspondence between First Order Predicate
Logic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to
illustrate the unification algorithm and its role of parameter-passing in
query reduction. 5\\. Use simple logic programs interleaving relations,
functions, and recursive programming such as factorial and Fibonacci numbers
and simple complex relationships between entities and illustrate execution and
parameter-passing using unification and backtracking. Non-core: 6\\. Illustrate
computation of simple programs such as Fibonacci and show overhead of
recomputation, and then show how to improve execution overhead."""^^xsd:string ;
            ns1:score "0.6776459"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including topics such as linear programming, scheduling, and logical programming, with a focus on universal and existential quantifiers, first-order predicate logic, and unification." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Logic_Logic_Programming" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ] ;
    ns1:uetext """Label: Optimisation & Automates finis Objectif: (résultats d'apprentissage) Course content: • La partie sur l'optimisation présentera plusieurs types de modélisation et de résolution de
problèmes liés à la gestion (des ressources, des coûts et profits, des tâches, etc.). Elle contiendra
deux grandes parties: l'une concerne la programmation linéaire, l'autre l'ordonnancement. Course name: http://example.org/course/UE_XLG5IU040""" .

ns2:UE_XLG5IU050 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> ;
            ns1:ku_text """Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-
Fundamentals: Fundamentals CS Core: 1\\. Importance of networking in
contemporary computing, and associated challenges. (See also: SEPContext, SEP-
Privacy) 2\\. Organization of the internet (e.g., users, Internet Service
Providers, autonomous systems, content providers, content delivery networks)
3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles
(application, transport, network, datalink, and physical) 5\\. Layering
principles (e.g., encapsulation and hourglass model) (See also: SF-
Foundations) 6\\. Network elements (e.g., routers, switches, hubs, access
points, and hosts) 7\\. Basic queueing concepts (e.g., relationship with
latency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS
Core: 1\\. Articulate the organization of the internet. 2\\. List and define the
appropriate network terminology 3\\. Describe the layered structure of a
typical networked architecture. 4\\. Identify the different types of complexity
in a network (edges, core, etc.)."""^^xsd:string ;
            ns1:score "0.65958285"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap; lecture focuses on data structures, KU on networking fundamentals." ;
            ns2:ka "Networking_and_Communication_NC" ;
            ns2:ku "NC-Fundamentals_Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Fundamental_Data_Structures.txt> ;
            ns1:ku_text """Pages : 169-170 CS Core : 12, KA Core : None CS Core: (See also: AL-
Foundational) 1\\. Standard abstract data types such as lists, stacks, queues,
sets, and maps/dictionaries, including operations on them. 2\\. Selecting and
using appropriate data structures. 3\\. Performance implications of choice of
data structure(s). 4\\. Strings and string processing. Illustrative Learning
Outcomes: CS Core: 1\\. Write programs that use each of the key abstract data
types provided in the language (e.g., arrays, tuples/records/structs, lists,
stacks, queues, and associative data types like sets, dictionaries/maps). 2\\.
Select the appropriate data structure for a given problem. 3\\. Explain how the
performance of a program may change when using different data structures or
operations. 4\\. Write programs that work with text by using string processing
capabilities provided by the language."""^^xsd:string ;
            ns1:score "0.65687025"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Covers lists/stacks/queues but lacks performance and other ADTs (sets/maps)" ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Fundamental_Data_Structures" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Algorithmic_Foundations_AL/AL-Foundational_Foundational_Data_Structures_and_Algorithms.txt> ;
            ns1:ku_text """Pages:88-90 HOURS CS Core = 11 KA Core = 6 AL-Foundational: Foundational Data
Structures and Algorithms CS Core: (See also: SDF-Data-Structures, SDF-
Algorithms) 1\\. Abstract Data Type (ADT) and operations on an ADT (See also:
FPL-Types) a. Dictionary operations (insert, delete, find) 2\\. Arrays a.
Numeric vs non-numeric, character strings b. Single (vector) vs
multidimensional (matrix) 3\\. Records/Structs/Tuples and Objects (See also:
FPL-OOP) 4\\. Linked lists (for historical reasons) a. Single vs Double and
Linear vs Circular 5\\. Stacks 6\\. Queues and deques a. Heap-based priority
queue 7\\. Hash tables/maps a. Collision resolution and complexity (e.g.,
probing, chaining, rehash) 8\\. Graphs (e.g., [un]directed, [a]cyclic,
[un]connected, and [un]weighted) (See also: MSF-Discrete) a. Graph
representation: adjacency list vs matrix 9\\. Trees (See also: MSF-Discrete) a.
Binary, n-ary, and search trees b. Balanced (e.g., AVL, Red-Black, Heap) 10\\.
Sets (See also: MSF-Discrete) 11\\. Search algorithms a. O(n) complexity (e.g.,
linear/sequential array/list search) b. O(log2 n) complexity (e.g., binary
search) c. O(logb n) complexity (e.g., uninformed depth/breadth-first tree
search) 12\\. Sorting algorithms (e.g., stable, unstable) a. O(n2) complexity
(e.g., insertion, selection), b. O(n log n) complexity (e.g., quicksort,
merge, timsort) 13\\. Graph algorithms a. Shortest path (e.g., Dijkstra's,
Floyd's) b. Minimal spanning tree (e.g., Prim's, Kruskal's) KA Core: 14\\.
Sorting algorithms a. O(n log n) complexity heapsort b. Pseudo O(n) complexity
(e.g., bucket, counting, radix) 15\\. Graph algorithms a. Transitive closure
(e.g., Warshall's) b. Topological sort 16\\. Matching a. Efficient string
matching (e.g., Boyer-Moore, Knuth-Morris-Pratt) b. Longest common subsequence
matching c. Regular expression matching Non-core: 17\\. Cryptography algorithms
(e.g., SHA-256) (See also: SEC-Crypto) 18\\. Parallel algorithms (See also:
PDC-Algorithms, FPL-Parallel) 19\\. Consensus algorithms (e.g., Blockchain)
(See also: SEC-Crypto) a. Proof of work vs proof of stake (See also: SEP-
Sustainability) 20\\. Quantum computing algorithms (See also: AL-Models, AR-
Quantum) a. Oracle-based (e.g., Deutsch-Jozsa, Bernstein-Vazirani, Simon) b.
Superpolynomial speed-up via QFT (e.g., Shor's) c. Polynomial speed-up via
amplitude amplification (e.g., Grover's) 21\\. Fast-Fourier Transform (FFT)
algorithm 22\\. Differential evolution algorithm Illustrative Learning
Outcomes: CS Core: 1\\. For each ADT/Data-Structure in this unit a. Explain its
definition, properties, representation(s), and associated ADT operations. b.
Explain step-by-step how the ADT operations associated with the data structure
transform it. 2\\. For each algorithm in this unit explain step-by-step how the
algorithm operates. 3\\. For each algorithmic approach (e.g., sorting) in this
unit apply a prototypical example of the approach (e.g., merge sort). 90 4\\.
Given requirements for a problem, develop multiple solutions using various
data structures and algorithms. Subsequently, evaluate the suitability,
strengths, and weaknesses selecting an approach that best satisfies the
requirements. 5\\. Explain how collision avoidance and collision resolution is
handled in hash tables. 6\\. Explain factors beyond computational efficiency
that influence the choice of algorithms, such as programming time,
maintainability, and the use of application-specific patterns in the input
data. 7\\. Explain the heap property and the use of heaps as an implementation
of a priority queue. KA Core: 8\\. For each of the algorithms and algorithmic
approaches in the KA Core topics: a. Explain a prototypical example of the
algorithm, and b. Explain step-by-step how the algorithm operates. Non-core:
9\\. An appreciation of quantum computation and its application to certain
problems."""^^xsd:string ;
            ns1:score "0.659309"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including abstract data types, data structures, algorithms, and their applications, with a focus on computer science core topics." ;
            ns2:ka "Algorithmic_Foundations_AL" ;
            ns2:ku "AL-Foundational_Foundational_Data_Structures_and_Algorithms" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Fundamental_Data_Structures.txt> ;
            ns1:ku_text """Pages : 169-170 CS Core : 12, KA Core : None CS Core: (See also: AL-
Foundational) 1\\. Standard abstract data types such as lists, stacks, queues,
sets, and maps/dictionaries, including operations on them. 2\\. Selecting and
using appropriate data structures. 3\\. Performance implications of choice of
data structure(s). 4\\. Strings and string processing. Illustrative Learning
Outcomes: CS Core: 1\\. Write programs that use each of the key abstract data
types provided in the language (e.g., arrays, tuples/records/structs, lists,
stacks, queues, and associative data types like sets, dictionaries/maps). 2\\.
Select the appropriate data structure for a given problem. 3\\. Explain how the
performance of a program may change when using different data structures or
operations. 4\\. Write programs that work with text by using string processing
capabilities provided by the language."""^^xsd:string ;
            ns1:score "0.65687025"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the abstract data types, selecting and using appropriate data structures, and performance implications, which are the main topics of the KU." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Fundamental_Data_Structures" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> ;
            ns1:ku_text """Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-
Fundamentals: Fundamentals CS Core: 1\\. Importance of networking in
contemporary computing, and associated challenges. (See also: SEPContext, SEP-
Privacy) 2\\. Organization of the internet (e.g., users, Internet Service
Providers, autonomous systems, content providers, content delivery networks)
3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles
(application, transport, network, datalink, and physical) 5\\. Layering
principles (e.g., encapsulation and hourglass model) (See also: SF-
Foundations) 6\\. Network elements (e.g., routers, switches, hubs, access
points, and hosts) 7\\. Basic queueing concepts (e.g., relationship with
latency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS
Core: 1\\. Articulate the organization of the internet. 2\\. List and define the
appropriate network terminology 3\\. Describe the layered structure of a
typical networked architecture. 4\\. Identify the different types of complexity
in a network (edges, core, etc.)."""^^xsd:string ;
            ns1:score "0.65958285"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the fundamental concepts of networking, including the organization of the internet, network elements, and layered structure, which aligns with the KU's objectives." ;
            ns2:ka "Networking_and_Communication_NC" ;
            ns2:ku "NC-Fundamentals_Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Algorithmic_Foundations_AL/AL-Foundational_Foundational_Data_Structures_and_Algorithms.txt> ;
            ns1:ku_text """Pages:88-90 HOURS CS Core = 11 KA Core = 6 AL-Foundational: Foundational Data
Structures and Algorithms CS Core: (See also: SDF-Data-Structures, SDF-
Algorithms) 1\\. Abstract Data Type (ADT) and operations on an ADT (See also:
FPL-Types) a. Dictionary operations (insert, delete, find) 2\\. Arrays a.
Numeric vs non-numeric, character strings b. Single (vector) vs
multidimensional (matrix) 3\\. Records/Structs/Tuples and Objects (See also:
FPL-OOP) 4\\. Linked lists (for historical reasons) a. Single vs Double and
Linear vs Circular 5\\. Stacks 6\\. Queues and deques a. Heap-based priority
queue 7\\. Hash tables/maps a. Collision resolution and complexity (e.g.,
probing, chaining, rehash) 8\\. Graphs (e.g., [un]directed, [a]cyclic,
[un]connected, and [un]weighted) (See also: MSF-Discrete) a. Graph
representation: adjacency list vs matrix 9\\. Trees (See also: MSF-Discrete) a.
Binary, n-ary, and search trees b. Balanced (e.g., AVL, Red-Black, Heap) 10\\.
Sets (See also: MSF-Discrete) 11\\. Search algorithms a. O(n) complexity (e.g.,
linear/sequential array/list search) b. O(log2 n) complexity (e.g., binary
search) c. O(logb n) complexity (e.g., uninformed depth/breadth-first tree
search) 12\\. Sorting algorithms (e.g., stable, unstable) a. O(n2) complexity
(e.g., insertion, selection), b. O(n log n) complexity (e.g., quicksort,
merge, timsort) 13\\. Graph algorithms a. Shortest path (e.g., Dijkstra's,
Floyd's) b. Minimal spanning tree (e.g., Prim's, Kruskal's) KA Core: 14\\.
Sorting algorithms a. O(n log n) complexity heapsort b. Pseudo O(n) complexity
(e.g., bucket, counting, radix) 15\\. Graph algorithms a. Transitive closure
(e.g., Warshall's) b. Topological sort 16\\. Matching a. Efficient string
matching (e.g., Boyer-Moore, Knuth-Morris-Pratt) b. Longest common subsequence
matching c. Regular expression matching Non-core: 17\\. Cryptography algorithms
(e.g., SHA-256) (See also: SEC-Crypto) 18\\. Parallel algorithms (See also:
PDC-Algorithms, FPL-Parallel) 19\\. Consensus algorithms (e.g., Blockchain)
(See also: SEC-Crypto) a. Proof of work vs proof of stake (See also: SEP-
Sustainability) 20\\. Quantum computing algorithms (See also: AL-Models, AR-
Quantum) a. Oracle-based (e.g., Deutsch-Jozsa, Bernstein-Vazirani, Simon) b.
Superpolynomial speed-up via QFT (e.g., Shor's) c. Polynomial speed-up via
amplitude amplification (e.g., Grover's) 21\\. Fast-Fourier Transform (FFT)
algorithm 22\\. Differential evolution algorithm Illustrative Learning
Outcomes: CS Core: 1\\. For each ADT/Data-Structure in this unit a. Explain its
definition, properties, representation(s), and associated ADT operations. b.
Explain step-by-step how the ADT operations associated with the data structure
transform it. 2\\. For each algorithm in this unit explain step-by-step how the
algorithm operates. 3\\. For each algorithmic approach (e.g., sorting) in this
unit apply a prototypical example of the approach (e.g., merge sort). 90 4\\.
Given requirements for a problem, develop multiple solutions using various
data structures and algorithms. Subsequently, evaluate the suitability,
strengths, and weaknesses selecting an approach that best satisfies the
requirements. 5\\. Explain how collision avoidance and collision resolution is
handled in hash tables. 6\\. Explain factors beyond computational efficiency
that influence the choice of algorithms, such as programming time,
maintainability, and the use of application-specific patterns in the input
data. 7\\. Explain the heap property and the use of heaps as an implementation
of a priority queue. KA Core: 8\\. For each of the algorithms and algorithmic
approaches in the KA Core topics: a. Explain a prototypical example of the
algorithm, and b. Explain step-by-step how the algorithm operates. Non-core:
9\\. An appreciation of quantum computation and its application to certain
problems."""^^xsd:string ;
            ns1:score "0.659309"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses narrowly on linear structures (lists/stacks/queues), while KU covers broader topics like trees, graphs, algorithms, and evaluation criteria beyond selection of structures." ;
            ns2:ka "Algorithmic_Foundations_AL" ;
            ns2:ku "AL-Foundational_Foundational_Data_Structures_and_Algorithms" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Networking_and_Communication_NC/NC-Fundamentals_Fundamentals.txt> ;
            ns1:ku_text """Pages: 198-199 HOURS CS Core = 2.5 + 0.25 (SEP) + 0.25 (SF) KA Core = . NC-
Fundamentals: Fundamentals CS Core: 1\\. Importance of networking in
contemporary computing, and associated challenges. (See also: SEPContext, SEP-
Privacy) 2\\. Organization of the internet (e.g., users, Internet Service
Providers, autonomous systems, content providers, content delivery networks)
3\\. Switching techniques (e.g., circuit and packet) 4\\. Layers and their roles
(application, transport, network, datalink, and physical) 5\\. Layering
principles (e.g., encapsulation and hourglass model) (See also: SF-
Foundations) 6\\. Network elements (e.g., routers, switches, hubs, access
points, and hosts) 7\\. Basic queueing concepts (e.g., relationship with
latency, congestion, service levels, etc.) Illustrative Learning Outcomes: CS
Core: 1\\. Articulate the organization of the internet. 2\\. List and define the
appropriate network terminology 3\\. Describe the layered structure of a
typical networked architecture. 4\\. Identify the different types of complexity
in a network (edges, core, etc.)."""^^xsd:string ;
            ns1:score "0.65958285"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on linear structures does not cover networking topics." ;
            ns2:ka "Networking_and_Communication_NC" ;
            ns2:ku "NC-Fundamentals_Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Algorithmic_Foundations_AL/AL-Foundational_Foundational_Data_Structures_and_Algorithms.txt> ;
            ns1:ku_text """Pages:88-90 HOURS CS Core = 11 KA Core = 6 AL-Foundational: Foundational Data
Structures and Algorithms CS Core: (See also: SDF-Data-Structures, SDF-
Algorithms) 1\\. Abstract Data Type (ADT) and operations on an ADT (See also:
FPL-Types) a. Dictionary operations (insert, delete, find) 2\\. Arrays a.
Numeric vs non-numeric, character strings b. Single (vector) vs
multidimensional (matrix) 3\\. Records/Structs/Tuples and Objects (See also:
FPL-OOP) 4\\. Linked lists (for historical reasons) a. Single vs Double and
Linear vs Circular 5\\. Stacks 6\\. Queues and deques a. Heap-based priority
queue 7\\. Hash tables/maps a. Collision resolution and complexity (e.g.,
probing, chaining, rehash) 8\\. Graphs (e.g., [un]directed, [a]cyclic,
[un]connected, and [un]weighted) (See also: MSF-Discrete) a. Graph
representation: adjacency list vs matrix 9\\. Trees (See also: MSF-Discrete) a.
Binary, n-ary, and search trees b. Balanced (e.g., AVL, Red-Black, Heap) 10\\.
Sets (See also: MSF-Discrete) 11\\. Search algorithms a. O(n) complexity (e.g.,
linear/sequential array/list search) b. O(log2 n) complexity (e.g., binary
search) c. O(logb n) complexity (e.g., uninformed depth/breadth-first tree
search) 12\\. Sorting algorithms (e.g., stable, unstable) a. O(n2) complexity
(e.g., insertion, selection), b. O(n log n) complexity (e.g., quicksort,
merge, timsort) 13\\. Graph algorithms a. Shortest path (e.g., Dijkstra's,
Floyd's) b. Minimal spanning tree (e.g., Prim's, Kruskal's) KA Core: 14\\.
Sorting algorithms a. O(n log n) complexity heapsort b. Pseudo O(n) complexity
(e.g., bucket, counting, radix) 15\\. Graph algorithms a. Transitive closure
(e.g., Warshall's) b. Topological sort 16\\. Matching a. Efficient string
matching (e.g., Boyer-Moore, Knuth-Morris-Pratt) b. Longest common subsequence
matching c. Regular expression matching Non-core: 17\\. Cryptography algorithms
(e.g., SHA-256) (See also: SEC-Crypto) 18\\. Parallel algorithms (See also:
PDC-Algorithms, FPL-Parallel) 19\\. Consensus algorithms (e.g., Blockchain)
(See also: SEC-Crypto) a. Proof of work vs proof of stake (See also: SEP-
Sustainability) 20\\. Quantum computing algorithms (See also: AL-Models, AR-
Quantum) a. Oracle-based (e.g., Deutsch-Jozsa, Bernstein-Vazirani, Simon) b.
Superpolynomial speed-up via QFT (e.g., Shor's) c. Polynomial speed-up via
amplitude amplification (e.g., Grover's) 21\\. Fast-Fourier Transform (FFT)
algorithm 22\\. Differential evolution algorithm Illustrative Learning
Outcomes: CS Core: 1\\. For each ADT/Data-Structure in this unit a. Explain its
definition, properties, representation(s), and associated ADT operations. b.
Explain step-by-step how the ADT operations associated with the data structure
transform it. 2\\. For each algorithm in this unit explain step-by-step how the
algorithm operates. 3\\. For each algorithmic approach (e.g., sorting) in this
unit apply a prototypical example of the approach (e.g., merge sort). 90 4\\.
Given requirements for a problem, develop multiple solutions using various
data structures and algorithms. Subsequently, evaluate the suitability,
strengths, and weaknesses selecting an approach that best satisfies the
requirements. 5\\. Explain how collision avoidance and collision resolution is
handled in hash tables. 6\\. Explain factors beyond computational efficiency
that influence the choice of algorithms, such as programming time,
maintainability, and the use of application-specific patterns in the input
data. 7\\. Explain the heap property and the use of heaps as an implementation
of a priority queue. KA Core: 8\\. For each of the algorithms and algorithmic
approaches in the KA Core topics: a. Explain a prototypical example of the
algorithm, and b. Explain step-by-step how the algorithm operates. Non-core:
9\\. An appreciation of quantum computation and its application to certain
problems."""^^xsd:string ;
            ns1:score "0.659309"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture covers only a small part of the KU, focusing on linear structures without addressing the broader topics." ;
            ns2:ka "Algorithmic_Foundations_AL" ;
            ns2:ku "AL-Foundational_Foundational_Data_Structures_and_Algorithms" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Fundamental_Data_Structures.txt> ;
            ns1:ku_text """Pages : 169-170 CS Core : 12, KA Core : None CS Core: (See also: AL-
Foundational) 1\\. Standard abstract data types such as lists, stacks, queues,
sets, and maps/dictionaries, including operations on them. 2\\. Selecting and
using appropriate data structures. 3\\. Performance implications of choice of
data structure(s). 4\\. Strings and string processing. Illustrative Learning
Outcomes: CS Core: 1\\. Write programs that use each of the key abstract data
types provided in the language (e.g., arrays, tuples/records/structs, lists,
stacks, queues, and associative data types like sets, dictionaries/maps). 2\\.
Select the appropriate data structure for a given problem. 3\\. Explain how the
performance of a program may change when using different data structures or
operations. 4\\. Write programs that work with text by using string processing
capabilities provided by the language."""^^xsd:string ;
            ns1:score "0.65687025"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture covers some aspects of the KU but lacks coverage of sets, maps, performance implications, and string processing." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Fundamental_Data_Structures" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ] ;
    ns1:uetext """Label: Structures Linéaires Objectif: (résultats d'apprentissage) Course content: - de présenter les structures linéraires abstraites et concrètes (liste / pile / file)
afin d'être capable de choisir la(ou les) structure(s) les plus adaptée(s) pour répondre à un
problème donné Course name: http://example.org/course/UE_XLG5IU050""" .

ns2:UE_XLG5IU060 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Date_Management_DM/DM-Querying_Query_Construction.txt> ;
            ns1:ku_text """Pages: 118 HOURS CS Core = 2 KA Core = 4 DM-Querying: Query Construction CS
Core: 1\\. SQL Query Formation a. Interactive SQL execution b. Programmatic
execution of an SQL query KA Core: 2\\. Relational Algebra 3\\. SQL a. Data
definition including integrity and other constraint specifications b. Update
sublanguage Non-core: 4\\. Relational Calculus 5\\. QBE and 4th-generation
environments 6\\. Different ways to invoke non-procedural queries in
conventional languages 7\\. Introduction to other major query languages (e.g.,
XPATH, SPARQL) 8\\. Stored procedures Illustrative Learning Outcomes: CS Core:
1\\. Compose SQL queries that incorporate select, project, join, union,
intersection, set difference, and set division. 2\\. Determine when a nested
SQL query is correlated or not. 3\\. Iterate over data retrieved
programmatically from a database via an SQL query. KA Core: 4\\. Define, in
SQL, a relation schema, including all integrity constraints and delete/update
triggers. 5\\. Compose an SQL query to update a tuple in a relation."""^^xsd:string ;
            ns1:score "0.6695606"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "Covers SQL data definition, querying (joins, updates), and programmatic execution, aligning with core SQL objectives." ;
            ns2:ka "Date_Management_DM" ;
            ns2:ku "DM-Querying_Query_Construction" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.65815514"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on SQL/PHP web dev, while KU covers broader platforms (mobile, embedded), constraints, APIs, and language specifics not addressed." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Date_Management_DM/DM-Querying_Query_Construction.txt> ;
            ns1:ku_text """Pages: 118 HOURS CS Core = 2 KA Core = 4 DM-Querying: Query Construction CS
Core: 1\\. SQL Query Formation a. Interactive SQL execution b. Programmatic
execution of an SQL query KA Core: 2\\. Relational Algebra 3\\. SQL a. Data
definition including integrity and other constraint specifications b. Update
sublanguage Non-core: 4\\. Relational Calculus 5\\. QBE and 4th-generation
environments 6\\. Different ways to invoke non-procedural queries in
conventional languages 7\\. Introduction to other major query languages (e.g.,
XPATH, SPARQL) 8\\. Stored procedures Illustrative Learning Outcomes: CS Core:
1\\. Compose SQL queries that incorporate select, project, join, union,
intersection, set difference, and set division. 2\\. Determine when a nested
SQL query is correlated or not. 3\\. Iterate over data retrieved
programmatically from a database via an SQL query. KA Core: 4\\. Define, in
SQL, a relation schema, including all integrity constraints and delete/update
triggers. 5\\. Compose an SQL query to update a tuple in a relation."""^^xsd:string ;
            ns1:score "0.6695606"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the core topics of SQL query formation, relational algebra, and data definition, which are a significant subset of the KU." ;
            ns2:ka "Date_Management_DM" ;
            ns2:ku "DM-Querying_Query_Construction" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.65815514"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers topics related to database management and web development, which align with the knowledge unit's focus on development platforms and programming languages." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Web_Platforms.txt> ;
            ns1:ku_text """Page : 241 CS Core : None, KA Core : 5 (+1) (Additional hours here are hours
shared with other Areas) KA Core: 1\\. Web programming languages (e.g., HTML5,
JavaScript, PHP, CSS) 2\\. Web platforms, frameworks, or meta-frameworks a.
Cloud services b. API, Web Components 3\\. Software as a Service (SaaS) 4\\. Web
standards such as document object model, accessibility (See also: HCI-
Accessibility) 5\\. Security and Privacy Considerations (See also: SEP-
Security) Non-core: 6\\. Analyzing requirements for web applications 7\\.
Computing services (See also: DM-NoSQL) a. Cloud Hosting b. Scalability (e.g.,
Autoscaling, Clusters) c. Cost estimation for services 8\\. Data management
(See also: DM-Core) a. Data residency: where the data is located and what
paths can be taken to access it b. Data integrity: guaranteeing data is
accessible and that data is deleted when required 9\\. Architecture a.
Monoliths vs Microservices b. Micro-frontends c. Event-Driven vs RESTful
architectures: advantages and disadvantages d. Serverless, cloud computing on
demand 10\\. Storage solutions (See also: DM-Relational, DM-NoSQL) a.
Relational Databases b. NoSQL databases Illustrative Learning Outcomes: KA
Core: 1\\. Design and implement a web-based application using a microservice
architecture design. 2\\. Describe the constraints, such as hosting, services,
and scalability, related to web platforms. 3\\. Compare and contrast web
programming with general-purpose programming. 4\\. Describe the differences
between Software-as-a-Service (SaaS) and traditional software products. 5\\.
Discuss how web standards impact software development. 6\\. Evaluate an
existing web application against current web standards."""^^xsd:string ;
            ns1:score "0.63934064"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture covers SQL/PHP basics but lacks depth on microservices, cloud, and standards (KA Core 1,2,4,5 missing)" ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Web_Platforms" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.65815514"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on SQL and PHP for web development, which partially overlaps with the KU's web programming aspects but does not cover the broader range of topics such as mobile, game, robotics, or the specific learning outcomes like the three-tier model or state maintenance." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Web_Platforms.txt> ;
            ns1:ku_text """Page : 241 CS Core : None, KA Core : 5 (+1) (Additional hours here are hours
shared with other Areas) KA Core: 1\\. Web programming languages (e.g., HTML5,
JavaScript, PHP, CSS) 2\\. Web platforms, frameworks, or meta-frameworks a.
Cloud services b. API, Web Components 3\\. Software as a Service (SaaS) 4\\. Web
standards such as document object model, accessibility (See also: HCI-
Accessibility) 5\\. Security and Privacy Considerations (See also: SEP-
Security) Non-core: 6\\. Analyzing requirements for web applications 7\\.
Computing services (See also: DM-NoSQL) a. Cloud Hosting b. Scalability (e.g.,
Autoscaling, Clusters) c. Cost estimation for services 8\\. Data management
(See also: DM-Core) a. Data residency: where the data is located and what
paths can be taken to access it b. Data integrity: guaranteeing data is
accessible and that data is deleted when required 9\\. Architecture a.
Monoliths vs Microservices b. Micro-frontends c. Event-Driven vs RESTful
architectures: advantages and disadvantages d. Serverless, cloud computing on
demand 10\\. Storage solutions (See also: DM-Relational, DM-NoSQL) a.
Relational Databases b. NoSQL databases Illustrative Learning Outcomes: KA
Core: 1\\. Design and implement a web-based application using a microservice
architecture design. 2\\. Describe the constraints, such as hosting, services,
and scalability, related to web platforms. 3\\. Compare and contrast web
programming with general-purpose programming. 4\\. Describe the differences
between Software-as-a-Service (SaaS) and traditional software products. 5\\.
Discuss how web standards impact software development. 6\\. Evaluate an
existing web application against current web standards."""^^xsd:string ;
            ns1:score "0.63934064"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers topics such as database management, web development, and architecture, which align with the Knowledge Unit's core and non-core topics." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Web_Platforms" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Web_Platforms.txt> ;
            ns1:ku_text """Page : 241 CS Core : None, KA Core : 5 (+1) (Additional hours here are hours
shared with other Areas) KA Core: 1\\. Web programming languages (e.g., HTML5,
JavaScript, PHP, CSS) 2\\. Web platforms, frameworks, or meta-frameworks a.
Cloud services b. API, Web Components 3\\. Software as a Service (SaaS) 4\\. Web
standards such as document object model, accessibility (See also: HCI-
Accessibility) 5\\. Security and Privacy Considerations (See also: SEP-
Security) Non-core: 6\\. Analyzing requirements for web applications 7\\.
Computing services (See also: DM-NoSQL) a. Cloud Hosting b. Scalability (e.g.,
Autoscaling, Clusters) c. Cost estimation for services 8\\. Data management
(See also: DM-Core) a. Data residency: where the data is located and what
paths can be taken to access it b. Data integrity: guaranteeing data is
accessible and that data is deleted when required 9\\. Architecture a.
Monoliths vs Microservices b. Micro-frontends c. Event-Driven vs RESTful
architectures: advantages and disadvantages d. Serverless, cloud computing on
demand 10\\. Storage solutions (See also: DM-Relational, DM-NoSQL) a.
Relational Databases b. NoSQL databases Illustrative Learning Outcomes: KA
Core: 1\\. Design and implement a web-based application using a microservice
architecture design. 2\\. Describe the constraints, such as hosting, services,
and scalability, related to web platforms. 3\\. Compare and contrast web
programming with general-purpose programming. 4\\. Describe the differences
between Software-as-a-Service (SaaS) and traditional software products. 5\\.
Discuss how web standards impact software development. 6\\. Evaluate an
existing web application against current web standards."""^^xsd:string ;
            ns1:score "0.63934064"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture covers basic SQL and PHP programming, which are part of the KU, but does not address the broader topics like web platforms, SaaS, security, and architecture." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Web_Platforms" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Date_Management_DM/DM-Querying_Query_Construction.txt> ;
            ns1:ku_text """Pages: 118 HOURS CS Core = 2 KA Core = 4 DM-Querying: Query Construction CS
Core: 1\\. SQL Query Formation a. Interactive SQL execution b. Programmatic
execution of an SQL query KA Core: 2\\. Relational Algebra 3\\. SQL a. Data
definition including integrity and other constraint specifications b. Update
sublanguage Non-core: 4\\. Relational Calculus 5\\. QBE and 4th-generation
environments 6\\. Different ways to invoke non-procedural queries in
conventional languages 7\\. Introduction to other major query languages (e.g.,
XPATH, SPARQL) 8\\. Stored procedures Illustrative Learning Outcomes: CS Core:
1\\. Compose SQL queries that incorporate select, project, join, union,
intersection, set difference, and set division. 2\\. Determine when a nested
SQL query is correlated or not. 3\\. Iterate over data retrieved
programmatically from a database via an SQL query. KA Core: 4\\. Define, in
SQL, a relation schema, including all integrity constraints and delete/update
triggers. 5\\. Compose an SQL query to update a tuple in a relation."""^^xsd:string ;
            ns1:score "0.6695606"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture covers basic SQL and web development, but lacks depth in advanced querying topics." ;
            ns2:ka "Date_Management_DM" ;
            ns2:ku "DM-Querying_Query_Construction" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ] ;
    ns1:uetext """Label: BD & Web Objectif: (résultats d'apprentissage) Course content: Système de Gestion de BD
- de définir et manipuler des données en SQL répondant à un besoin
- de réaliser un site web répondant à une demande client, en PHP Course name: http://example.org/course/UE_XLG5IU060""" .

ns2:UE_XLG5IU070 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.63158786"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in content; lecture focuses on teaching methods while KU covers software architecture concepts." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6496724"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on teaching methods, not the technical KU content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.63158786"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Software Architecture, applies principles in practical scenarios, and analyzes its importance in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6490464"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on teaching methods, while the KU covers technical SE-Formal Methods." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6490464"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of this topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6496724"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.63158786"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on professional development and teaching methods, not the technical aspects of software architecture covered in the KU." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6490464"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Topics unrelated: lecture focuses on teaching methods, KU covers formal methods concepts." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6496724"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not platform-specific programming constraints or languages." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ] ;
    ns1:uetext "Label: Professionalisation Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5IU070" .

ns2:UE_XLG5IU110 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.65839267"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applying principles in practical scenarios, and analyzing the importance of this topic in computing, which aligns with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.66111404"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on project management, while the KU covers development platforms and programming specifics." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.65839267"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap: Lecture focuses on project management, while KU covers formal methods in software engineering." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Project_Management.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Project Management: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Project Management. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.65121686"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers project management, aligning with the KU's focus, but lacks coverage of broader CS core and advanced topics." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Project_Management" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.65839267"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on project management does not cover the core concepts of formal methods in software engineering." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Project_Management.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Project Management: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Project Management. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.65121686"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not SE-Project Management content" ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Project_Management" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Project_Management.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Project Management: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Project Management. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.65121686"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the course content of SE-Project Management, including key concepts, practical applications, and importance in computing." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Project_Management" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.66111404"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on project management, while KU covers technical programming/platform constraints not mentioned in the course content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.66111404"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, and platform languages, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ] ;
    ns1:uetext "Label: Gestion de Projet Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5IU110" .

ns2:UE_XLG5TU200 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not technical scripting topics listed in KU." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in subject matter; lecture focuses on teaching methods while KU is about formal methods concepts." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the technical topics outlined in the Knowledge Unit." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in subject matter; lecture focuses on teaching methods while KU is about formal methods concepts." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including scripting, error handling, piping, system commands, environment variables, file abstraction, data structures, and regular expressions." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including scripting, error handling, piping, system commands, environment variables, file abstraction, data structures, and regular expressions." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's technical content on formal methods." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the technical topics outlined in the Knowledge Unit." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's technical content on formal methods." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in subject matter; lecture focuses on teaching methods while KU is about formal methods concepts." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including scripting, error handling, piping, system commands, environment variables, file abstraction, data structures, and regular expressions." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical aspects of development platforms, programming languages, and constraints outlined in the KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on teaching methods, not the technical aspects of development platforms and programming languages outlined in the KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical aspects of development platforms, programming languages, and constraints outlined in the KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on teaching methods, not the technical aspects of development platforms and programming languages outlined in the KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6374133"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's technical content on formal methods." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical aspects of development platforms, programming languages, and constraints outlined in the KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the technical topics outlined in the Knowledge Unit." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not technical scripting topics listed in KU." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6453911"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on teaching methods, not the technical aspects of development platforms and programming languages outlined in the KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.62935567"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not technical scripting topics listed in KU." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ] ;
    ns1:uetext "Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG5TU200" .

ns2:UE_XLG6AU010 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6448582"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the technical aspects of development platforms and programming described in the KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.6298272"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on teaching methods in English, not the technical content of the Knowledge Unit." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.6339525"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not NLP technical content." ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.6298272"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on English language learning, not CS scripting/system topics" ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6448582"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.6298272"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including scripting, error handling, piping, system commands, environment variables, file abstraction, data structures, and regular expressions." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.6339525"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on teaching methods, while the KU covers technical NLP topics." ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.6339525"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including topics such as deterministic and stochastic grammars, parsing algorithms, and natural language processing." ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6448582"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods for English, while KU covers CS platform/programming concepts." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ] ;
    ns1:uetext "Label: Anglais Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6AU010" .

ns2:UE_XLG6IE010 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6334286"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on Networks, while the KU covers Formal Methods in Software Engineering, which are distinct topics." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6334286"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in subject matter; lecture focuses on teaching methods for networks, while KU is about formal methods in SE." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6445061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on networks, while KU addresses development platforms and programming constraints." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6445061"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6334286"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of this topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6445061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.630564"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture objectives are general, while KU specifies technical scripting details not explicitly mentioned." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.630564"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on networking methods, while the KU covers shell scripting and related topics." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Scripting_Shell_Scripting.txt> ;
            ns1:ku_text """Pages: 133-134 HOURS CS Core = 2 KA Core = 0 FPL-Scripting: Shell Scripting CS
Core: 1\\. Error/exception handling 2\\. Piping (See also: AR-Organization, SF-
Overview, OS-Process) 3\\. System commands (See also: SF-Overview) a. Interface
with operating systems (See also: SF-Overview, OS-Principles) 4\\. Environment
variables (See also: SF-Overview) 5\\. File abstraction and operators (See
also: SDF-Fundamentals, OS-Files, SF-Resource) 6\\. Data structures, such as
arrays and lists. (See also: AL-Foundational, SDF-Fundamentals, SDFData-
Structures) 7\\. Regular expressions (See also: AL-Models) 8\\. Programs and
processes (See also: OS-Process) 9\\. Workflow Illustrative learning outcomes:
CS Core: 1\\. Create and execute automated scripts to manage various system
tasks. 2\\. Solve various text processing problems through scripting."""^^xsd:string ;
            ns1:score "0.630564"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including scripting, error handling, piping, system commands, environment variables, file abstraction, data structures, and regular expressions." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Scripting_Shell_Scripting" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ] ;
    ns1:uetext "Label: Réseaux Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6IE010" .

ns2:UE_XLG6IU020 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-3D_Modeling.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-3D Modeling: Core Concepts CS
Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic 3
KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of GIT-3D Modeling.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6472461"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the administration of object-oriented databases, which aligns with the core concepts of GIT-3D Modeling, and also includes topics on teaching methods, which are relevant to the advanced topics in the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-3D_Modeling" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-3D_Modeling.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-3D Modeling: Core Concepts CS
Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic 3
KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of GIT-3D Modeling.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6472461"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in topics; lecture focuses on database administration while KU is about 3D modeling." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-3D_Modeling" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-3D_Modeling.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-3D Modeling: Core Concepts CS
Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic 3
KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of GIT-3D Modeling.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6472461"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on Database Administration does not substantially cover the Knowledge Unit on GIT-3D Modeling as they address different topics within Computer Science." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-3D_Modeling" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.6484547"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Topics mismatch: DB administration vs. software architecture" ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.6484547"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the administration of object-oriented databases, which aligns with the key concepts of SE-Software Architecture." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.65465856"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on Database Administration does not cover the Knowledge Unit on SE-Formal Methods as they belong to different subfields within Computer Science." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.65465856"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in topics; lecture focuses on database administration while KU covers formal methods in SE." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.65465856"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, including placeholder topics 1, 2, and 3, which align with the KU's core concepts." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.6484547"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on Database Administration, while the KU covers Software Architecture." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ] ;
    ns1:uetext "Label: Administration des BD Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6IU020" .

ns2:UE_XLG6IU030 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Pragmatics_Language_Pragmatics.txt> ;
            ns1:ku_text """Pages: 144-145 HOURS CS Core = 0 KA Core = 0 FPL-Pragmatics: Language
Pragmatics Non-core: 1\\. Effect of technology needs and software requirements
on programming language development and evolution 2\\. Problem domains and
programming paradigm 3\\. Criteria for good programming language design a.
Principles of language design such as orthogonality b. Defining control and
iteration constructs c. Modularization of large software 4\\. Evaluation order,
precedence, and associativity 5\\. Eager vs delayed evaluation 6\\. Defining
control and iteration constructs 7\\. External calls and system libraries
Illustrative learning outcomes: Non-core: 1\\. Discuss the role of concepts
such as orthogonality and well-chosen defaults in language design. 2\\.
Objectively evaluate and justify language-design decisions. 3\\. Implement an
example program whose result can differ under different rules for evaluation
order, precedence, or associativity. 4\\. Illustrate uses of delayed
evaluation, such as user-defined control abstractions. 5\\. Discuss the need
for allowing calls to external calls and system libraries and the consequences
for language implementation."""^^xsd:string ;
            ns1:score "0.6501822"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the technical aspects of programming language design and evaluation described in the KU." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Pragmatics_Language_Pragmatics" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6454644"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's topics." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.65826815"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on management control, while the KU covers technical computer science topics." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Pragmatics_Language_Pragmatics.txt> ;
            ns1:ku_text """Pages: 144-145 HOURS CS Core = 0 KA Core = 0 FPL-Pragmatics: Language
Pragmatics Non-core: 1\\. Effect of technology needs and software requirements
on programming language development and evolution 2\\. Problem domains and
programming paradigm 3\\. Criteria for good programming language design a.
Principles of language design such as orthogonality b. Defining control and
iteration constructs c. Modularization of large software 4\\. Evaluation order,
precedence, and associativity 5\\. Eager vs delayed evaluation 6\\. Defining
control and iteration constructs 7\\. External calls and system libraries
Illustrative learning outcomes: Non-core: 1\\. Discuss the role of concepts
such as orthogonality and well-chosen defaults in language design. 2\\.
Objectively evaluate and justify language-design decisions. 3\\. Implement an
example program whose result can differ under different rules for evaluation
order, precedence, or associativity. 4\\. Illustrate uses of delayed
evaluation, such as user-defined control abstractions. 5\\. Discuss the need
for allowing calls to external calls and system libraries and the consequences
for language implementation."""^^xsd:string ;
            ns1:score "0.6501822"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers most of the knowledge unit's topics, including language design principles, control and iteration constructs, and evaluation order." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Pragmatics_Language_Pragmatics" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6454644"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applying principles in practical scenarios, and analyzing the importance of this topic in computing, which aligns with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6454644"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in topics: 'Controle de Gestion' focuses on management, while KU covers formal methods in software engineering." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.65826815"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, and platform languages, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.65826815"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods/management, while KU covers technical CS platform programming topics" ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Pragmatics_Language_Pragmatics.txt> ;
            ns1:ku_text """Pages: 144-145 HOURS CS Core = 0 KA Core = 0 FPL-Pragmatics: Language
Pragmatics Non-core: 1\\. Effect of technology needs and software requirements
on programming language development and evolution 2\\. Problem domains and
programming paradigm 3\\. Criteria for good programming language design a.
Principles of language design such as orthogonality b. Defining control and
iteration constructs c. Modularization of large software 4\\. Evaluation order,
precedence, and associativity 5\\. Eager vs delayed evaluation 6\\. Defining
control and iteration constructs 7\\. External calls and system libraries
Illustrative learning outcomes: Non-core: 1\\. Discuss the role of concepts
such as orthogonality and well-chosen defaults in language design. 2\\.
Objectively evaluate and justify language-design decisions. 3\\. Implement an
example program whose result can differ under different rules for evaluation
order, precedence, or associativity. 4\\. Illustrate uses of delayed
evaluation, such as user-defined control abstractions. 5\\. Discuss the need
for allowing calls to external calls and system libraries and the consequences
for language implementation."""^^xsd:string ;
            ns1:score "0.6501822"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on management and teaching methods, not programming language design." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Pragmatics_Language_Pragmatics" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ] ;
    ns1:uetext "Label: Controle de Gestion Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6IU030" .

ns2:UE_XLG6IU060 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Translation_Language_Translation_and_Execution.txt> ;
            ns1:ku_text """Pages: 139-140 HOURS CS Core = 2 KA Core = 3 FPL-Translation: Language
Translation and Execution CS Core: 1\\. Execution models for JIT (Just-In-
Time), compiler, interpreter 2\\. Use of intermediate code, e.g., bytecode 3\\.
Limitations and benefits of JIT, compiler, and interpreter 4\\. Cross
compilers/transpilers 5\\. BNF and extended BNF representation of context-free
grammar 6\\. Parse tree using a simple sentence such as arithmetic expression
or if-then-else statement 7\\. Execution as native code or within a virtual
machine 8\\. Language translation pipeline: syntax analysis, parsing, optional
type-checking, translation/code generation and optimization, linking, loading,
execution KA Core: 9\\. Run-time representation of core language constructs
such as objects (method tables) and functions that can be passed as parameters
to and returned from functions (closures) 10\\. Secure compiler development
(See also: SEC-Foundations, SEC-Coding) Illustrative learning outcomes: CS
Core: 1\\. Explain and understand the differences between compiled, JIT, and
interpreted language implementations, including the benefits and limitations
of each. 2\\. Differentiate syntax and parsing from semantics and evaluation.
3\\. Use BNF and extended BNF to specify the syntax of simple constructs such
as if-then-else, type declaration and iterative constructs for known languages
such as C++ or Python. 4\\. Illustrate the parse tree using a simple
sentence/arithmetic expression. 5\\. Illustrate translation of syntax diagrams
to BNF/extended BNF for simple constructs such as if-thenelse, type
declaration, iterative constructs, etc. 6\\. Illustrate ambiguity in parsing
using nested if-then-else/arithmetic expression and show resolution using
precedence order. KA-Core: 7\\. Discuss the benefits and limitations of garbage
collection, including the notion of reachability."""^^xsd:string ;
            ns1:score "0.6981354"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the majority of the KU's topics, including syntax analysis, parsing, and language translation, with some minor omissions." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Translation_Language_Translation_and_Execution" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.67329824"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on compilation tools/syntax, while KU covers platform constraints/APIs/languages." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.67329824"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the specific topics of mobile programming, scripting languages, web programming, and state maintenance, which are key aspects of the Knowledge Unit." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Design_Design_Principles_of_Programming_Languages.txt> ;
            ns1:ku_text """Pages: 146-147 HOURS CS Core = 0 KA Core = 0 FPL-Design: Design Principles of
Programming Languages Non-core: 1\\. Language design principles a. Simplicity
b. Security (See also: SEC-Coding) c. Fast translation d. Efficient object
code e. Orthogonality f. Readability g. Completeness h. Implementation
strategies 2\\. Designing a language to fit a specific domain or problem 3\\.
Interoperability between programming languages 4\\. Language portability 5\\.
Formal description of a programming language 6\\. Green computing principles
(See also: SEP-Sustainability) Illustrative Learning Outcomes: Non-core: 1\\.
Understand what constitutes good language design and apply that knowledge to
evaluate a real programming language."""^^xsd:string ;
            ns1:score "0.66625035"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on syntax analysis tools and their relation to code, while the KU covers broader design principles and language evaluation." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Design_Design_Principles_of_Programming_Languages" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Translation_Language_Translation_and_Execution.txt> ;
            ns1:ku_text """Pages: 139-140 HOURS CS Core = 2 KA Core = 3 FPL-Translation: Language
Translation and Execution CS Core: 1\\. Execution models for JIT (Just-In-
Time), compiler, interpreter 2\\. Use of intermediate code, e.g., bytecode 3\\.
Limitations and benefits of JIT, compiler, and interpreter 4\\. Cross
compilers/transpilers 5\\. BNF and extended BNF representation of context-free
grammar 6\\. Parse tree using a simple sentence such as arithmetic expression
or if-then-else statement 7\\. Execution as native code or within a virtual
machine 8\\. Language translation pipeline: syntax analysis, parsing, optional
type-checking, translation/code generation and optimization, linking, loading,
execution KA Core: 9\\. Run-time representation of core language constructs
such as objects (method tables) and functions that can be passed as parameters
to and returned from functions (closures) 10\\. Secure compiler development
(See also: SEC-Foundations, SEC-Coding) Illustrative learning outcomes: CS
Core: 1\\. Explain and understand the differences between compiled, JIT, and
interpreted language implementations, including the benefits and limitations
of each. 2\\. Differentiate syntax and parsing from semantics and evaluation.
3\\. Use BNF and extended BNF to specify the syntax of simple constructs such
as if-then-else, type declaration and iterative constructs for known languages
such as C++ or Python. 4\\. Illustrate the parse tree using a simple
sentence/arithmetic expression. 5\\. Illustrate translation of syntax diagrams
to BNF/extended BNF for simple constructs such as if-thenelse, type
declaration, iterative constructs, etc. 6\\. Illustrate ambiguity in parsing
using nested if-then-else/arithmetic expression and show resolution using
precedence order. KA-Core: 7\\. Discuss the benefits and limitations of garbage
collection, including the notion of reachability."""^^xsd:string ;
            ns1:score "0.6981354"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "Covers syntax analysis tools (flex/bison), BNF, and execution models, aligning with core KU topics." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Translation_Language_Translation_and_Execution" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Design_Design_Principles_of_Programming_Languages.txt> ;
            ns1:ku_text """Pages: 146-147 HOURS CS Core = 0 KA Core = 0 FPL-Design: Design Principles of
Programming Languages Non-core: 1\\. Language design principles a. Simplicity
b. Security (See also: SEC-Coding) c. Fast translation d. Efficient object
code e. Orthogonality f. Readability g. Completeness h. Implementation
strategies 2\\. Designing a language to fit a specific domain or problem 3\\.
Interoperability between programming languages 4\\. Language portability 5\\.
Formal description of a programming language 6\\. Green computing principles
(See also: SEP-Sustainability) Illustrative Learning Outcomes: Non-core: 1\\.
Understand what constitutes good language design and apply that knowledge to
evaluate a real programming language."""^^xsd:string ;
            ns1:score "0.66625035"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on syntactic analysis tools and compilation, not on language design principles." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Design_Design_Principles_of_Programming_Languages" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.67329824"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on syntax analysis tools and compilation, not covering the broad development platforms and their constraints." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Translation_Language_Translation_and_Execution.txt> ;
            ns1:ku_text """Pages: 139-140 HOURS CS Core = 2 KA Core = 3 FPL-Translation: Language
Translation and Execution CS Core: 1\\. Execution models for JIT (Just-In-
Time), compiler, interpreter 2\\. Use of intermediate code, e.g., bytecode 3\\.
Limitations and benefits of JIT, compiler, and interpreter 4\\. Cross
compilers/transpilers 5\\. BNF and extended BNF representation of context-free
grammar 6\\. Parse tree using a simple sentence such as arithmetic expression
or if-then-else statement 7\\. Execution as native code or within a virtual
machine 8\\. Language translation pipeline: syntax analysis, parsing, optional
type-checking, translation/code generation and optimization, linking, loading,
execution KA Core: 9\\. Run-time representation of core language constructs
such as objects (method tables) and functions that can be passed as parameters
to and returned from functions (closures) 10\\. Secure compiler development
(See also: SEC-Foundations, SEC-Coding) Illustrative learning outcomes: CS
Core: 1\\. Explain and understand the differences between compiled, JIT, and
interpreted language implementations, including the benefits and limitations
of each. 2\\. Differentiate syntax and parsing from semantics and evaluation.
3\\. Use BNF and extended BNF to specify the syntax of simple constructs such
as if-then-else, type declaration and iterative constructs for known languages
such as C++ or Python. 4\\. Illustrate the parse tree using a simple
sentence/arithmetic expression. 5\\. Illustrate translation of syntax diagrams
to BNF/extended BNF for simple constructs such as if-thenelse, type
declaration, iterative constructs, etc. 6\\. Illustrate ambiguity in parsing
using nested if-then-else/arithmetic expression and show resolution using
precedence order. KA-Core: 7\\. Discuss the benefits and limitations of garbage
collection, including the notion of reachability."""^^xsd:string ;
            ns1:score "0.6981354"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture covers syntax analysis tools and their relation to code, but the KU includes broader topics like execution models, intermediate code, and security, which aren't addressed." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Translation_Language_Translation_and_Execution" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Design_Design_Principles_of_Programming_Languages.txt> ;
            ns1:ku_text """Pages: 146-147 HOURS CS Core = 0 KA Core = 0 FPL-Design: Design Principles of
Programming Languages Non-core: 1\\. Language design principles a. Simplicity
b. Security (See also: SEC-Coding) c. Fast translation d. Efficient object
code e. Orthogonality f. Readability g. Completeness h. Implementation
strategies 2\\. Designing a language to fit a specific domain or problem 3\\.
Interoperability between programming languages 4\\. Language portability 5\\.
Formal description of a programming language 6\\. Green computing principles
(See also: SEP-Sustainability) Illustrative Learning Outcomes: Non-core: 1\\.
Understand what constitutes good language design and apply that knowledge to
evaluate a real programming language."""^^xsd:string ;
            ns1:score "0.66625035"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the topics of language design principles, simplicity, security, and formal description of a programming language, which are a significant subset of the KU." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Design_Design_Principles_of_Programming_Languages" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ] ;
    ns1:uetext """Label: Langage & Compilation Objectif: (résultats d'apprentissage) Course content: - de présenter les outils d'analyses syntaxiques (bison/flex),
- de présenter les liens entre les règles syntaxiques et le code interprété ou compilé Course name: http://example.org/course/UE_XLG6IU060""" .

ns2:UE_XLG6IU080 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6346944"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not SE-Formal Methods content" ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6346944"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of this topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.6349018"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not NLP technical content" ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64391625"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical aspects of the knowledge unit." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64391625"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.6349018"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed NLP topics and specific learning outcomes outlined in the Knowledge Unit." ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6346944"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's content." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.64391625"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods/learning outcomes, not platform-specific programming constraints or languages described in KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Artificial_Intelligence_AI/AI-NLP_Natural_Language_Processing.txt> ;
            ns1:ku_text """Pages:79-80 HOURS CS Core = 0 KA Core = 0 AI-NLP: Natural Language Processing
Non-core: 1\\. Deterministic and stochastic grammars 2\\. Parsing algorithms a.
CFGs and chart parsers (e.g., CYK) b. Probabilistic CFGs and weighted CYK 3\\.
Representing meaning/Semantics a. Logic-based knowledge representations b.
Semantic roles c. Temporal representations d. Beliefs, desires, and intentions
4\\. Corpus-based methods 5\\. N-grams and HMMs 6\\. Smoothing and backoff 7\\.
Examples of use: POS tagging and morphology 8\\. Information retrieval (See
also: DM-Unstructured) a. Vector space model i. TF & IDF b. Precision and
recall 9\\. Information extraction 10\\. Language translation 11\\. Text
classification, categorization a. Bag of words model 12\\. Deep learning for
NLP (See also: AI-ML) a. RNNs b. Transformers c. Multi-modal embeddings (e.g.,
images + text) d. Generative language models Illustrative Learning Outcomes:
1\\. Define and contrast deterministic and stochastic grammars, providing
examples to show the adequacy of each. 2\\. Simulate, apply, or implement
classic and stochastic algorithms for parsing natural language. 3\\. Identify
the challenges of representing meaning. 4\\. List the advantages of using
standard corpora. Identify examples of current corpora for a variety of NLP
tasks. 5\\. Identify techniques for information retrieval, language
translation, and text classification. 6\\. Implement a TF/IDF transform, use it
to extract features from a corpus, and train an off-the-shelf machine learning
algorithm using those features to do text classification."""^^xsd:string ;
            ns1:score "0.6349018"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including deterministic and stochastic grammars, parsing algorithms, and semantic representations, as well as information retrieval, language translation, and text classification." ;
            ns2:ka "Artificial_Intelligence_AI" ;
            ns2:ku "AI-NLP_Natural_Language_Processing" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ] ;
    ns1:uetext "Label: Stage Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6IU080" .

ns2:UE_XLG6IU120 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6684305"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on digitalization teaching methods, not platform-specific programming constraints or languages." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6684305"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers topics such as development platforms, programming languages, and platform constraints, which align with the Knowledge Unit's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6684305"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on digitalization of organizations, while the KU covers technical programming concepts." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.6624794"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers topics related to intellectual property, plagiarism, responsibility, and professional ethics, which align with the KU's learning outcomes." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.6624794"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not substantially cover the knowledge described in the KU." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Augmented_Reality.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-Augmented Reality: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
GIT-Augmented Reality. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.66221225"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on digitalization of organizations, while the KU covers GIT-Augmented Reality, which is not addressed in the lecture." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Augmented_Reality" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Augmented_Reality.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-Augmented Reality: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
GIT-Augmented Reality. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.66221225"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Topics mismatch: Lecture focuses on organizational digitization methods, while KU centers on GIT-Augmented Reality specifics." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Augmented_Reality" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Society_Ethics_and_the_Profession.txt> ;
            ns1:ku_text """Pages : 171 CS Core : None, KA Core : None (Hours here are included in
Society, Ethics and the Profession Area) CS Core: 1\\. Intellectual property
rights of programmers for programs they develop. 2\\. Plagiarism and academic
integrity. 3\\. Responsibility and liability of programmers regarding code they
develop for solutions. (See also: SEC-Foundations) 4\\. Basic professional work
ethics of programmers. Illustrative Learning Outcomes: CS Core: 1\\.
Explain/understand some of the intellectual property issues relating to
programs. 2\\. Explain/understand when code developed by others can be used and
proper ways of disclosing their use. 3\\. Explain/understand the responsibility
of programmers when developing code for an overall solution (which may be
developed by a team). 4\\. Explain/understand one or more codes of conduct
applicable to programmers."""^^xsd:string ;
            ns1:score "0.6624794"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on digitalization methods, not ethics/responsibility topics in KU." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Society_Ethics_and_the_Profession" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Augmented_Reality.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD GIT-Augmented Reality: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
GIT-Augmented Reality. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.66221225"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the course content, including methods of teaching, and the concepts of GIT-Augmented Reality, which align with the Knowledge Unit's objectives and learning outcomes." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Augmented_Reality" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ] ;
    ns1:uetext "Label: Digitalisation des organisations Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6IU120" .

ns2:UE_XLG6IU130 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.665244"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture on back-end web development does not cover the formal methods in software engineering described in the KU." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.665244"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the course content, including key concepts, practical applications, and importance of SE-Formal Methods, which aligns with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.6560925"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the course content of SE-Software Architecture, including key concepts, practical applications, and importance in computing." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.70251536"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture covers back-end web development, which is a subset of the broader knowledge unit." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.6560925"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on back-end web development, which does not substantially cover the software architecture knowledge unit." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.70251536"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on back-end web development, while KU covers broader platforms (mobile, game, etc.) and constraints not explicitly mentioned." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Software_Architecture.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Software Architecture: Core
Concepts CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\.
Placeholder topic 3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder
advanced topic 2 Illustrative Learning Outcomes: 1\\. Explain key concepts of
SE-Software Architecture. 2\\. Apply principles in practical scenarios. 3\\.
Analyze the importance of this topic in computing."""^^xsd:string ;
            ns1:score "0.6560925"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Topics mismatch: backend web vs. software architecture" ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Software_Architecture" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.70251536"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the development of web back-end, which includes overview of development platforms, programming via platform-specific API, and platform languages, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.665244"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "No overlap in topics (backend web vs formal methods)" ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ] ;
    ns1:uetext "Label: Développement Web back-end Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6IU130" .

ns2:UE_XLG6IU140 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> ;
            ns1:ku_text """Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic
Programming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-
LRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See
also: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical
connectives and simpler relations. 4\\. Definitions of Horn clause, facts,
goals and subgoals. 5\\. Unification and unification algorithm; unification vs
assertion vs expression evaluation. 6\\. Mixing relations with functions. (See
also: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-
world vs open-world assumptions. Non-core: 9\\. Memory overhead of variable
copying in handling iterative programs. 10\\. Programming constructs to store
partial computation and pruning search trees. 11\\. Mixing functional
programming and logic programming using concepts such as equational logic,
narrowing, residuation, and semantic unification. (See also: FPL-Functional)
12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-
LRR) 13\\. Integration with other programming paradigms such as object-oriented
programming. 14\\. Advance programming constructs such as difference-lists,
creating user defined data structures, set of, etc. Illustrative learning
outcomes: KA Core: 1\\. Use a logic language to implement a conventional
algorithm. 2\\. Use a logic language to implement an algorithm employing
implicit search using clauses, relations, and cuts. 3\\. Use a simple
illustrative example to show correspondence between First Order Predicate
Logic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to
illustrate the unification algorithm and its role of parameter-passing in
query reduction. 5\\. Use simple logic programs interleaving relations,
functions, and recursive programming such as factorial and Fibonacci numbers
and simple complex relationships between entities and illustrate execution and
parameter-passing using unification and backtracking. Non-core: 6\\. Illustrate
computation of simple programs such as Fibonacci and show overhead of
recomputation, and then show how to improve execution overhead."""^^xsd:string ;
            ns1:score "0.72971845"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers a significant portion of the KU, including topics such as algorithm performance comparison, data structures, and logic programming, which align with the learning outcomes." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Logic_Logic_Programming" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Algorithms.txt> ;
            ns1:ku_text """Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,
AL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.
Some common algorithms (e.g., sorting, searching, tree traversal, graph
traversal) 3\\. Impact of algorithms on time-space efficiency of programs
Illustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms
for writing programs. 2\\. Demonstrate how a problem may be solved by different
algorithms, each with different properties. 3\\. Explain some common algorithms
(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the
impact on space/time performance of some algorithms."""^^xsd:string ;
            ns1:score "0.730652"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers most KU topics except sorting and searching." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Algorithms" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Algorithms.txt> ;
            ns1:ku_text """Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,
AL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.
Some common algorithms (e.g., sorting, searching, tree traversal, graph
traversal) 3\\. Impact of algorithms on time-space efficiency of programs
Illustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms
for writing programs. 2\\. Demonstrate how a problem may be solved by different
algorithms, each with different properties. 3\\. Explain some common algorithms
(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the
impact on space/time performance of some algorithms."""^^xsd:string ;
            ns1:score "0.730652"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "Covers algorithm efficiency comparison, tree/graph algorithms, and space/time impact" ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Algorithms" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Robot_Platforms.txt> ;
            ns1:ku_text """Pages : 242-243 CS Core : None, KA Core : 4 (+6) (Additional hours here are
hours shared with other Areas) KA Core: 1\\. Types of robotic platforms and
devices (See also: AI-Robotics) 2\\. Sensors, embedded computation, and
effectors (actuators) (See also: GIT-Physical) 3\\. Robot-specific languages
and libraries (See also: AI-Robotics) 4\\. Robotic software architecture (e.g.,
using the Robot Operating System (ROS)) 5\\. Robotic platform constraints and
design considerations (See also: AI-Robotics) 6\\. Interconnections with
physical or simulated systems (See also: GIT-Physical, GIT-Simulation) 7\\.
Robotic Algorithms (See also: AI-Robotics, GIT-Animation) a. Forward
kinematics b. Inverse kinematics c. Dynamics d. Navigation and path planning
e. Grasping and manipulation 8\\. Safety and interaction considerations (See
also: SEP-Professional-Ethics, SEP-Context) Illustrative Learning Outcomes: KA
Core: 1\\. Design and implement an application on a given robotic platform. 2\\.
Integrate an Arduino-based robot kit and program it to navigate a maze. 3\\.
Compare robot-specific languages and techniques with those used for general-
purpose software development. 4\\. Explain the rationale behind the design of
the robotic platform and its interconnections with physical or simulated
systems. 5\\. Given a high-level application, design a robot software
architecture using ROS specifying all components and interconnections (ROS
topics) to accomplish that application. 6\\. Discuss the constraints a given
robotic platform imposes on developers."""^^xsd:string ;
            ns1:score "0.72114456"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers topics such as algorithm performance comparison, data structures, and graph algorithms, which are relevant to the KU's robotic software architecture and algorithms." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Robot_Platforms" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Robot_Platforms.txt> ;
            ns1:ku_text """Pages : 242-243 CS Core : None, KA Core : 4 (+6) (Additional hours here are
hours shared with other Areas) KA Core: 1\\. Types of robotic platforms and
devices (See also: AI-Robotics) 2\\. Sensors, embedded computation, and
effectors (actuators) (See also: GIT-Physical) 3\\. Robot-specific languages
and libraries (See also: AI-Robotics) 4\\. Robotic software architecture (e.g.,
using the Robot Operating System (ROS)) 5\\. Robotic platform constraints and
design considerations (See also: AI-Robotics) 6\\. Interconnections with
physical or simulated systems (See also: GIT-Physical, GIT-Simulation) 7\\.
Robotic Algorithms (See also: AI-Robotics, GIT-Animation) a. Forward
kinematics b. Inverse kinematics c. Dynamics d. Navigation and path planning
e. Grasping and manipulation 8\\. Safety and interaction considerations (See
also: SEP-Professional-Ethics, SEP-Context) Illustrative Learning Outcomes: KA
Core: 1\\. Design and implement an application on a given robotic platform. 2\\.
Integrate an Arduino-based robot kit and program it to navigate a maze. 3\\.
Compare robot-specific languages and techniques with those used for general-
purpose software development. 4\\. Explain the rationale behind the design of
the robotic platform and its interconnections with physical or simulated
systems. 5\\. Given a high-level application, design a robot software
architecture using ROS specifying all components and interconnections (ROS
topics) to accomplish that application. 6\\. Discuss the constraints a given
robotic platform imposes on developers."""^^xsd:string ;
            ns1:score "0.72114456"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture focuses on general algorithm analysis and data structures, not covering robotics-specific content like sensors, actuators, ROS, or robotic algorithms." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Robot_Platforms" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> ;
            ns1:ku_text """Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic
Programming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-
LRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See
also: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical
connectives and simpler relations. 4\\. Definitions of Horn clause, facts,
goals and subgoals. 5\\. Unification and unification algorithm; unification vs
assertion vs expression evaluation. 6\\. Mixing relations with functions. (See
also: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-
world vs open-world assumptions. Non-core: 9\\. Memory overhead of variable
copying in handling iterative programs. 10\\. Programming constructs to store
partial computation and pruning search trees. 11\\. Mixing functional
programming and logic programming using concepts such as equational logic,
narrowing, residuation, and semantic unification. (See also: FPL-Functional)
12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-
LRR) 13\\. Integration with other programming paradigms such as object-oriented
programming. 14\\. Advance programming constructs such as difference-lists,
creating user defined data structures, set of, etc. Illustrative learning
outcomes: KA Core: 1\\. Use a logic language to implement a conventional
algorithm. 2\\. Use a logic language to implement an algorithm employing
implicit search using clauses, relations, and cuts. 3\\. Use a simple
illustrative example to show correspondence between First Order Predicate
Logic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to
illustrate the unification algorithm and its role of parameter-passing in
query reduction. 5\\. Use simple logic programs interleaving relations,
functions, and recursive programming such as factorial and Fibonacci numbers
and simple complex relationships between entities and illustrate execution and
parameter-passing using unification and backtracking. Non-core: 6\\. Illustrate
computation of simple programs such as Fibonacci and show overhead of
recomputation, and then show how to improve execution overhead."""^^xsd:string ;
            ns1:score "0.72971845"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on algorithm analysis and data structures, while KU covers logic programming concepts (unification, Horn clauses) not addressed in the course content." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Logic_Logic_Programming" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Development_Fundamentals_SDF/SDF-Algorithms.txt> ;
            ns1:ku_text """Page : 170 CS Core : 6, KA Core : None CS Core: (See also: AL-Foundational,
AL-Complexity) 1\\. Concept of algorithm and notion of algorithm efficiency 2\\.
Some common algorithms (e.g., sorting, searching, tree traversal, graph
traversal) 3\\. Impact of algorithms on time-space efficiency of programs
Illustrative Learning Outcomes: CS Core: 1\\. Explain the role of algorithms
for writing programs. 2\\. Demonstrate how a problem may be solved by different
algorithms, each with different properties. 3\\. Explain some common algorithms
(e.g., sorting, searching, tree traversal, graph traversal). 4\\. Explain the
impact on space/time performance of some algorithms."""^^xsd:string ;
            ns1:score "0.730652"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the objectives of comparing algorithm performances, manipulating data structures, and understanding graph algorithms, which aligns with the KU's learning outcomes." ;
            ns2:ka "Software_Development_Fundamentals_SDF" ;
            ns2:ku "SDF-Algorithms" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Foundations_of_Programming_Languages_FPL/FPL-Logic_Logic_Programming.txt> ;
            ns1:ku_text """Pages: 133 HOURS CS Core = 0 KA Core = 2 + 1 (MSF) FPL-Logic: Logic
Programming KA Core: 1\\. Universal vs existential quantifiers. (See also: AI-
LRR, MSF-Discrete) 2\\. First order predicate logic vs higher order logic. (See
also: AI-LRR, MSF-Discrete) 3\\. Expressing complex relations using logical
connectives and simpler relations. 4\\. Definitions of Horn clause, facts,
goals and subgoals. 5\\. Unification and unification algorithm; unification vs
assertion vs expression evaluation. 6\\. Mixing relations with functions. (See
also: MSF-Discrete) 7\\. Cuts, backtracking, and non-determinism. 8\\. Closed-
world vs open-world assumptions. Non-core: 9\\. Memory overhead of variable
copying in handling iterative programs. 10\\. Programming constructs to store
partial computation and pruning search trees. 11\\. Mixing functional
programming and logic programming using concepts such as equational logic,
narrowing, residuation, and semantic unification. (See also: FPL-Functional)
12\\. Higher-order, constraint, and inductive logic programming. (See also: AI-
LRR) 13\\. Integration with other programming paradigms such as object-oriented
programming. 14\\. Advance programming constructs such as difference-lists,
creating user defined data structures, set of, etc. Illustrative learning
outcomes: KA Core: 1\\. Use a logic language to implement a conventional
algorithm. 2\\. Use a logic language to implement an algorithm employing
implicit search using clauses, relations, and cuts. 3\\. Use a simple
illustrative example to show correspondence between First Order Predicate
Logic (FOPL) and logic programs using Horn clauses. 4\\. Use examples to
illustrate the unification algorithm and its role of parameter-passing in
query reduction. 5\\. Use simple logic programs interleaving relations,
functions, and recursive programming such as factorial and Fibonacci numbers
and simple complex relationships between entities and illustrate execution and
parameter-passing using unification and backtracking. Non-core: 6\\. Illustrate
computation of simple programs such as Fibonacci and show overhead of
recomputation, and then show how to improve execution overhead."""^^xsd:string ;
            ns1:score "0.72971845"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the knowledge unit's topics." ;
            ns2:ka "Foundations_of_Programming_Languages_FPL" ;
            ns2:ku "FPL-Logic_Logic_Programming" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Robot_Platforms.txt> ;
            ns1:ku_text """Pages : 242-243 CS Core : None, KA Core : 4 (+6) (Additional hours here are
hours shared with other Areas) KA Core: 1\\. Types of robotic platforms and
devices (See also: AI-Robotics) 2\\. Sensors, embedded computation, and
effectors (actuators) (See also: GIT-Physical) 3\\. Robot-specific languages
and libraries (See also: AI-Robotics) 4\\. Robotic software architecture (e.g.,
using the Robot Operating System (ROS)) 5\\. Robotic platform constraints and
design considerations (See also: AI-Robotics) 6\\. Interconnections with
physical or simulated systems (See also: GIT-Physical, GIT-Simulation) 7\\.
Robotic Algorithms (See also: AI-Robotics, GIT-Animation) a. Forward
kinematics b. Inverse kinematics c. Dynamics d. Navigation and path planning
e. Grasping and manipulation 8\\. Safety and interaction considerations (See
also: SEP-Professional-Ethics, SEP-Context) Illustrative Learning Outcomes: KA
Core: 1\\. Design and implement an application on a given robotic platform. 2\\.
Integrate an Arduino-based robot kit and program it to navigate a maze. 3\\.
Compare robot-specific languages and techniques with those used for general-
purpose software development. 4\\. Explain the rationale behind the design of
the robotic platform and its interconnections with physical or simulated
systems. 5\\. Given a high-level application, design a robot software
architecture using ROS specifying all components and interconnections (ROS
topics) to accomplish that application. 6\\. Discuss the constraints a given
robotic platform imposes on developers."""^^xsd:string ;
            ns1:score "0.72114456"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on algorithm analysis and data structures, while KU covers robotics-specific topics (ROS, sensors, kinematics) not addressed." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Robot_Platforms" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ] ;
    ns1:uetext """Label: Conception et Analyse d'Algorithmes Objectif: (résultats d'apprentissage) Course content: • soit capable de comparer les performances (temps et mémoire) de deux algorithmes répondant au
même cahier des charges
• sache manipuler et exploiter les structures arborescentes et les tas binaires (parcours, insertion,
suppression)
• sache manipuler et exploiter les graphes et algorithmes de graphes Course name: http://example.org/course/UE_XLG6IU140""" .

ns2:UE_XLG6TU200 ns1:to [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not platform-specific programming or constraints outlined in KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's topics." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical content of the Knowledge Unit." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers 7 out of 8 learning outcomes and 4 out of 5 fundamental concepts, substantially covering the knowledge described in the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical content of the Knowledge Unit." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not SE-Formal Methods content." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's topics." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the specific technical content of the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not platform-specific programming or constraints outlined in KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's topics." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not SE-Formal Methods content." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the specific technical content of the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not graphics/visualization topics in KU" ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not platform-specific programming or constraints outlined in KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical content of the Knowledge Unit." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical content of the Knowledge Unit." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's topics." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the specific technical content of the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not graphics/visualization topics in KU" ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not SE-Formal Methods content." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers 7 out of 8 learning outcomes and 4 out of 5 fundamental concepts, substantially covering the knowledge described in the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers key concepts of SE-Formal Methods, applies principles in practical scenarios, and analyzes the importance of the topic in computing, aligning with the KU's learning outcomes." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not SE-Formal Methods content." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not graphics/visualization topics in KU" ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not graphics/visualization topics in KU" ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not platform-specific programming or constraints outlined in KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the KU's topics." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the specific technical content of the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers 7 out of 8 learning outcomes and 4 out of 5 fundamental concepts, substantially covering the knowledge described in the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Software_Engineering_SE/SE-Formal_Methods.txt> ;
            ns1:ku_text """Pages: TBD HOURS CS Core = TBD KA Core = TBD SE-Formal Methods: Core Concepts
CS Core: 1\\. Placeholder topic 1 2\\. Placeholder topic 2 3\\. Placeholder topic
3 KA Core: 4\\. Placeholder advanced topic 1 5\\. Placeholder advanced topic 2
Illustrative Learning Outcomes: 1\\. Explain key concepts of SE-Formal Methods.
2\\. Apply principles in practical scenarios. 3\\. Analyze the importance of
this topic in computing."""^^xsd:string ;
            ns1:score "0.6385061"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not SE-Formal Methods content." ;
            ns2:ka "Software_Engineering_SE" ;
            ns2:ku "SE-Formal_Methods" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the specific technical content of the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers the overview of development platforms, programming via platform-specific API, platform languages, and programming under platform constraints, which aligns with the KU's content." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "The lecture does not cover the detailed technical content of the Knowledge Unit." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "deepseek-r1-distill-llama-70b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers 7 out of 8 learning outcomes and 4 out of 5 fundamental concepts, substantially covering the knowledge described in the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Specialized_Platform_Development_SPD/SPD-Common_Aspects.txt> ;
            ns1:ku_text """Pages : 240-241 CS Core : 4, KA Core : 2 CS Core: 1\\. Overview of development
platforms (i.e., web, mobile, game, robotics, embedded, and interactive). a.
Input/sensors/control devices/haptic devices b. Resource constraints i.
Computational ii. Data storage iii. Memory iv. Communication c. Requirements -
security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-
Engineering) d. Output/actuators/haptic devices 2\\. Programming via platform-
specific Application Programming Interface (API) vs traditional application
construction 3\\. Overview of platform Languages (e.g., Python, Swift, Lua,
Kotlin) 4\\. Programming under platform constraints and requirements (e.g.,
available development tools, development, security considerations) (See also:
SEC-Foundations) 5\\. Techniques for learning and mastering a platform-specific
programming language Illustrative Learning Outcomes: CS Core: 1\\. List the
constraints of mobile programming. 2\\. List the characteristics of scripting
languages. 3\\. Describe the three-tier model of web programming. 4\\. Describe
how the state is maintained in web programming."""^^xsd:string ;
            ns1:score "0.6470485"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not platform-specific programming or constraints outlined in KU." ;
            ns2:ka "Specialized_Platform_Development_SPD" ;
            ns2:ku "SPD-Common_Aspects" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "1" ;
            ns2:explain "The lecture covers 7 out of 8 learning outcomes and 4 out of 5 fundamental concepts, substantially covering the knowledge described in the KU." ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "llama3-8b-8192" ] ],
        [ ns1:ku_source <file:///Users/rekiknour/Desktop/STAGE/SLM-EXP/data/BodyOfKnowledge/Graphics_and_Interactive_Techniques_GIT/GIT-Fundamentals.txt> ;
            ns1:ku_text """Pages: 150-151 HOURS CS Core = 3 KA Core = 2 GIT-Fundamentals: Fundamental
Concepts CS Core: 1\\. Overview of graphics and visualization. 2\\. Basic
graphics pipeline architecture. 3\\. 2D and 3D transformations. 4\\.
Rasterization and rendering techniques. 5\\. Fundamental shading models. KA
Core: 6\\. Advanced rendering techniques. 7\\. Applications of visualization in
different fields. 8\\. Interaction methods for graphical environments.
Illustrative Learning Outcomes: 1\\. Explain the graphics rendering pipeline.
2\\. Differentiate between rasterization and ray tracing. 3\\. Apply
transformations to 2D and 3D models."""^^xsd:string ;
            ns1:score "0.62958026"^^xsd:float ;
            ns2:answer "0" ;
            ns2:explain "Lecture focuses on teaching methods, not graphics/visualization topics in KU" ;
            ns2:ka "Graphics_and_Interactive_Techniques_GIT" ;
            ns2:ku "GIT-Fundamentals" ;
            ns3:wasGeneratedBy [ ns3:used "qwen-qwq-32b" ] ] ;
    ns1:uetext "Label: Stage libre Objectif: (résultats d'apprentissage) Course content: Méthodes d’enseignement Course name: http://example.org/course/UE_XLG6TU200" .

