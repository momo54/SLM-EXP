[["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Communication__Communication.txt", "Title: SEP-Communication: Communication\n\nKA Core:\n7. Tradeoffs in competing factors that affect communication channels and choices\n8. Communicating to solve problems or make recommendations in the workplace, such as raising\nethical concerns or addressing accessibility issues"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Requirements__Product_Requirements.txt", "Title: SE-Requirements: Product Requirements"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Requirements__Product_Requirements.txt", "KA Core:\n1. Describe functional requirements using, for example, use cases or user stories.\na. Using at least one method of documenting and structuring functional requirements.\nb. Understanding how the method supports design and implementation.\nc. Strengths and weaknesses of using a specific approach.\n2. Properties of requirements including consistency, validity, completeness, and feasibility.\n3. Requirements elicitation.\na. Sources of requirements, for example, users, administrators, or support personnel"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Requirements__Product_Requirements.txt", ".\nb. Methods of requirement gathering, for example, surveys, interviews, or behavioral analysis.\n4. Non-functional requirements, for example, security, usability, or performance, also called as Quality\nAttributes. (See also: SEP-Sustainability)\n5. Risk identification and management, including ethical considerations surrounding the proposed\nproduct. (See also: SEP-Professional-Ethics)\n6. Communicating and/or formalizing requirement specifications."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-History__Computing_History.txt", "Title: SEP-History: Computing History"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-History__Computing_History.txt", "KA Core:\n3. Age I (Pre-digital): Ancient analog computing (Stonehenge, Antikythera mechanism, Salisbury\nCathedral clock, etc.), human-calculated number tables, Euclid, Lovelace, Babbage, G\u00f6del,\nChurch, Turing, pre-electronic (electro-mechanical and mechanical) hardware\n4. Age II (Early modern computing): ENIAC, UNIVAC, Bombes (Bletchley Park and codebreakers),\ncomputer companies (e.g., IBM), mainframes, etc.\n5. Age III (PC era): PCs, modern computer hardware and software, Moore\u2019s Law\n6"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-History__Computing_History.txt", ". Age IV (Internet): Networking, internet architecture, browsers and their evolution, standards, born-\non-the-internet companies, and services (e.g., Google, Amazon, Microsoft, etc.), distributed\ncomputing\n7. Age V (Mobile & Cloud): Mobile computing and smartphones, cloud computing and models thereof\n(e.g., SaaS), remote servers, security and privacy, social media\n8. Age VI (AI): Decision making systems, recommender systems, generative AI and other machine\nlearning driven tools and technologies"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Coding__Secure_Coding.txt", "Title: SEC-Coding: Secure Coding"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Coding__Secure_Coding.txt", "KA Core:\n8. Principles of noninterference and nondeducibility\n9. Preventing information flow attacks\n10. Offensive security techniques as a defense\n11. AI-assisted malware detection techniques\n12. Ransomware: creation, prevention, and mitigation\n13. Secure use of third-party components (See also: SE-Construction, SE-Validation)\n14. Malware: varieties, creation, reverse engineering, and defense against them (See also: FPL-\nSystems, FPL-Translation)\n15"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Coding__Secure_Coding.txt", ". Assurance: testing (including fuzzing and penetration testing), verification, and validation (See also:\nOS-Protection, SDF-Fundamentals, SE-Construction, SE-Validation)\n16. Static and dynamic analyses (See also: FPL-Analysis, MSF-Protection, PDC-Evaluation, SE-\nValidation)\n17. Secure compilers and secure code generation (See also: FPL-Runtime, FPL-Translation)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Logic__Logic_Programming.txt", "Title: FPL-Logic: Logic Programming"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Logic__Logic_Programming.txt", "KA Core:\n1. Use a logic language to implement a conventional algorithm.\n2. Use a logic language to implement an algorithm employing implicit search using clauses, relations,\nand cuts.\n3. Use a simple illustrative example to show correspondence between First Order Predicate Logic\n(FOPL) and logic programs using Horn clauses.\n4. Use examples to illustrate the unification algorithm and its role of parameter-passing in query\nreduction.\n5"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Logic__Logic_Programming.txt", ".\n5. Use simple logic programs interleaving relations, functions, and recursive programming such as\nfactorial and Fibonacci numbers and simple complex relationships between entities and illustrate\nexecution and parameter-passing using unification and backtracking."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-ML__Machine_Learning.txt", "Title: AI-ML: Machine Learning"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-ML__Machine_Learning.txt", "KA Core:\n10. Formulation of simple machine learning as an optimization problem, such as least squares linear\nregression or logistic regression\na. Objective function\nb. Gradient descent\nc. Regularization to avoid overfitting (mathematical formulation)\n11. Ensembles of models\na. Simple weighted majority combination\n12. Deep learning\na. Deep feed-forward networks (intuition only, no mathematics)\nb. Convolutional neural networks (intuition only, no mathematics)\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-ML__Machine_Learning.txt", ". Visualization of learned feature representations from deep nets\nd. Other architectures (generative NN, recurrent NN, transformers, etc.)\n13. Performance evaluation\na. Other metrics for classification (e.g., error, precision, recall)\nb. Performance metrics for regressors\nc. Confusion matrix\nd. Cross-validation\ni. Parameter tuning (grid/random search, via cross-validation)\n14. Overview of reinforcement learning methods\n15. Two or more applications of machine learning algorithms\na. E.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-ML__Machine_Learning.txt", ". E.g., medicine and health, economics, vision, natural language, robotics, game play\n16. Ethics for Machine Learning\na. Continued focus on real data, real scenarios, and case studies (See also: SEP-Context)\nb. Privacy (See also: SEP-Privacy)\nc. Fairness (See also: SEP-Privacy)\nd. Intellectual property\ne. Explainability"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Forensics__Digital_Forensics.txt", "Title: SEC-Forensics: Digital Forensics"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Forensics__Digital_Forensics.txt", "KA Core:\n1. Basic principles and methodologies for digital forensics\n2. System design for forensics\n3. Forensics in different situations: operating systems, file systems, application forensics, web\nforensics, network forensics, mobile device forensics, use of database auditing (See also: NC-\nSecurity)\n4. Attacks on forensics and preventing such attacks\n5. Incident handling processes\n6. Rules of evidence \u2013 general concepts and differences between jurisdictions (See also: SEP-\nSecurity)\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Forensics__Digital_Forensics.txt", ". Legal issues: digital evidence protection and management, chains of custody, reporting, serving as\nan expert witness (See also: SEP-Security)\n262"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SF-Reliability__System_Reliability.txt", "Title: SF-Reliability: System Reliability\n\nKA Core:\n4. Other approaches to reliability (e.g., journaling) (See also: OS-Faults, NC-Reliability, SE-Reliability)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Organization__Functional_Organization.txt", "Title: AR-Organization: Functional Organization\n\nKA Core:\n1. Implementation of simple datapaths, including instruction pipelining, hazard detection, and\nresolution (e.g., stalls, forwarding)\n2. Control unit\na. Hardwired implementation\nb. Microprogrammed realization\n3. Instruction pipelining (See also: SF-Overview)\n4. Introduction to instruction-level parallelism (ILP) (See also: PDC-Programs)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-SEP__Society__Ethics__and_the_Profession.txt", "Title: HCI-SEP: Society, Ethics, and the Profession\n\nKA Core:\n6. Participatory and inclusive design processes\n7. Evaluating the design: Implications and impacts of design: with respect to the environment,\nmaterial, society, security, privacy, ethics, and broader impacts (See also: SEC-Foundations, SEP-\nPrivacy)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Assembly__Assembly_Level_Machine_Organization.txt", "Title: AR-Assembly: Assembly Level Machine Organization"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Assembly__Assembly_Level_Machine_Organization.txt", "KA Core:\n5. Instruction set architecture (ISA) (e.g., x86, ARM and RISC-V)\na. Fixed vs variable-width instruction sets\nb. Instruction formats\nc. Data manipulation, control, I/O\nd. Addressing modes\ne. Machine language programming\nf. Assembly language programming\n6. Subroutine call and return mechanisms (See also: FPL-Translation, OS-Principles)\n7. I/O and interrupts (See also: OS-Principles)\n8. Heap, static, stack, and code segments (See also: FPL-Translation, OS-Process)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Security__Data_Security_and_Privacy.txt", "Title: DM-Security: Data Security and Privacy\n\nKA Core:\n5. Need for, and different approaches to securing data at rest, in transit, and during processing (See\nalso: SEC-Foundations, SEC-Crypto)\n6. Database auditing and its role in digital forensics (See also: SEC-Forensics)\n7. Data inferencing and preventing attacks (See also: SEC-Crypto)\n8. Laws and regulations governing data security and data privacy (See also: SEP-Security, SEP-\nPrivacy, SEC-Foundations, SEC-Governance)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/MSF-Calculus.txt", "Title: MSF-Calculus"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/MSF-Calculus.txt", "KA Core:\n1. Sequences, series, limits\n192\n2. Single-variable derivatives: definition, computation rules (chain rule etc.), derivatives of important\nfunctions, applications\n3. Single-variable integration: definition, computation rules, integrals of important functions,\nfundamental theorem of calculus, definite vs indefinite, applications (including in probability)\n4. Parametric and polar representations\n5. Taylor series\n6"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/MSF-Calculus.txt", ". Taylor series\n6. Multivariate calculus: partial derivatives, gradient, chain-rule, vector valued functions,\n7. Optimization: convexity, global vs local minima, gradient descent, constrained optimization, and\nLagrange multipliers.\n8. Ordinary Differential Equations (ODEs): definition, Euler method, applications to simulation, Monte\nCarlo integration\n9"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/MSF-Calculus.txt", ". CS applications: gradient descent for machine learning, forward and inverse kinematics,\napplications of calculus to probability\nNote: the calculus topics listed above are aligned with computer science goals rather than with\ntraditional calculus courses. For example, multivariate calculus is often a course by itself, but computer\nscience undergraduates only need parts of it for machine learning."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Communication__Communication.txt", "Title: PDC-Communication: Communication"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Communication__Communication.txt", "KA Core:\n5. One or more of the following properties and extensions\na. Topologies: Unicast, Multicast, Mailboxes, Switches; Routing via hardware and software\ninterconnection networks\nb. Media concurrency properties: Ordering, consistency, idempotency, overlapping\ncommunication with computation\nc. Media performance: Latency, bandwidth (throughput) contention (congestion),\nresponsiveness (liveness), reliability (error and drop rates), protocol-based progress (acks,\ntimeouts, mediation)\nd"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Communication__Communication.txt", ". Media security properties: integrity, privacy, authentication, authorization (See also: SEC-\nSecure Coding)\ne. Data formats: Marshaling, validation, encryption, compression\nf. Channel policies: Endpoints, sessions, buffering, saturation response (waiting vs dropping),\nrate control\ng. Multiplexing and demultiplexing many relatively slow I/O devices or parties; completion-\nbased and scheduler-based techniques; async-await, select and polling APIs\nh"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Communication__Communication.txt", ". Formalization and analysis of channel communication; for example, CSP\ni. Applications of queuing theory to model and predict performance.\nj. Memory models: sequential and release/acquire consistency\nk. Memory management; including reclamation of shared data; reference counts and\nalternatives\nl. Bulk data placement and transfer; reducing message traffic and improving locality;\noverlapping data transfer and computation; impact of data layout such as array-of-structs vs\nstruct-of-arrays\nm"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Communication__Communication.txt", ". Emulating shared memory: distributed shared memory, Remote Direct Memory Access\n(RDMA)\nn. Data store consistency: Atomicity, linearizability, transactionality, coherence, causal\nordering, conflict resolution, eventual consistency, blockchains\no. Faults, partitioning, and partial failures; voting; protocols such as Paxos and Raft.\np. Design tradeoffs among consistency, availability, partition (fault) tolerance; impossibility of\nmeeting all at once\nq"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Communication__Communication.txt", ". Security and trust: Byzantine failures, proof of work and alternatives\n221"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/NC-Security__Network_Security.txt", "Title: NC-Security: Network Security"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/NC-Security__Network_Security.txt", "KA Core:\n1. General intro about security (Threats, vulnerabilities, and countermeasures) (See also: SEP-\nSecurity, SEC-Foundations, SEC-Engineering)\n2. Network specific threats and attack types (e.g., denial of service, spoofing, sniffing and traffic\nredirection, attacker-in-the-middle, message integrity attacks, routing attacks, ransomware, and\ntraffic analysis) (See also: SEC-Foundations, SEC-Engineering)\n3. Countermeasures (: SEC-Foundations, SEC-Crypto, SEC-Engineering)\na. Cryptography (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/NC-Security__Network_Security.txt", ". Cryptography (e.g. SSL, TLS, symmetric/asymmetric)\nb. Architectures for secure networks (e.g., secure channels, secure routing protocols, secure\nDNS, VPNs, DMZ, Zero Trust Network Access, hyper network security, anonymous\ncommunication protocols, isolation)\nc. Network monitoring, intrusion detection, firewalls, spoofing and DoS protection, honeypots,\ntracebacks, BGP Sec, RPKI"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/MSF-Linear__Linear_Algebra.txt", "Title: MSF-Linear: Linear Algebra\n\nKA Core:\n2. Matrices, matrix-vector equation, geometric interpretation, geometric transformations with matrices\n3. Solving equations, row-reduction\n4. Linear independence, span, basis\n5. Orthogonality, projection, least-squares, orthogonal bases\n6. Linear combinations of polynomials, Bezier curves\n7. Eigenvectors and eigenvalues\n8. Applications to computer science: Principal Components Analysis (PCA), Singular Value\nDecomposition (SVD), page-rank, graphics"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Crypto__Cryptography.txt", "Title: SEC-Crypto: Cryptography"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Crypto__Cryptography.txt", "KA Core:\n8. Additional mathematics: primality, factoring, and elliptic curve cryptography (See also: MSF-\nDiscrete)\n260\n9. Private-key cryptosystems: substitution-permutation networks, linear cryptanalysis, differential\ncryptanalysis, DES, and AES (See also: MSF-Discrete, NC-Security)\n10. Public-key cryptosystems: Diffie-Hellman and RSA (See also: MSF-Discrete)\n11. Data integrity and authentication: hashing, and digital signatures (See also: MSF-Discrete, DM-\nSecurity)\n12"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Crypto__Cryptography.txt", ". Cryptographic protocols: challenge-response authentication, zero-knowledge protocols,\ncommitment, oblivious transfer, secure two- or multi-party computation, hash functions, secret\nsharing, and applications (See also: MSF-Discrete)\n13. Attacker capabilities: chosen-message attack (for signatures), birthday attacks, side channel\nattacks, and fault injection attacks (See also: NC-Security)\n14. Quantum cryptography; Post Quantum/Quantum resistant cryptography (See also: AL-\nFoundational, MSF-Discrete)\n15"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Crypto__Cryptography.txt", ". Blockchain and cryptocurrencies (See also: MSF-Discrete, PDF-Communication)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Context__Social_Context.txt", "Title: SEP-Context: Social Context"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Context__Social_Context.txt", "KA Core:\n5. Growth and control of the internet, data, computing, and artificial intelligence\n6. Often referred to as the digital divide, differences in access to digital technology resources and its\nresulting ramifications for gender, class, ethnicity, geography, and/or developing countries,\nincluding consideration of responsibility to those who might be less wealthy, under threat, or who\nwould struggle to have their voices heard.\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Context__Social_Context.txt", ".\n7. Accessibility issues, including legal requirements such as Web Content Accessibility Guidelines\n(www.w3.org/TR/WCAG21)\n8. Context-aware computing"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Accessibility__Accessibility_and_Inclusive_Design.txt", "Title: HCI-Accessibility: Accessibility and Inclusive Design"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Accessibility__Accessibility_and_Inclusive_Design.txt", "KA Core:\n6. Background\na. Demographics and populations (permanent, temporary, and situational disability)\nb. International perspectives on disability (See also: SEP-DEIA)\nc. Attitudes towards people with disabilities (See also: SEP-DEIA)\n7. Techniques\na. UX (user experience) design and research\nb. Software engineering practices that enable inclusion and accessibility. (See also: SEP-DEIA)\n8. Technologies\na. Examples of accessibility-enabling features, such as conformance to screen readers\n9"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Accessibility__Accessibility_and_Inclusive_Design.txt", ". Inclusive Design Frameworks\na. Creating inclusive processes such as participatory design\nb. Designing for larger impact"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Physical__Tangible_Physical_Computing.txt", "Title: GIT-Physical: Tangible/Physical Computing"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Physical__Tangible_Physical_Computing.txt", "KA Core:\n1. Interaction with the physical world (See also: SPD-Embedded)\na. Acquisition of data from sensors\nb. Driving external actuators\n2. Connection to physical artifacts\na. Computer-Aided Design (CAD)\nb. Computer-Aided Manufacturing (CAM)\nc. Fabrication (See also: HCI-Design)\ni. Prototyping\nii. Additive (3D printing)\niii. Subtractive (Computer Numerical Control (CNC) milling)\niv. Forming (vacuum forming)\n3. Internet of Things (See also: SPD-Interactive)\na. Network connectivity\nb"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Physical__Tangible_Physical_Computing.txt", ". Network connectivity\nb. Wireless communication"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Privacy__Privacy_and_Civil_Liberties.txt", "Title: SEP-Privacy: Privacy and Civil Liberties"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Privacy__Privacy_and_Civil_Liberties.txt", "KA Core:\n5. Philosophical and legal conceptions of the nature of privacy including the right to privacy\n6. Legal foundations of privacy protection in relevant jurisdictions (e.g., GDPR in the EU)\n7. Privacy legislation in areas of practice (e.g., HIPAA in the US, AI Act in the EU)\n8. Basic Principles of human-subjects research and principles beyond what the law requires (e.g.,\nBelmont Report, UN Universal Declaration on Human Rights and how this relates to technology)\n9"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Privacy__Privacy_and_Civil_Liberties.txt", ". Freedom of expression and its limitations\n10. User-generated content, content moderation, and liability"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/NC-Reliability__Reliability_Support.txt", "Title: NC-Reliability: Reliability Support\n\nKA Core:\n1. Unreliable delivery (e.g., UDP)\n2. Principles of reliability (e.g., delivery without loss, duplication, or out of order) (See also: SF-\nReliability)\n3. Error control (e.g., retransmission, error correction)\n4. Flow control (e.g., stop and wait, window based)\n5. Congestion control (e.g., implicit and explicit congestion notification)\n6. TCP and performance issues (e.g., Tahoe, Reno, Vegas, Cubic)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AL-Foundational__Foundational_Data_Structures_and_Algorithms.txt", "Title: AL-Foundational: Foundational Data Structures and Algorithms\n\nKA Core:\n14. Sorting algorithms\na. O(n log n) complexity heapsort\nb. Pseudo O(n) complexity (e.g., bucket, counting, radix)\n15. Graph algorithms\na. Transitive closure (e.g., Warshall\u2019s)\nb. Topological sort\n16. Matching\na. Efficient string matching (e.g., Boyer-Moore, Knuth-Morris-Pratt)\nb. Longest common subsequence matching\nc. Regular expression matching"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Logic__Digital_Logic_and_Digital_Systems.txt", "Title: AR-Logic: Digital Logic and Digital Systems"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Logic__Digital_Logic_and_Digital_Systems.txt", "KA Core:\n1. Combinational vs sequential logic/field programmable gate arrays (FPGAs) (See also: SF-\nOverview, SF-Foundations, SPD-Embedded)\na. Fundamental combinational\nb. Sequential logic building block\n2. Computer-aided design tools that process hardware and architectural representations\n3. High-level synthesis\na. Register transfer notation\nb. Hardware description language (e.g., Verilog/VHDL/Chisel)\n4. System-on-chip (SoC) design flow\n5. Physical constraints\na. Gate delays\nb. Fan-in and fan-out\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Logic__Digital_Logic_and_Digital_Systems.txt", ". Gate delays\nb. Fan-in and fan-out\nc. Energy/power\nd. Speed of light"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Mobile__Mobile_Platforms.txt", "Title: SPD-Mobile: Mobile Platforms\n\nKA Core:\n1. Development with\na. Mobile programming languages\n303\nb. Mobile programming environments\n2. Mobile platform constraints\na. User interface design (See also: HCI-User)\nb. Security\n3. Access\na. Accessing data through APIs (See also: DM-Querying)\nb. Designing API endpoints for mobile apps: pitfalls and design considerations\nc. Network and web interfaces (See also: NC-Fundamentals, DM-Modeling)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-DEIA__Diversity__Equity__Inclusion__and_Accessibility.txt", "Title: SEP-DEIA: Diversity, Equity, Inclusion, and Accessibility\n\nKA Core:\n7. Experts and their practices that reflect the identities of the classroom and the world through\npractical DEIA principles\n8. Historic marginalization due to systemic social mechanisms, technological supremacy and global\ninfrastructure challenges to diversity, equity, inclusion, and accessibility\n9. Cross-cultural differences in, and needs for, diversity, equity, inclusion, and accessibility\n285"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Virtualization__Virtualization.txt", "Title: OS-Virtualization: Virtualization\n\nKA Core:\n1. Using virtualization and isolation to achieve protection and predictable performance. (See also: SF-\nPerformance)\n2. Advanced paging and virtual memory. (See also: SF-Performance)\n3. Virtual file systems and virtual devices.\n4. Containers and their comparison to virtual machines.\n5. Thrashing (e.g., Popek and Goldberg requirements for recursively virtualizable systems)."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-SEP__Society__Ethics__and_the_Profession.txt", "Title: GIT-SEP: Society, Ethics, and the Profession"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-SEP__Society__Ethics__and_the_Profession.txt", "KA Core:\n1. Accessibility in immersive, interactive, and physical computing applications (See also: SEP-DEIA)\na. Accessible to people with mobility impairments\nb. Accessible to people with vision and/or hearing impairments\n2. Ethics/privacy in graphics applications. (See also: SEP-Privacy, SEP-Professional-Ethics, and\nSEP-Security)\na. Acquisition of private data (room scans, body proportions, active cameras, etc.)\nb. Can\u2019t look away from immersive applications easily\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-SEP__Society__Ethics__and_the_Profession.txt", ". Danger to self/surroundings while immersed\nd. Ethical pitfalls of facial recognition\ne. Misleading visualizations\ni. Due to incorrect data because of exaggeration, hole filling, smoothing, data cleanup, etc.\nii. Even correct data can mislead (e.g., aliasing can cause back moving or stopped fan\nblades)\nf. Privacy regarding health and other personal information\ng. Bias in image processing\ni. Deep fakes\nii. Applications that misidentify people based on skin color or hairstyle\n3"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-SEP__Society__Ethics__and_the_Profession.txt", ". Intellectual Property law as it relates to computer graphics and interactive techniques (See also:\nSEP-IP)\na. images used to train generative AI\nb. images produced by generative AI\n4. Current and past contributors to the field (See also: SEP-DEIA)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/MSF-Statistics__Statistics.txt", "Title: MSF-Statistics: Statistics\n\nKA Core:\n3. Multivariate data: estimation, correlation, regression\n4. Data transformation: dimension reduction, smoothing\n5. Statistical models and algorithms\n6. Hypothesis testing"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-Search__Search.txt", "Title: AI-Search: Search\n\nKA Core:\n5. Bidirectional search\n6. Beam search\n7. Two-player adversarial games\na. Minimax search\nb. Alpha-beta pruning\ni. Ply cutoff\n8. Implementation of A* search\n9. Constraint satisfaction"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Process__Process_Model.txt", "Title: OS-Process: Process Model"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Process__Process_Model.txt", "KA Core:\n1. Processes and threads relative to virtualization protected memory, process state, memory\nisolation, etc.\n2. Memory footprint/segmentation (e.g., stack, heap, etc.) (See also: AR-Assembly)\n3. Creating and loading executables, shared libraries, and dynamic linking (See also: FPL-Translation)\n4. Dispatching and context switching (See also: AR-Assembly)\n5. Interprocess communication (e.g., shared memory, message passing, signals, environment\nvariables) (See also: PDC-Communication)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Internals__DBMS_Internals.txt", "Title: DM-Internals: DBMS Internals\n\nKA Core:\n1. DB Buffer Management (See also: OS-Memory, SF-Resource)\n119\n2. Transaction Management (See also: PDC-Coordination)\na. Isolation Levels\nb. ACID\nc. Serializability\nd. Distributed Transactions\n3. Concurrency Control: (See also: OS-Concurrency)\na. 2-Phase Locking\nb. Deadlocks handling strategies\nc. Quorum-based consistency models\n4. Recovery Manager\na. Relation with Buffer Manager"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Refactoring__Refactoring_and_Code_Evolution.txt", "Title: SE-Refactoring: Refactoring and Code Evolution"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Refactoring__Refactoring_and_Code_Evolution.txt", "KA Core:\n1. Hyrum\u2019s Law/The Law of Implicit Interfaces\n2. Backward compatibility\na. Compatibility is not a property of a single entity, it\u2019s a property of a relationship.\nb. Backward compatibility needs to be evaluated in terms of provider + consumer(s) or with a well-\nspecified model of what forms of compatibility a provider aspires to/promises.\n3. Refactoring\na. Standard refactoring patterns (rename, inline, outline, etc.)\nb. Use of refactoring tools in IDE\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Refactoring__Refactoring_and_Code_Evolution.txt", ".)\nb. Use of refactoring tools in IDE\nc. Application of static-analysis tools (to identify code in need of refactoring, generate changes,\netc.)\nd. Value of refactoring as a remedy for technical debt\n4. Versioning\na. Semantic Versioning (SemVer)\nb. Trunk-based development\nNon-Core:\n5"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Refactoring__Refactoring_and_Code_Evolution.txt", ". Trunk-based development\nNon-Core:\n5. \u201cLarge Scale\u201d Refactoring \u2013 techniques when a refactoring change is too large to commit safely\n(large projects), or when it is impossible to synchronize change between provider + all consumers\n(multiple repositories, consumers with private code).\na. Express both old and new APIs so that they can co-exist.\nb. Minimize the size of behavior changes.\n249\nc. Why these techniques are required, (e.g., \u201cAPI consumers I can see\u201d vs \u201cconsumers I can\u2019t\nsee\u201d)."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Teamwork__Teamwork.txt", "Title: SE-Teamwork: Teamwork\n\nKA Core:\n7. Interfacing with stakeholders, as a team:\na. Management & other non-technical teams\nb. Customers\nc. Users\n8. Risks associated with physical, distributed, hybrid, and virtual teams \u2013 including communication,\nperception, structure, points of failure, mitigation, and recovery, etc."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AL-Complexity__Complexity.txt", "Title: AL-Complexity: Complexity\n\nKA Core:\n6. Little-o, Little-Omega, and Little Theta notations\n7. Formal recursive analysis\n8. Amortized analysis\n9. Turing Machine-based models of complexity\na. Time complexity\ni. P, NP, NP-C, and EXP classes\nii. Cook-Levin theorem\nb. Space Complexity\ni. NSpace and PSpace\nii. Savitch\u2019s theorem"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-KRR__Fundamental_Knowledge_Representation_and_Reasoning.txt", "Title: AI-KRR: Fundamental Knowledge Representation and Reasoning\n\nKA Core:\n4. Random variables and probability distributions\na. Axioms of probability\nb. Probabilistic inference\nc. Bayes\u2019 Rule (derivation)\nd. Bayesian inference (more complex examples)\n5. Independence\n6. Conditional Independence\n7. Markov chains and Markov models\n8. Utility and decision making"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Design__System_Design.txt", "Title: HCI-Design: System Design"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Design__System_Design.txt", "KA Core:\n4. Design patterns and guidelines\na. Software architecture patterns\nb. Cross-platform design\nc. Synchronization considerations\n5. Design processes (See also: SEP-Communication)\na. Participatory design\nb. Co-design\nc. Double-diamond\nd. Convergence and divergence\n6. Interaction techniques (See also: GIT-Interaction)\na. Input and output vectors (e.g., gesture, pose, touch, voice, force)\nb. Graphical user interfaces\nc. Controllers\nd. Haptics\ne. Hardware design\nf. Error handling\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Design__System_Design.txt", ". Haptics\ne. Hardware design\nf. Error handling\n7. Visual UI design (See also: GIT-Visualization)\na. Color\nb. Layout\nc. Gestalt principles"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Foundations__Foundational_Security.txt", "Title: SEC-Foundations: Foundational Security"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Foundations__Foundational_Security.txt", "KA Core:\n8. Access control models (e.g., discretionary, mandatory, role-based, and attribute-based)\n9. Security controls\n10. Concepts of trust and trustworthiness\n11. Applications of a security mindset: web, cloud, and mobile devices (See also: SF-System Design,\nSPD-Common)\n12. Protecting embedded and cyber-physical systems (See also: SPD-Embedded)\n13. Principles of usable security and human-centered computing (See also: HCI-Design, SEP-Security)\n14. Security and trust in AI/machine learning systems, e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Foundations__Foundational_Security.txt", ".g., fit for purpose, ethical operating\nboundaries, authoritative knowledge sources, verified training data, repeatable system evaluation\ntests, system attestation, independent validation/certification; unintended consequences from:\nadverse effect (See also: AI-Introduction, AI-ML, AI-SEP, SEP-Security)\n15. Security risks in building and operating AI/machine learning systems (e.g., algorithm bias,\nknowledge corpus bias, training corpus bias, copyright violation) (See also: AI-Introduction, AI-ML,\nAI-SEP)\n16"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Foundations__Foundational_Security.txt", ". Hardware considerations in security, e.g., principles of secure hardware, secure processor\narchitectures, cryptographic acceleration, compartmentalization, software-hardware interaction (See\nalso: AR-Assembly, AR-Representation, OS-Purpose)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Animation__Computer_Animation.txt", "Title: GIT-Animation: Computer Animation"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Animation__Computer_Animation.txt", "KA Core:\n1. Principles of Animation: Squash and Stretch, Timing, Anticipation, Staging, Follow Through and\nOverlapping Action, Straight Ahead Action, and Pose-to-Pose Action, Slow In and Out, Arcs,\nExaggeration, and Appeal\n2. Types of animation\na. 2- and 3-dimensional animation\nb. Motion graphics\nc. Motion capture\nd. Motion graphics\ne. Stop animation\n3. Key-frame animation\na. Keyframe Interpolation Methods: Lerp/Slerp/Spline\n4. Forward and inverse kinematics (See also: SPD-Robot, AI-Robotics)\n5"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Animation__Computer_Animation.txt", ". Skinning algorithms\na. Capturing\nb. Linear blend, dual quaternion\nc. Rigging\nd. Blend shapes\ne. Pose space deformation\n6. Motion capture\na. Set up and fundamentals\nb. Blending motion capture clips\nc. Blending motion capture and keyframe animation\nd. Ethical considerations (See also: SEP-DEIA, SEP-Privacy)\ni. Avoidance of \u201cdefault\u201d captures - there is no typical human walk cycle.\nii. Accessibility"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Embedded__Embedded_Platforms.txt", "Title: SPD-Embedded: Embedded Platforms"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Embedded__Embedded_Platforms.txt", "KA Core:\n1. Introduction to the unique characteristics of embedded systems\na. Real-time vs soft real-time and non-real-time systems\nb. Resource constraints, such as memory profiles and deadlines (See also: AR-Memory)\n2. API for custom architectures\na. GPU technology (See also: AR-Heterogeneity, GIT-Shading)\nb. Field Programmable Gate Arrays (FPGA) (See also: AR-Logic)\nc. Cross-platform systems\n3. Embedded Systems\na. Microcontrollers\nb. Interrupts and feedback\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Embedded__Embedded_Platforms.txt", ". Microcontrollers\nb. Interrupts and feedback\nc. Interrupt handlers in high-level languages (See also: SF-Overview)\nd. Hard and soft interrupts and trap-exits (See also: OS-Principles)\ne. Interacting with hardware, actuators, and sensors\nf. Energy efficiency\ng. Loosely timed coding and synchronization\nh. Software adapters\n4. Embedded programming\n5. Hard real-time systems vs soft real-time systems (See also: OS-Real-time)\na. Timeliness\nb. Time synchronization/scheduling\n305\nc. Prioritization\nd. Latency\ne"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Embedded__Embedded_Platforms.txt", ". Prioritization\nd. Latency\ne. Compute jitter\n6. Real-time resource management\n7. Memory management\na. Mapping programming construct (variable) to a memory location (See also: AR-Memory)\nb. Shared memory (See also: OS-Memory)\nc. Manual memory management.\nd. Garbage collection (See also: FPL-Translation)\n8. Safety considerations and safety analysis (See also: SEP-Context, SEP-Professional-Ethics)\n9. Sensors and actuators\n10. Analysis and verification\n11. Application design"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Types__Type_Systems.txt", "Title: FPL-Types: Type Systems"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Types__Type_Systems.txt", "KA Core:\n7. Explain how typing rules define the set of operations that are legal for a type.\n8. List the type rules governing the use of a particular compound type.\n9. Explain why undecidability requires type systems to conservatively approximate program behavior.\n10. Define and use program pieces (such as functions, classes, methods) that use generic types,\nincluding for collections.\n11. Discuss the differences among generics, subtyping, and overloading.\n12"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Types__Type_Systems.txt", ".\n12. Explain multiple benefits and limitations of static typing in writing, maintaining, and debugging\nsoftware."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Quantum__Quantum_Architectures.txt", "Title: AR-Quantum: Quantum Architectures"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Quantum__Quantum_Architectures.txt", "KA Core:\n1. Principles (See also: AL-Models: 8)\na. The wave-particle duality principle\nb. The uncertainty principle in the double-slit experiment\nc. What is a Qubit? Superposition, interference, and measurement. Photons as qubits\nd. Systems of two qubits, Entanglement, Bell states, The No-Signaling theorem\n2. Axioms of QM: superposition principle, measurement axiom, unitary evolution\n3. Single qubit gates for the circuit model of quantum computation: X, Z, H\n4"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Quantum__Quantum_Architectures.txt", ". Two qubit gates and tensor products, working with matrices\n5. The No-Cloning Theorem. The Quantum Teleportation protocol\n6. Algorithms (See also: AL-Foundational)\na. Simple quantum algorithms: Bernstein-Vazirani, Simon\u2019s algorithm\nb. Implementing Deutsch-Josza with Mach-Zehnder Interferometers\nc. Quantum factoring (Shor\u2019s Algorithm)\nd. Quantum search (Grover\u2019s Algorithm)\n7. Implementation aspects (See also: SPD-Interactive)\na. The physical implementation of qubits\nb"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Quantum__Quantum_Architectures.txt", ". The physical implementation of qubits\nb. Classical control of a Quantum Processing Unit (QPU)\nc. Error mitigation and control, NISQ and beyond\n108\nd. Measurement approaches\n8. Emerging Applications\na. Post-quantum encryption\nb. The Quantum Internet\nc. Adiabatic quantum computation (AQC) and quantum annealing"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Visualization__Visualization.txt", "Title: GIT-Visualization: Visualization"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Visualization__Visualization.txt", "KA Core:\n1. Scientific Data Visualization and Information Visualization\n2. Visualization techniques\na. Statistical visualization (e.g., scatterplots, bar graphs, histograms, line graphs, pie charts, trees,\nand graphs)\nb. Text visualization\nc. Geospatial visualization\nd. 2D/3D scalar fields\ne. Vector fields\nf. Direct volume rendering\n3. Visualization pipeline\na. Structuring data\nb. Mapping data to visual representations (e.g., scales, grammar of graphics)\nc. View transformations (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Visualization__Visualization.txt", ". View transformations (e.g., pan, zoom, filter, select)\n156\n4. Common data formats (e.g., HDF, netCDF, geotiff, GeoJSON, shape files, raw binary, JSON, CSV,\nplain text)\n5. High-dimensional data handling techniques\na. Statistical (e.g., averaging, clustering, filtering)\nb. Perceptual (e.g., multi-dimensional vis, parallel coordinates, trellis plots)\n6. Perceptual and cognitive foundations that drive visual abstractions.\na. Human optical system\nb. Color theory\nc. Gestalt theories\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Visualization__Visualization.txt", ". Color theory\nc. Gestalt theories\n7. Design and evaluation of visualizations\na. Purpose (e.g., analysis, communication, aesthetics)\nb. Accessibility\nc. Appropriateness of encodings\nd. Misleading visualizations"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/NC-SingleHop__Single_Hop_Communication.txt", "Title: NC-SingleHop: Single Hop Communication\n\nKA Core:\n1. Introduction to modulation, bandwidth, and communication media\n2. Encoding and Framing\n3. Medium Access Control (MAC) (e.g., random access and scheduled access)\n4. Ethernet and WiFi\n5. Switching (e.g., spanning trees, VLANS).\n6. Local Area Network Topologies (e.g., data center, campus networks)."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SF-Performance__System_Performance.txt", "Title: SF-Performance: System Performance\n\nKA Core:\n5. The formula for average memory access time (See also: AR-Memory)\n6. Rationale of virtualization and isolation: protection and predictable performance (See also: OS-\nVirtualization)\n7. Levels of indirection, illustrated by virtual memory for managing physical memory resources (See\nalso: OS-Virtualization)\n8. Methods for implementing virtual memory and virtual machines (See also: OS-Virtualization)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SF-Resource__Resource_Management.txt", "Title: SF-Resource: Resource Management\n\nKA Core:\n3. Advantages and disadvantages of common scheduling algorithms (See also: OS-Scheduling)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Tools__Tools_and_Environments.txt", "Title: SE-Tools: Tools and Environments"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Tools__Tools_and_Environments.txt", "KA Core:\n2. Release management.\n3. Testing tools including static and dynamic analysis tools. (See also: SDF-Practices, SEC-Coding)\n4. Software process automation:\na. Build systems \u2013 the value of fast, hermetic, reproducible builds, compare/contrast approaches\nto building a project.\nb. Continuous Integration (CI) \u2013 the use of automation and automated tests to do preliminary\nvalidation that the current head/trunk revision builds and passes (basic) tests.\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Tools__Tools_and_Environments.txt", ".\nc. Dependency management \u2013 updating external/upstream dependencies, package management,\nSemVer.\n5. Design and communication tools (docs, diagrams, common forms of design diagrams like UML).\n6. Tool integration concepts and mechanisms. (See also: SDF-Practices)\n7. Use of modern IDE facilities \u2013 debugging, refactoring, searching/indexing, ML-powered code\nassistants, etc. (See also: SDF-Practices)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SF-SEP__Society__Ethics__and_the_Profession.txt", "Title: SF-SEP: Society, Ethics, and the Profession\n\nKA Core:\n1. Intellectual property rights of computer systems (See also: SEP-IP)\n2. Common software licenses (See also: SEP-IP)\n3. Computer crimes (See also: SEP-Security)\n297"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-IP__Intellectual_Property.txt", "Title: SEP-IP: Intellectual Property"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-IP__Intellectual_Property.txt", "KA Core:\n6. Philosophical foundations of intellectual property\n277\n7. Forms of intellectual property (e.g., copyrights, patents, trade secrets, trademarks) and the rights\nthey protect\n8. Limitations on copyright protections, including fair use and the first sale doctrine\n9. Intellectual property laws and treaties that impact the enforcement of copyrights\n10"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-IP__Intellectual_Property.txt", ". Software piracy and technical methods for enforcing intellectual property rights, such as digital\nrights management and closed source software as a trade secret\n11. Moral and legal foundations of the open-source movement\n12. Systems that use others\u2019 data (e.g., large language models)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AL-Models__Computational_Models_and_Formal_Languages.txt", "Title: AL-Models: Computational Models and Formal Languages"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AL-Models__Computational_Models_and_Formal_Languages.txt", "KA Core:\n7. Deterministic and nondeterministic automata\n8. Pumping Lemma proofs\na. Proof of Finite State/Regular-Language limitation\nb. Pushdown Automata/Context-Free-Language limitation\n9. Decidability\na. Arithmetization and diagonalization\n10. Reducibility and reductions\n11. Time complexity based on Turing Machine\n12. Space complexity (e.g., Pspace, Savitch\u2019s Theorem)\n13. Equivalent models of algorithmic computation\na. Turing Machines and Variations (e.g., multi-tape, non-deterministic)\nb"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AL-Models__Computational_Models_and_Formal_Languages.txt", ".g., multi-tape, non-deterministic)\nb. Lambda Calculus (See also: FPL-Functional)\nc. Mu-Recursive Functions"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Construction__Software_Construction.txt", "Title: SE-Construction: Software Construction"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Construction__Software_Construction.txt", "KA Core:\n3. Coding style (See also: SDF-Practices)\na. Style guides\nb. Commenting\nc. Naming\n4. \u201cBest Practices\u201d for coding: techniques, idioms/patterns, mechanisms for building quality programs\n(See also: SEC-Coding, SDF-Practices)\na. Defensive coding practices\nb. Secure coding practices and principles\nc. Using exception handling mechanisms to make programs more robust, fault-tolerant\n5. Debugging (See also: SDF-Practices)\n6. Logging\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Construction__Software_Construction.txt", ". Debugging (See also: SDF-Practices)\n6. Logging\n7. Use of libraries and frameworks developed by others (See also: SDF-Practices)\nNon-Core:\n8. Larger-scale testing\na. Test doubles (stubs, mocks, fakes)\nb. Dependency injection\n9. Work sequencing, including dependency identification, milestones, and risk retirement\na. Dependency identification: Identifying the dependencies between different tasks\nb. Milestones: A collection of tasks that serve as a marker of progress when completed"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Construction__Software_Construction.txt", ". Ideally,\nthe milestone encompasses a useful unit of functionality.\nc. Risk retirement: Identifying what elements of a project are risky and prioritizing completing tasks\nthat address those risks.\n10. Potential security problems in programs (See also: SEC-Coding)\n245\na. Buffer and other types of overflows\nb. Race conditions\nc. Improper initialization, including choice of privileges\nd. Input validation\n11. Documentation (autogenerated)\n12. Development context: \u201cgreen field\u201d vs existing code base\na"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Construction__Software_Construction.txt", ". Change impact analysis\nb. Change actualization\n13. Release management\n14. DevOps practices"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Memory__Memory_Management.txt", "Title: OS-Memory: Memory Management"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Memory__Memory_Management.txt", "KA Core:\n1. Review of physical memory, address translation and memory management hardware (See also:\nAR-Memory, MSF-Discrete)\n2. Impact of memory hierarchy including cache concept, cache lookup, and per-CPU caching on\noperating system mechanisms and policy (See also: AR-Memory, SF-Performance)\n210\n3. Logical and physical addressing, address space virtualization (See also: AR-Memory, MSF-\nDiscrete)\n4. Concepts of paging, page replacement, thrashing and allocation of pages and frames\n5"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Memory__Memory_Management.txt", ". Allocation/deallocation/storage techniques (algorithms and data structure) performance and\nflexibility\nExample concept: Arenas, slab allocators, free lists, size classes, heterogeneously sized pages\n(huge pages)\n6. Memory caching and cache coherence and the effect of flushing the cache to avoid speculative\nexecution vulnerabilities (See also: AR-Organization, AR-Memory, SF-Performance)\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Memory__Memory_Management.txt", ". Security mechanisms and concepts in memory management including sandboxing, protection,\nisolation, and relevant vectors of attack (See also: SEC-Foundations)\nNon-Core:\n8. Virtual memory: leveraging virtual memory hardware for OS services and efficiency"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AL-Strategies__Algorithmic_Strategies.txt", "Title: AL-Strategies: Algorithmic Strategies\n\nKA Core:\n4. Paradigms\na. Approximation algorithms\nb. Iterative improvement (e.g., Ford-Fulkerson, simplex)\nc. Randomized/Stochastic algorithms (e.g., max-cut, balls and bins)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-User__Understanding_the_User__Individual_goals_and_interactions_with_others.txt", "Title: HCI-User: Understanding the User: Individual goals and interactions with others"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-User__Understanding_the_User__Individual_goals_and_interactions_with_others.txt", "KA Core:\n2. User-centered design methodology. (See also: SE-Tools)\na. Personas/persona spectrum\nb. User stories/storytelling and techniques for gathering stories\nc. Empathy maps\nd. Needs assessment (techniques for uncovering needs and gathering requirements - e.g.,\ninterviews, surveys, ethnographic and contextual enquiry) (See also: SE-Requirements)\ne. Journey maps\nf. Evaluating the design (See also: HCI-Evaluation)\ng. Interfacing with stakeholders, as a team\nh"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-User__Understanding_the_User__Individual_goals_and_interactions_with_others.txt", ". Interfacing with stakeholders, as a team\nh. Risks associated with physical, distributed, hybrid and virtual teams\n3. Physical and cognitive characteristics of the user\na. Physical capabilities that inform interaction design (e.g., color perception, ergonomics)\n174\nb. Cognitive models that inform interaction design (e.g., attention, perception and recognition,\nmovement, memory)\nc. Topics in social/behavioral psychology (e.g., cognitive biases, change blindness)\n4. Designing for diverse user populations"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-User__Understanding_the_User__Individual_goals_and_interactions_with_others.txt", ". Designing for diverse user populations. (See also: SEP-DEIA, HCI-Accessibility)\na. How differences (e.g., in race, ability, age, gender, culture, experience, and education)\nimpact user experiences and needs\nb. Internationalization\nc. Designing for users from other cultures\nd. Cross-cultural design\ne. Challenges to effective design evaluation. (e.g., sampling, generalization; disability and\ndisabled experiences)\nf. Universal design\n5"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-User__Understanding_the_User__Individual_goals_and_interactions_with_others.txt", ". Universal design\n5. Collaboration and communication (See also: AI-SEP, SE-Teamwork, SEP-Communication, SPD-\nGame)\na. Understanding the user in a multi-user context\nb. Synchronous group communication (e.g., chat rooms, conferencing, online games)\nc. Asynchronous group communication (e.g., email, forums, social networks)\nd. Social media, social computing, and social network analysis\ne. Online collaboration\nf. Social coordination and online communities\ng. Avatars, characters, and virtual worlds"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Design__Software_Design.txt", "Title: SE-Design: Software Design"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Design__Software_Design.txt", "KA Core:\n5. API design principles\na. Consistency\ni. Consistent APIs are easier to learn and less error-prone\nii. Consistency is both internal (between different portions of the API) and external (following\ncommon API patterns)\nb. Composability\nc. Documenting contracts\ni. API operations should describe their effect on the system, but not generally their\nimplementation\nii. Preconditions, postconditions, and invariants\n243\nd. Expandability\ne. Error reporting\ni"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Design__Software_Design.txt", ". Expandability\ne. Error reporting\ni. Errors should be clear, predictable, and actionable\nii. Input that does not match the contract should produce an error\niii. Errors that can be reliably managed without reporting should be managed\n6. Identifying and codifying data invariants and time invariants\n7. Structural and behavioral models of software designs\n8. Data design (See also: DM-Modeling)\na. Data structures\nb. Storage systems\n9. Requirement traceability\na"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Design__Software_Design.txt", ". Storage systems\n9. Requirement traceability\na. Understanding which requirements are satisfied by a design\nNon-Core:\n10. Design modeling, for instance with class diagrams, entity relationship diagrams, or sequence\ndiagrams\n11. Measurement and analysis of design quality\n12. Principles of secure design and coding (See also: SEC-Engineering)\na. Principle of least privilege\nb. Principle of fail-safe defaults\nc. Principle of psychological acceptability\n13. Evaluating design tradeoffs (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Design__Software_Design.txt", ". Evaluating design tradeoffs (e.g., efficiency vs reliability, security vs usability)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Engineering__Security_Analysis__Design__and_Engineering.txt", "Title: SEC-Engineering: Security Analysis, Design, and Engineering"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Engineering__Security_Analysis__Design__and_Engineering.txt", "KA Core:\n261\n5. Security design and engineering, including functional requirements, security subsystems,\ninformation protection, security testing, security assessment, and evaluation (See also: PDC-\nEvaluation, SE-Requirements, SE-Validation)\n6. Security analysis, covering security requirements analysis; security controls analysis; threat\nanalysis; and vulnerability analysis (See also: FPL-Analysis, PDC-Evaluation)\n7. Security attack domains and attack surfaces, e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Engineering__Security_Analysis__Design__and_Engineering.txt", ". Security attack domains and attack surfaces, e.g., communications and networking, hardware,\nphysical, social engineering, software, and supply chain (See also: NC-Security)\n8. Security attack modes, techniques, and tactics, e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Engineering__Security_Analysis__Design__and_Engineering.txt", ".g., authentication abuse; brute force; buffer\nmanipulation; code injection; content insertion; denial of service; eavesdropping; function bypass;\nimpersonation; integrity attack; interception; phishing; protocol analysis; privilege abuse; spoofing;\nand traffic injection (See also: NC-Security, OS-Protection, SE-Validation)\n9. Attestation of software products with respect to their specification and adaptiveness (See also: SE-\nRequirements, SE-Validation)\n10"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Engineering__Security_Analysis__Design__and_Engineering.txt", ". Design and development of cyber-physical systems\n11. Considerations for trustworthy computing, e.g., tamper resistant packaging, trusted boot, trusted\nkernel, hardware root of trust, software signing and verification, hardware-based cryptography,\nvirtualization, and containers (See also: SE-Construction, SE-Validation)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Relational__Relational_Databases.txt", "Title: DM-Relational: Relational Databases\n\nKA Core:\n3. Mapping conceptual schema to a relational schema\n4. Physical database design: file and storage structures (See also: OS-Files)\n5. Introduction to Functional dependency theory\n6. Normalization Theory\na. Decomposition of a schema; lossless-join, and dependency-preservation properties of a\ndecomposition\nb. Normal forms (BCNF)\nc. Denormalization (for efficiency)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Analytics__Data_Analytics.txt", "Title: DM-Analytics: Data Analytics"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Analytics__Data_Analytics.txt", "KA Core:\n1. Exploratory data techniques (motivation, representation, descriptive statistics, visualizations)\n2. Data science lifecycle: business understanding, data understanding, data preparation, modeling,\nevaluation, deployment, and user acceptance (See also: AI-ML)\n121\n3. Data mining and machine learning algorithms: e.g., classification, clustering, association, regression\n(See also: AI-ML)\n4. Data acquisition and governance (See also: SEC-Governance)\n5"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Analytics__Data_Analytics.txt", ". Data security and privacy considerations (See also: SEP-Security, SEP-Privacy, SEC-Foundations)\n6. Data fairness and bias (See also: SEP-Security, AI-SEP)\n7. Data visualization techniques and their use in data analytics (See also: GIT-Visualization)\n8. Entity Resolution"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-OOP__Object-Oriented_Programming.txt", "Title: FPL-OOP: Object-Oriented Programming\n\nKA Core:\n11. Collection classes, iterators, and other common library components.\n12. Metaprogramming and reflection."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Memory__Memory_Hierarchy.txt", "Title: AR-Memory: Memory Hierarchy\n\nKA Core:\n10. Processing In-Memory (PIM)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Ethical-Analysis__Methods_for_Ethical_Analysis.txt", "Title: SEP-Ethical-Analysis: Methods for Ethical Analysis\n\nKA Core:\n5. Professional checklists\n6. Evaluation rubrics\n7. Stakeholder analysis\n8. Standpoint theory\n9. Introduction to ethical frameworks (e.g., consequentialism such as utilitarianism, non-\nconsequentialism such as duty, rights, or justice, agent-centered such as virtue or feminism,\ncontractarianism, ethics of care) and their use for analyzing an ethical dilemma"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AL-SEP__Society__Ethics__and_the_Profession.txt", "Title: AL-SEP: Society, Ethics, and the Profession\n\nKA Core:\n8. Context aware computing"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-NoSQL__NoSQL_Systems.txt", "Title: DM-NoSQL: NoSQL Systems\n\nKA Core:\n1. Why NoSQL? (e.g., Impedance mismatch between Application [CRUD] and RDBMS)\n2. Key-Value and Document data model"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Querying__Query_Construction.txt", "Title: DM-Querying: Query Construction\n\nKA Core:\n2. Relational Algebra\n3. SQL\na. Data definition including integrity and other constraint specifications\nb. Update sublanguage"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Accountability__Accountability_and_Responsibility_in_Design.txt", "Title: HCI-Accountability: Accountability and Responsibility in Design\n\nKA Core:\n4. Value-sensitive design (See also: SEP-Ethical-Analysis, SEP-Context, SEP-Communication)\na. Identify direct and indirect stakeholders\nb. Determine and include diverse stakeholder values and value systems.\n5. Persuasion through design (See also: SEP-Communication)\na. Assess the persuasive content of a design\nb. Employ persuasion as a design goal\nc. Distinguish persuasive interfaces from manipulative interfaces"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Real-time__Real-time_and_Embedded_Systems.txt", "Title: OS-Real-time: Real-time and Embedded Systems\n\nKA Core:\n1. Process and task scheduling.\n2. Deadlines and real-time issues. (See also: SPD-Embedded)\n3. Low-latency vs \u201dsoft real-time\" vs \"hard real time.\" (See also: SPD-Embedded, FPL-Event-Driven)\nNon-Core:\n4. Memory/disk management requirements in a real-time environment.\n5. Failures, risks, and recovery.\n6. Special concerns in real-time systems (safety)."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-Introduction__Fundamental_Issues.txt", "Title: AI-Introduction: Fundamental Issues\n\nKA Core:\n7. Practice identifying problem characteristics in example environments\n8. Additional depth on nature of agents with examples\n9. Additional depth on AI Applications, Growth, and Impact (economic, societal, ethics, security)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Concurrency__Concurrency.txt", "Title: OS-Concurrency: Concurrency"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Concurrency__Concurrency.txt", "KA Core:\n6. Thread creation, states, structures (See also: SF-Foundations)\n7. Thread APIs\n8. Deadlocks and starvation (necessary conditions/mitigations) (See also: PDC-Coordination)\n9. Implementing thread safe code (semaphores, mutex locks, condition variables). (See also: AR-\nPerformance-Energy, SF-Evaluation, PDC-Evaluation)\n10. Race conditions in shared memory (See also: PDC-Coordination)\nNon-Core:\n11. Managing atomic access to OS objects (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Concurrency__Concurrency.txt", ". Managing atomic access to OS objects (e.g., big kernel lock vs many small locks vs lockless data\nstructures like lists)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-SEP__Society__Ethics__and_the_Profession.txt", "Title: OS-SEP: Society, Ethics, and the Profession"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-SEP__Society__Ethics__and_the_Profession.txt", "KA Core:\n1. Open source in operating systems. (See also: SEP-IP)\nExample concepts:\na. Identification of vulnerabilities in open-source kernels,\nb. Open-source guest operating systems,\nc. Open-source host operating systems, and\nd. Changes in monetization (paid vs free upgrades).\n2. End-of-life issues with sunsetting operating systems"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-SEP__Society__Ethics__and_the_Profession.txt", ".\nExample concept: Privacy implications of using proprietary operating systems/operating\nenvironments, including telemetry, automated scanning of personal data, built-in advertising, and\nautomatic cloud integration."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Functional__Functional_Programming.txt", "Title: FPL-Functional: Functional Programming"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Functional__Functional_Programming.txt", "KA Core:\n5. Explain a simple example of lambda expression being implemented using a virtual machine, such\nas a SECD machine, showing storage and reclaim of the environment.\n6. Correctly interpret variables and lexical scope in a program using function closures.\n7. Use functional encapsulation mechanisms such as closures and modular interfaces.\n8. Compare and contrast stateful vs stateless execution.\n9"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Functional__Functional_Programming.txt", ".\n9. Define and use iterators and other operations on aggregates, including operations that take\nfunctions as arguments, in multiple programming languages, selecting the most natural idioms for\neach language. (See also: FPL-OOP)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Evaluation__Evaluation.txt", "Title: PDC-Evaluation: Evaluation"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Evaluation__Evaluation.txt", "KA Core:\n6. One or more of the following methods and tools:\na. Extensions to formal sequential requirements such as linearizability\nb. Protocol, session, and transactional specifications\nc. Use of tools such as Unified Modelling Language (UML), Temporal Logic of Actions (TLA),\nprogram logics\nd"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Evaluation__Evaluation.txt", ". Security analysis: safety and liveness in the presence of hostile or buggy behaviors by other\nparties; required properties of communication mechanisms (for example lack of cross-layer\nleakage), input screening, rate limiting (See also: SEC-Foundations)\ne. Static analysis applied to correctness, throughput, latency, resources, energy (See also:\nSEP-Sustainability)\nf. Directed Acyclic Graph (DAG) model analysis of algorithmic efficiency (work, span, critical\npaths)\ng"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Evaluation__Evaluation.txt", ". Testing and debugging; tools such as race detectors, fuzzers, lock dependency checkers,\nunit/stress/torture tests, visualizations, continuous integration, continuous deployment, and\ntest generators\nh. Measuring and comparing throughput, overhead, waiting, contention, communication, data\nmovement, locality, resource usage, behavior in the presence of excessive numbers of\nevents, clients, or threads (See also: SF-Evaluation)\ni. Application domain specific analyses and evaluation techniques"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Scheduling__Scheduling.txt", "Title: OS-Scheduling: Scheduling"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Scheduling__Scheduling.txt", "KA Core:\n1. Preemptive and non-preemptive scheduling\n2. Schedulers and policies (e.g., first come, first serve, shortest job first, priority, round robin,\nmultilevel) (See also: SF-Resource)\n3. Concepts of Symmetric Multi-Processor (SMP) scheduling and cache coherence (See also: AR-\nMemory)\n4. Timers (e.g., building many timers out of finite hardware timers) (See also: AR-Assembly)\n5. Fairness and starvation\nNon-Core:\n6"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Scheduling__Scheduling.txt", ". Fairness and starvation\nNon-Core:\n6. Subtopics of operating systems such as energy-aware scheduling and real-time scheduling (See\nalso: AR-Performance-Energy, SPD-Embedded, SPD-Mobile)\n7. Cooperative scheduling, such as Linux futexes and userland scheduling."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Governance__Security_Governance.txt", "Title: SEC-Governance: Security Governance"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Governance__Security_Governance.txt", "KA Core:\n1. Protecting critical assets from threats\n2. Security governance: organizational objectives and general risk assessment\n3. Security management: achieve and maintain appropriate levels of confidentiality, integrity,\navailability, accountability, authenticity, and reliability (See also: SE-Validation)\n4. Security policy: organizational policies, issue-specific policies, system-specific policies\n5. Approaches to identifying and mitigating risks to computing infrastructure\n6"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEC-Governance__Security_Governance.txt", ". Data lifecycle management policies: data collection, backups, and retention; cloud storage and\nservices; breach disclosure (See also: DM-Security)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Sustainability__Sustainability.txt", "Title: SEP-Sustainability: Sustainability"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Sustainability__Sustainability.txt", "KA Core:\n4. Systemic effects of complex computing technologies and phenomena (e.g., generative AI, data\ncenters, social media, offshoring, remote work).\n5. Pervasive computing: Information processing that has been integrated into everyday objects and\nactivities, such as smart energy systems, social networking, and feedback systems to promote\nsustainable behavior, transportation, environmental monitoring, citizen science and activism.\n6"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Sustainability__Sustainability.txt", ".\n6. How the sustainability of software systems is interdependent with social systems, including the\nknowledge and skills of its users, organizational processes and policies, and its societal context\n(e.g., market forces, government policies)."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Translation__Language_Translation_and_Execution.txt", "Title: FPL-Translation: Language Translation and Execution\n\nKA Core:\n9. Run-time representation of core language constructs such as objects (method tables) and functions\nthat can be passed as parameters to and returned from functions (closures)\n10. Secure compiler development (See also: SEC-Foundations, SEC-Coding)\nIllustrative learning outcomes:"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/NC-Emerging__Emerging_Topics.txt", "Title: NC-Emerging: Emerging Topics\n\nKA Core:\n1. Middleboxes (e.g., advances in usage of AI, intent-based networking, filtering, deep packet\ninspection, load balancing, NAT, CDN)\n2. Network Virtualization (e.g., SDN, Data Center Networks)\n3. Quantum Networking (e.g., Intro to the domain, teleportation, security, Quantum Internet)\n4. Satellite, mmWave, Visible Light"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Performance-Energy__Performance_and_Energy_Efficiency.txt", "Title: AR-Performance-Energy: Performance and Energy Efficiency"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Performance-Energy__Performance_and_Energy_Efficiency.txt", "KA Core:\n1. Performance-energy evaluation (introduction): performance, power consumption, memory, and\ncommunication costs (See also: SF-Evaluation, OS-Scheduling, SPD-Game)\n2. Branch prediction, speculative execution, out-of-order execution, Tomasulo's algorithm\n3. Enhancements for vector processors and GPUs (See also: SPD-Game)\n4. Hardware support for multithreading (See also: OS-Concurrency, OS-Scheduling, PDC-Programs)\na. Race conditions\nb. Lock implementations\nc. Point-to-point synchronization\nd"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Performance-Energy__Performance_and_Energy_Efficiency.txt", ". Point-to-point synchronization\nd. Barrier implementation\n5. Scalability\n6. Alternative architectures including VLIW/EPIC, accelerators, and other special purpose processors\n7. Dynamic voltage and frequency scaling (DVFS)\n8. Dark Silicon"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Economies__Economies_of_Computing.txt", "Title: SEP-Economies: Economies of Computing"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Economies__Economies_of_Computing.txt", "KA Core:\n1. Economic models: regulated and unregulated, monopolies, network effects, and open market;\nknowledge and attention economies\n2. Pricing and deployment strategies: planned obsolescence, subscriptions, freemium, software\nlicensing, open-source, free software, adware\n3. Impacts of differences in access to computing resources, and the effect of skilled labor supply and\ndemand on the quality of computing products\n4. Automation, AI, and their effects on job markets, developers, and users\n5"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Economies__Economies_of_Computing.txt", ". Ethical concerns surrounding the attention economy and other economies of computing (e.g.\ninformed consent, data collection, use of verbose legalese in user agreements)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/NC-Routing__Routing_and_Forwarding.txt", "Title: NC-Routing: Routing and Forwarding\n\nKA Core:\n1. Routing paradigms and hierarchy (e.g., intra/inter domain, centralized and decentralized, source\nrouting, virtual circuits, QoS)\n2. Forwarding methods (e.g., forwarding tables and matching algorithms)\n3. IP and Scalability issues (e.g., NAT, CIDR, BGP, different versions of IP)\n199"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Web__Web_Platforms.txt", "Title: SPD-Web: Web Platforms\n\nKA Core:\n1. Web programming languages (e.g., HTML5, JavaScript, PHP, CSS)\n2. Web platforms, frameworks, or meta-frameworks\na. Cloud services\nb. API, Web Components\n3. Software as a Service (SaaS)\n4. Web standards such as document object model, accessibility (See also: HCI-Accessibility)\n5. Security and Privacy Considerations (See also: SEP-Security)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Devices__Device_management.txt", "Title: OS-Devices: Device management"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Devices__Device_management.txt", "KA Core:\n1. Buffering strategies (See also: AR-IO)\n2. Direct Memory Access (DMA) and polled I/O, Memory-mapped I/O (See also: AR-IO)\nExample concept: DMA communication protocols (e.g., ring buffers etc.)\n3. Historical and contextual - Persistent storage device management (e.g., magnetic, Solid State\nDevice (SSD)) (See also: SEP-History)\nNon-Core:\n4. Device interface abstractions, hardware abstraction layer\n5. Device driver purpose, abstraction, implementation, and testing challenges\n6"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Devices__Device_management.txt", ". High-level fault tolerance in device communication"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Files__File_Systems_API_and_Implementation.txt", "Title: OS-Files: File Systems API and Implementation"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Files__File_Systems_API_and_Implementation.txt", "KA Core:\n1. Concept of a file including data, metadata, operations, and access-mode\n2. File system mounting\n3. File access control\n4. File sharing\n5. Basic file allocation methods, including linked allocation table\n6. File system structures comprising file allocation including various directory structures and methods\nfor uniquely identifying files (e.g., name, identified or metadata storage location)\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Files__File_Systems_API_and_Implementation.txt", ". Allocation/deallocation/storage techniques (algorithms and data structure) impact on performance\nand flexibility (i.e., internal and external fragmentation and compaction)\n8. Free space management such as using bit tables vs linking\n9. Implementation of directories to segment and track file location"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Modeling__Data_Modeling.txt", "Title: DM-Modeling: Data Modeling\n\nKA Core:\n3. Conceptual models (e.g., entity-relationship, UML diagrams)\n4. Semi-structured data models (expressed using DTD, XML, or JSON Schema, for example)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Simulation__Simulation.txt", "Title: GIT-Simulation: Simulation"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Simulation__Simulation.txt", "KA Core:\n1. Collision detection and response\na. Signed Distance Fields\nb. Sphere/sphere\nc. Triangle/point\nd. Edge/edge\n2. Procedural animation using noise\n3. Particle systems\na. Integration methods (e.g., forward Euler, midpoint, leapfrog)\nb. Mass/spring networks\nc. Position-based dynamics\nd. Rules (e.g., boids, crowds)\ne. Rigid bodies\n4. Grid-based fluids\na. Semi-Lagrangian advection\nb. Pressure projection\n5. Heightfields\na. Terrain: transport, erosion\nb. Water: ripple, shallow water.\n6"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Simulation__Simulation.txt", ". Water: ripple, shallow water.\n6. Rule-based systems (e.g., L-systems, space-colonizing systems, Game of Life)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Core__Core_Database_System_Concepts.txt", "Title: DM-Core: Core Database System Concepts\n\nKA Core:\n12. Systems supporting structured and/or stream content"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SF-Design__System_Design.txt", "Title: SF-Design: System Design\n\nKA Core:\n2. Designs of representative systems (e.g., Apache web server, Spark, and Linux)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Heterogeneity__Heterogeneous_Architectures.txt", "Title: AR-Heterogeneity: Heterogeneous Architectures"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Heterogeneity__Heterogeneous_Architectures.txt", "KA Core:\n1. SIMD and MIMD architectures (e.g., General-Purpose GPUs, TPUs, and NPUs) (See also: PDC-\nPrograms, SPD-Embedded, GIT-Shading, SPD-Game)\n2. Heterogeneous memory systems (See also: OS-Process, PDC-Communication)\na. Shared memory versus distributed memory\nb. Volatile vs non-volatile memory\nc. Coherence protocols\n3. Domain-Specific Architectures (DSAs) (See also: HCI-Accountability, GIT-Shading)\na. Machine Learning Accelerator\nb. In-networking computing (See also: NC-Applications)\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Heterogeneity__Heterogeneous_Architectures.txt", ". Embedded systems for emerging applications\nd. Neuromorphic computing\ne. Edge computing devices\n4. Packaging and integration solutions such as 3DIC and chiplets\n5. Machine learning in architecture design\na. AI algorithms for workload analysis\nb. Optimization of architecture configurations for performance and power efficiency"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Security__Security_Policies__Laws_and_Computer_Crimes.txt", "Title: SEP-Security: Security Policies, Laws and Computer Crimes\n\nKA Core:\n7. Benefits and challenges of existing and proposed computer crime laws\n8. Security policies and the challenges of change and compliance\n9. Responsibility for security throughout the computing life cycle\n10. International and local laws and how they intersect"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Faults__Fault_tolerance.txt", "Title: OS-Faults: Fault tolerance"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Faults__Fault_tolerance.txt", "KA Core:\n1. Reliable and available systems. (See also: SF-Reliability)\n2. Software and hardware approaches to address tolerance (RAID). (See also: SF-Reliability)\nNon-Core:\n3. Spatial and temporal redundancy. (See also: SF-Reliability)\n4. Methods used to implement fault tolerance. (See also: SF-Reliability)\n5. Error identification and correction mechanisms, checksums of volatile memory in RAM. (See also:\nAR-Memory)\n6. File system consistency check and recovery.\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Faults__Fault_tolerance.txt", ". File system consistency check and recovery.\n7. Journaling and log-structured file systems. (See also: SF-Reliability)\n8. Use-cases for fault-tolerance (databases, safety-critical). (See also: SF-Reliability)\n9. Examples of OS mechanisms for detection, recovery, restart to implement fault tolerance, use of\nthese techniques for the OS\u2019s own services. (See also: SF-Reliability)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Programs__Programs.txt", "Title: PDC-Programs: Programs\n\nKA Core:\n3. Write a function that efficiently counts events such as networking packet receptions.\n4. Write a filter/map/reduce program in multiple styles.\n5. Write a service that creates a thread (or other procedural form of activation) to return a requested\nweb page to each new client."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Interaction__Interaction.txt", "Title: GIT-Interaction: Interaction\n\nKA Core:\n1. Event Driven Programming (See also: FPL-Event-Driven)\na. Mouse or touch events\nb. Keyboard events\nc. Voice input\nd. Sensors\ne. Message passing communication\nf. Network events\n2. Graphical User Interface (Single Channel)\na. Window\nb. Icons\nc. Menus\nd. Pointing Devices\n3. Accessibility (See also: SEP-DEIA)\n162"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Event-Driven__Event-Driven_and_Reactive_Programming.txt", "Title: FPL-Event-Driven: Event-Driven and Reactive Programming\n\nKA Core:\n3. Define and use a reactive framework.\n134\n4. Describe an interactive system in terms of a model, a view, and a controller."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Protection__Protection_and_Safety.txt", "Title: OS-Protection: Protection and Safety\n\nKA Core:\n5. Policy/mechanism separation (See also: SEC-Governance)\n6. Security methods and devices (See also: SEC-Foundations)\nExample concepts:\na. Rings of protection (history from Multics to virtualized x86)\nb. x86_64 rings -1 and -2 (hypervisor and ME/PSP)\n7. Protection, access control, and authentication (See also: SEC-Foundations, SEC-Crypto)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Evaluation__Evaluating_the_Design.txt", "Title: HCI-Evaluation: Evaluating the Design"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Evaluation__Evaluating_the_Design.txt", "KA Core:\n2. Methods for evaluation with users (See also: SE-Validation)\na. Qualitative methods (qualitative coding and thematic analysis)\nb. Quantitative methods (statistical tests)\nc. Mixed methods (e.g., observation, think-aloud, interview, survey, experiment)\nd. Presentation requirements (e.g., reports, personas)\ne. User-centered testing\nf. Heuristic evaluation\ng. Challenges and shortcomings to effective evaluation (e.g., sampling, generalization)\n3. Study planning\na. How to set study goals\nb"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Evaluation__Evaluating_the_Design.txt", ". Study planning\na. How to set study goals\nb. Hypothesis design\nc. Approvals from Institutional Research Boards and ethics committees (See also: SEP-Ethical-\nAnalysis, SEP-Security, SEP-Privacy)\nd. How to pre-register a study\ne. Within-subjects vs between-subjects design\n4. Implications and impacts of design with respect to the environment, material, society, security,\nprivacy, ethics, and broader impacts. (See also: SEC-Foundations)\n178\na. The environment\nb. Material\nc. Society\nd. Security\ne. Privacy\nf"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/HCI-Evaluation__Evaluating_the_Design.txt", ". Material\nc. Society\nd. Security\ne. Privacy\nf. Ethics\ng. Broader impacts"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", "Title: SPD-Game: Game Platforms"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", "KA Core:\n1. Historical and contemporary platforms for games (See also: AR-Logic)\na. Evolution of Game Platforms (e.g., Brown Box to Metaverse and beyond; Improvement in\nComputing Architectures (CPU and GPU); Platform Convergence and Mobility)\nb. Typical Game Platforms (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". Typical Game Platforms (e.g., Personal Computer; Home Console; Handheld Console;\nArcade Machine; Interactive Television; Mobile Phone; Tablet; Integrated Head-Mounted\nDisplay; Immersive Installations and Simulators; Internet of Things enabled Devices; CAVE\nSystems; Web Browsers; Cloud-based Streaming Systems)\nc. Characteristics and Constraints of Different Game Platforms (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ".g., Features (local storage,\ninternetworking, peripherals); Run-time performance (GPU/CPU frequency, number of\ncores); Chipsets (physics processing units, vector co-processors); Expansion Bandwidth\n(PCIe); Network throughput (Ethernet); Memory types and capacities (DDR/GDDR);\nMaximum stack depth; Power consumption; Thermal design; Endian)\nd. Typical Sensors, Controllers, and Actuators (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". Typical Sensors, Controllers, and Actuators (e.g., distinctive control system designs \u2013\nperipherals (mouse, keypad, joystick), game controllers, wearables, interactive surfaces;\n306\nelectronics and bespoke hardware; computer vision, inside-out tracking, and outside-in\ntracking; IoT-enabled electronics and I/O (See also: GIT-Interaction)\ne. eSports Ecosystems (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". eSports Ecosystems (e.g., evolution of gameplay across platforms; games and eSports;\ngame events such as LAN/arcade tournaments and international events such as the\nOlympic eSports Series; streamed media and spectatorship; multimedia technologies and\nbroadcast management; professional play; data and machine learning for coaching and\ntraining)\n2. Real-time Simulation and Rendering Systems\na. CPU and GPU architectures (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". CPU and GPU architectures (e.g., Flynn\u2019s taxonomy; parallelization; instruction sets;\nstandard components \u2013 graphics compute array, graphics memory controller, video graphics\narray basic input/output system; bus interface; power management unit; video processing\nunit; display interface) (See also: AR-Heterogeneity)\nb. Pipelines for physical simulations and graphical rendering: (e.g., tile-based, immediate-\nmode). (See also: GIT-Rendering)\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". (See also: GIT-Rendering)\nc. Common Contexts for Algorithms, Data Structures, and Mathematical Functions (e.g., game\nloops; spatial partitioning, viewport culling, and level of detail; collision detection and\nresolution; physical simulation; behavior for intelligent agents; procedural content\ngeneration) (See also: MSF-Discrete, AL-Foundational)\nd. Media representations (e.g., I/O, and computation techniques for virtual worlds: audio;\nmusic; sprites; models and textures; text; dialogue; multimedia (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ".g., olfaction, tactile) (See\nalso: GIT-Fundamentals)\n3. Game Development Tools and Techniques\na. Programming Languages (e.g., C++; C#; Lua; Python; JavaScript)\nb. Shader Languages (e.g., HLSL, GLSL; Shader Graph)\nc. Graphics Libraries and APIs (e.g., DirectX; SDL; OpenGL; Metal; Vulkan; WebGL). (See\nalso: GIT-Rendering, HCI-Design)\nd. Common Development Tools and Environments (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". Common Development Tools and Environments (e.g., IDEs; Debuggers; Profilers; Version\nControl Systems including those handling binary assets; Development Kits and\nProduction/Consumer Kits; Emulators) (See also: SDF-Practices, SE-Tools)\n4. Game Engines\na. Open Game Engines (e.g., Unreal; Unity; Godot; CryEngine; Phyre; Source 2; Pygame and\nRen\u2019Py; Phaser; Twine; Spring RTS)\nb. Techniques (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". Techniques (e.g., Ideation, Prototyping, Iterative Design and Implementation, Compiling\nExecutable Builds, Development Operations and Quality Assurance \u2013 Play Testing and\nTechnical Testing, Profiling; Optimization, Porting; Internationalization and Localization,\nNetworking) (See also: AR-Performance-Energy, SE-Requirements)\n5. Game Design\na. Vocabulary (e.g., game definitions; mechanics-dynamics-aesthetics model; industry\nterminology; experience design; models of experience and emotion)\nb"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". Design Thinking and User-Centered Experience Design (e.g., methods of designing games;\niteration, incrementing, and the double-diamond; phases of pre- and post-production; quality\nassurance, including alpha and beta testing; stakeholder and customer involvement;\ncommunity management) (See also: SE-Design)\n307\nc. Genres (e.g., adventure; walking simulator; first-person shooter; real-time strategy;\nmultiplayer online battle arena (MOBA); role-playing game (rpg))\nd. Audiences and Player Taxonomies (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Game__Game_Platforms.txt", ". Audiences and Player Taxonomies (e.g., people who play games; diversity and broadening\nparticipation; pleasures, player types, and preferences; Bartle, yee) (See also: HCI-User)\ne. Proliferation of digital game technologies to domains beyond entertainment (e.g., Education\nand Training; Serious Games; Virtual Production; eSports; Gamification; Immersive\nExperience Design; Creative Industry Practice; Artistic Practice; Procedural Rhetoric) (See\nalso: AI-SEP)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SEP-Professional-Ethics__Professional_Ethics.txt", "Title: SEP-Professional-Ethics: Professional Ethics\n\nKA Core:\n8. The role of the computing professional and professional societies in public policy\n9. Maintaining awareness of consequences\n10. Ethical dissent and whistleblowing\n11. The relationship between regional culture and ethical dilemmas\n12. Dealing with harassment and discrimination\n13. Forms of professional credentialing\n14. Ergonomics and healthy computing environments\n15. Time-to-market and cost considerations versus quality professional standards"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/NC-Mobility__Mobility.txt", "Title: NC-Mobility: Mobility\n\nKA Core:\n1. Principles of cellular communication (e.g., 4G, 5G)\n2. Principles of Wireless LANs (mainly 802.11)\n3. Device to device communication (e.g., IoT communication)\n4. Multi-hop wireless networks (e.g., ad hoc networks, opportunistic, delay tolerant)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Parallel__Parallel_and_Distributed_Computing.txt", "Title: FPL-Parallel: Parallel and Distributed Computing\n\nKA Core:\n7. Explain how REST API's integrate applications and automate processes.\n8. Explain benefits, constraints and challenges related to distributed and parallel computing."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/MSF-Probability__Probability.txt", "Title: MSF-Probability: Probability\n\nKA Core:\nThe recommended topics are the same between CS core and KA-core, but with far more hours, the\nKA-core can cover these topics in depth and might include more computing-related applications."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-SEP__Society__Ethics__and_the_Profession.txt", "Title: DM-SEP: Society, Ethics, and the Profession\n\nKA Core:\n6. Reliability of data (See also: SEP-Security)\n7. Provenance, data lineage, and metadata management (See also: SEP-Professional-Ethics)\n8. Data security (See also: DM-Security, SEP-Security)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Modeling__Geometric_Modeling.txt", "Title: GIT-Modeling: Geometric Modeling"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Modeling__Geometric_Modeling.txt", "KA Core:\n1. Basic geometric operations such as intersection calculation and proximity tests on 2D objects\n2. Surface representation/model\na. Tessellation\nb. Mesh representation, mesh fairing, and mesh generation techniques such as Delaunay\ntriangulation, and marching cubes/tetrahedrons\nc. Parametric polynomial curves and surfaces\nd. Implicit representation of curves and surfaces\ne. Spatial subdivision techniques\n3. Volumetric representation/model\na. Volumes, voxels, and point-based representations.\nb"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Modeling__Geometric_Modeling.txt", ".\nb. Signed Distance Fields\nc. Sparse Volumes, i.e., VDB\nd. Constructive Solid Geometry (CSG) representation\n4. Procedural representation/model\n158\na. Fractals\nb. L-Systems\n5. Multi-resolution modeling (See also: SPD-Game)\n6. Reconstruction, e.g., 3D scanning, photogrammetry"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Shading__Shading_and_Advanced_Rendering.txt", "Title: GIT-Shading: Shading and Advanced Rendering"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Shading__Shading_and_Advanced_Rendering.txt", "KA Core:\n1. Solutions and approximations to the rendering equation, for example\na. Distribution ray tracing and path tracing\nb. Photon mapping\nc. Bidirectional path tracing\nd. Metropolis light transport\n2. Time (motion blur), lens position (focus), and continuous frequency (color) and their impact on\nrendering\n3. Shadow mapping\n4. Occlusion culling\n5. Bidirectional Scattering Distribution function (BSDF) theory and microfacets\n6. Subsurface scattering\n7. Area light sources\n8"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Shading__Shading_and_Advanced_Rendering.txt", ". Subsurface scattering\n7. Area light sources\n8. Hierarchical depth buffering\n9. Image-based rendering\n10. Non-photorealistic rendering\n11. Realtime rendering\n12. GPU architecture (See also: AR-Heterogeneity)\n13. Human visual systems including adaptation to light, sensitivity to noise, and flicker fusion (See also:\nHCI-Accessibility, SEP-DEIA)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Security__Secure_Processor_Architectures.txt", "Title: AR-Security: Secure Processor Architectures"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Security__Secure_Processor_Architectures.txt", "KA Core:\n1. Discuss principles of secure hardware, exploring a framework for risk analysis and asset protection.\n2. Summarize how Physically Unclonable Functions (PUF) can be a unique device identifier in security\napplications.\n3. Distinguish a random number generator with dedicated hardware support from generators without\nhardware dedicated to generating entropy.\n4. List the advantages and disadvantages of memory protection at the ISA level.\n5"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AR-Security__Secure_Processor_Architectures.txt", ".\n5. Describe key design issues of a trusted execution environment (TEE) to support virtual machines."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Validation__Software_Verification_and_Validation.txt", "Title: SE-Validation: Software Verification and Validation"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Validation__Software_Verification_and_Validation.txt", "KA Core:\n6. Test planning and generation\na. Test case generation, from formal models, specifications, etc.\nb. Test coverage\ni. Test matrices\nii. Code coverage \u2013 how much of the code is tested?\niii. Environment coverage \u2013 how many hardware architectures, operating systems, browsers,\netc. are tested?\nc. Test data and inputs\n7. Test development\na. Test-driven development\nb. Object oriented testing, mocking, and dependency injection\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Validation__Software_Verification_and_Validation.txt", ". Opaque-box (previously, black-box) and transparent-box (previously, white-box) testing\ntechniques\nd. Test tooling, including code coverage, static analysis, and fuzzing\n8. Verification and validation in the development cycle\na. Code reviews\nb. Test automation, including automation of tooling\nc. Pre-commit and post-commit testing\nd. Tradeoffs between test coverage and throughput/latency of testing\ne. Defect tracking and prioritization: reproducibility of reported defects\n9"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Validation__Software_Verification_and_Validation.txt", ". Domain specific verification and validation challenges\na. Performance testing and benchmarking\nb. Asynchrony, parallelism, and concurrency\nc. Safety-critical\nd. Numeric\nNon-Core:\n10. Verification and validation tooling and automation\na. Static analysis\nb. Code coverage\nc. Fuzzing\nd. Dynamic analysis and fault containment (sanitizers, etc.)\ne. Fault logging and fault tracking\n11. Test planning and generation\n247\na. Fault estimation and testing termination including defect seeding\nb"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Validation__Software_Verification_and_Validation.txt", ". Use of random and pseudo random numbers in testing\n12. Performance testing and benchmarking\na. Throughput and latency\nb. Degradation under load (stress testing, FIFO vs LIFO handling of requests)\nc. Speedup and scaling\ni. Amdahl\u2019s law\nii. Gustafson's law\niii. Soft and weak scaling\nd. Identifying and measuring figures of merits\ne. Common performance bottlenecks\ni. Compute-bound\nii. Memory-bandwidth bound\niii. Latency-bound\nf. Statistical methods and best practices for benchmarking\ni"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Validation__Software_Verification_and_Validation.txt", ". Estimation of uncertainty\nii. Confidence intervals\ng. Analysis and presentation (graphs, etc.)\nh. Timing techniques\n13. Testing asynchronous, parallel, and concurrent systems\n14. Verification and validation of non-code artifacts (documentation, training materials)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/GIT-Fundamentals__Fundamental_Concepts.txt", "Title: GIT-Fundamentals: Fundamental Concepts\n\nKA Core:\n10. Applied interactive graphics (e.g., processing, python)\n11. Display characteristics (protocols and ports)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Coordination__Coordination.txt", "Title: PDC-Coordination: Coordination"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Coordination__Coordination.txt", "KA Core:\n4. One or more of the following properties and extensions\na. Progress properties including lock-free, wait-free, fairness, priority scheduling, interactions\nwith consistency, reliability\nb. Performance with respect to contention, granularity, convoying, scaling\nc. Non-blocking data structures and algorithms\nd. Ownership and resource control\ne. Lock variants and alternatives: sequence locks, read-write locks; Read-Copy-Update (RCU),\nreentrancy; tickets; controlling spinning versus blocking\nf"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Coordination__Coordination.txt", ". Transaction-based control: Optimistic and conservative\ng. Distributed locking: reliability\nh. Alternatives to barriers: Clocks; counters, virtual clocks; dataflow and continuations; futures\nand RPC; consensus-based, gathering results with reducers and collectors\ni. Speculation, selection, cancellation; observability and security consequences\nj. Resource control using semaphores and condition variables\nk"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Coordination__Coordination.txt", ". Control flow: Scheduling computations, series-parallel loops with (possibly elected) leaders,\npipelines and streams, nested parallelism\nl. Exceptions and failures. Handlers, detection, timeouts, fault tolerance, voting"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/OS-Advanced-Files__Advanced_File_systems.txt", "Title: OS-Advanced-Files: Advanced File systems\n\nKA Core:\n1. File systems: partitioning, mount/unmount, virtual file systems\n2. In-depth implementation techniques\n3. Memory-mapped files (See also: AR-IO )\n4. Special-purpose file systems\n5. Naming, searching, access, backups\n6. Journaling and log-structured file systems (See also: SF-Reliability)\n212\nNon-Core: (including emerging topics)\n1. Distributed file systems\n2. Encrypted file systems\n3. Fault tolerance"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Algorithms__Algorithms.txt", "Title: PDC-Algorithms: Algorithms"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Algorithms__Algorithms.txt", "KA Core:\n3. One of more of the following algorithmic domains. (See also: AL-Strategies):\na. Linear algebra: Vector and matrix operations, numerical precision/stability, applications in\ndata analytics and machine learning.\nb. Data processing: sorting, searching and retrieval, concurrent data structures.\nc. Graphs, search, and combinatorics: Marking, edge-parallelization, bounding, speculation,\nnetwork-based analytics.\nd"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Algorithms__Algorithms.txt", ".\nd. Modeling and simulation: differential equations; randomization, N-body problems, genetic\nalgorithms.\ne. Computational logic: satisfiability (SAT), concurrent logic programming.\nf. Graphics and computational geometry: Transforms, rendering, ray-tracing.\ng"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/PDC-Algorithms__Algorithms.txt", ".\ng. Resource management: Allocating, placing, recycling and scheduling processors, memory,\nchannels, and hosts; exclusive vs shared resources; static, dynamic and elastic algorithms;\nReal-time constraints; Batching, prioritization, partitioning; decentralization via work-stealing\nand related techniques.\nh. Services: Implementing web APIs, electronic currency, transaction systems, multiplayer\ngames."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SF-Evaluation__Performance_Evaluation.txt", "Title: SF-Evaluation: Performance Evaluation\n\nKA Core:\n7. Analytical tools to guide quantitative evaluation\n8. Understanding layered systems, workloads, and platforms, their implications for performance, and\nthe challenges they represent for evaluation\n9. Microbenchmark pitfalls\n295"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Robot__Robot_Platforms.txt", "Title: SPD-Robot: Robot Platforms"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Robot__Robot_Platforms.txt", "KA Core:\n1. Types of robotic platforms and devices (See also: AI-Robotics)\n2. Sensors, embedded computation, and effectors (actuators) (See also: GIT-Physical)\n3. Robot-specific languages and libraries (See also: AI-Robotics)\n4. Robotic software architecture (e.g., using the Robot Operating System (ROS))\n304\n5. Robotic platform constraints and design considerations (See also: AI-Robotics)\n6. Interconnections with physical or simulated systems (See also: GIT-Physical, GIT-Simulation)\n7"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SPD-Robot__Robot_Platforms.txt", ". Robotic Algorithms (See also: AI-Robotics, GIT-Animation)\na. Forward kinematics\nb. Inverse kinematics\nc. Dynamics\nd. Navigation and path planning\ne. Grasping and manipulation\n8. Safety and interaction considerations (See also: SEP-Professional-Ethics, SEP-Context)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Processing__Query_Processing.txt", "Title: DM-Processing: Query Processing"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Processing__Query_Processing.txt", "KA Core:\n1. Page structures\n2. Index structures\na. B+ trees (See also: AL-Foundational)\n118\nb. Hash indices: static and dynamic (See also: AL-Foundational, SEC-Foundations)\nc. Index creation in SQL\n3. File structures (See also: OS-Files)\na. Heap files\nb. Hash files\n4. Algorithms for query operators\na. External Sorting (See also: AL-Foundational)\nb. Selection\nc. Projection; with and without duplicate elimination\nd. Natural Joins: Nested loop, Sort-merge, Hash join\ne"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/DM-Processing__Query_Processing.txt", ". Analysis of algorithm efficiency (See also: AL-Complexity)\n5. Query transformations\n6. Query optimization\na. Access paths\nb. Query plan construction\nc. Selectivity estimation\nd. Index-only plans\n7. Parallel Query Processing (e.g., parallel scan, parallel join, parallel aggregation) (See also: PDC-\nAlgorithms)\n8. Database tuning/performance\na. Index selection\nb. Impact of indices on query performance (See also: SF-Performance, SEP-Sustainability)\nc. Denormalization"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-SEP__Applications_and_Societal_Impact.txt", "Title: AI-SEP: Applications and Societal Impact"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-SEP__Applications_and_Societal_Impact.txt", "KA Core:\n4. One or more additional applications of AI to a broad set of problems and diverse fields, such as\nmedicine, health, sustainability, social media, economics, education, robotics, etc. (choose a\ndifferent area from that chosen for the CS Core).\na. Formulating and evaluating a specific application as an AI problem\ni. How to deal with underspecified or ill-posed problems\nb. Data availability/scarcity and cleanliness\ni. Basic data cleaning and preprocessing\nii. Data set bias\nc. Algorithmic bias\nd"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-SEP__Applications_and_Societal_Impact.txt", ". Data set bias\nc. Algorithmic bias\nd. Evaluation bias\ne. Assessment of societal implications of the application\n5. Additional depth on deployed deep generative models\na. Introduction to how deep image generative models work, (e.g., as of 2023, DALL-E, Midjourney,\nStable Diffusion) including discussion of attention\nb. Introduction to how large language models work, (e.g., as of 2023, ChatGPT, Bard) including\ndiscussion of attention\nc"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/AI-SEP__Applications_and_Societal_Impact.txt", ". Idea of foundational models, how to use them, and the benefits/issues with training them from\nbig data\n6. Analysis and discussion of the societal impact of AI\na. Ethics (See also: SEP-Context)\nb. Fairness (See also: SEP-Privacy, SEP-DEIA)\nc. Trust/explainability (See also: SEP-Context)\nd. Privacy and usage of training data (See also: SEP-Privacy)\ne. Human autonomy and oversight/regulations/legal requirements (See also: SEP-Context)\nf. Sustainability (See also: SEP-Sustainability)"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Reliability__Software_Reliability.txt", "Title: SE-Reliability: Software Reliability"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Reliability__Software_Reliability.txt", "KA Core:\n1. Concept of reliability as probability of failure or mean time between failures, and faults as cause of\nfailures\n2. Identifying reliability requirements for different kinds of software\n3. Software failures caused by defects/bugs, and so for high reliability the goal is to have minimum\ndefects \u2013 by injecting fewer defects (better training, education, planning), and by removing most of\nthe injected defects (testing, code review, etc.)\n4"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Reliability__Software_Reliability.txt", ".)\n4. Software reliability, system reliability and failure behavior\n5. Defect injection and removal cycle, and different approaches for defect removal\n6. Compare the \u201cerror budget\u201d approach to reliability with the \u201cerror-free\u201d approach and identify\ndomains where each is relevant.\nNon-Core:\n7. Software reliability models\n8. Software fault tolerance techniques and models\na. Contextual differences in fault tolerance (e.g"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Reliability__Software_Reliability.txt", ". Contextual differences in fault tolerance (e.g., crashing a flight critical system is strongly\navoided, crashing a data processing system before corrupt data is written to storage is highly\nvaluable)\n9. Software reliability engineering practices \u2013 including reviews, testing, practical model checking\n10. Identification of dependent and independent failure domains, and their impact on system reliability\n11"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SE-Reliability__Software_Reliability.txt", ". Measurement-based analysis of software reliability \u2013 telemetry, monitoring and alerting,\ndashboards, release qualification metrics, etc.\n250"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Abstraction__Program_Abstraction_and_Representation.txt", "Title: FPL-Abstraction: Program Abstraction and Representation"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Abstraction__Program_Abstraction_and_Representation.txt", "KA Core:\n1. Illustrate the scope of variables and visibility using simple programs.\n2. Illustrate different types of parameter-passing using simple pseudo programming language.\n3. Explain side-effect using global and nonlocal variables and how to fix such programs.\n4. Explain how programs that process other programs treat the other programs as their input data.\n5. Describe a grammar and an abstract syntax tree for a small language.\n6"], ["/home/ilefm/SLM-EXP/data/ka_core_txt/FPL-Abstraction__Program_Abstraction_and_Representation.txt", ".\n6. Describe the benefits of having program representations other than strings of source code.\n7. Implement a program to process some representation of code for some purpose, such as an\ninterpreter, an expression optimizer, or a documentation generator."], ["/home/ilefm/SLM-EXP/data/ka_core_txt/SF-Security__System_Security.txt", "Title: SF-Security: System Security\n\nKA Core:\n3. Representative countermeasure systems\na. Intrusion detection systems, firewalls (See also: NC-Security)\nb. Antivirus systems"]]