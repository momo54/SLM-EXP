[["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Communication__Communication.txt", "Title: SEP-Communication: Communication"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Communication__Communication.txt", "CS Core:\n1. Oral, written, and electronic team and group communication\n2. Technical communication materials (e.g., source code, and documentation, tutorials, reference\nmaterials, API documentation)\n3. Communicating with different stakeholders such as customers, leadership, or the public\n4. Team collaboration (including tools) and conflict resolution\n5. Accessibility and inclusivity requirements for addressing professional audiences\n6"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Communication__Communication.txt", ". Cultural competence in communication including considering the impact of difference in natural\nlanguage"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-History__Computing_History.txt", "Title: SEP-History: Computing History\n\nCS Core:\n1. The history of computing: hardware, software, and human/organizational.\n2. The role of history in the present including within different social contexts, and the relevance of this\nhistory on the future."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Coding__Secure_Coding.txt", "Title: SEC-Coding: Secure Coding"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Coding__Secure_Coding.txt", "CS Core:\n1. Common vulnerabilities and weaknesses\n2. SQL injection and other injection attacks\n3. Cross-site scripting techniques and mitigations\n4. Input validation and data sanitization (See also: OS-Protection, SDF-Fundamentals, SE-Validation)\n5. Type safety and type-safe languages (See also: FPL-Types, FPL-Systems, OS-Protection, SDF-\nFundamentals, SE-Validation)\n6. Buffer overflows, stack smashing, and integer overflows (See also: AR-Assembly, FPL-Systems,\nOS-Protection)\n7"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Coding__Secure_Coding.txt", ". Security issues due to race conditions (See also: FPL-Parallel, PDC-Evaluation)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-ML__Machine_Learning.txt", "Title: AI-ML: Machine Learning"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-ML__Machine_Learning.txt", "CS Core:\n1. Definition and examples of a broad variety of machine learning tasks\na. Supervised learning\ni. Classification\nii. Regression\nb. Reinforcement learning\nc. Unsupervised learning\ni. Clustering\n2. Fundamental ideas:\na. No free lunch theorem: no one learner can solve all problems; representational design decisions\nhave consequences.\nb. Sources of error and undecidability in machine learning\n3. A simple statistical-based supervised learning such as linear regression or decision trees\na"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-ML__Machine_Learning.txt", ". Focus on how they work without going into mathematical or optimization details; enough to\nunderstand and use existing implementations correctly\n4. The overfitting problem/controlling solution complexity (regularization, pruning \u2013 intuition only)\na. The bias (underfitting) \u2013 variance (overfitting) tradeoff\n5. Working with Data\na. Data preprocessing\ni. Importance and pitfalls of preprocessing choices\nb. Handling missing values (imputing, flag-as-missing)\ni. Implications of imputing vs flag-as-missing\nc"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-ML__Machine_Learning.txt", ". Implications of imputing vs flag-as-missing\nc. Encoding categorical variables, encoding real-valued data\nd. Normalization/standardization\ne. Emphasis on real data, not textbook examples\n6. Representations\na. Hypothesis spaces and complexity\nb. Simple basis feature expansion, such as squaring univariate features\nc. Learned feature representations\n7. Machine learning evaluation\na. Separation of train, validation, and test sets\nb. Performance metrics for classifiers\nc"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-ML__Machine_Learning.txt", ". Performance metrics for classifiers\nc. Estimation of test performance on held-out data\nd. Tuning the parameters of a machine learning model with a validation set\ne. Importance of understanding what a model is doing, where its pitfalls/shortcomings are, and the\nimplications of its decisions\n8. Basic neural networks\na. Fundamentals of understanding how neural networks work and their training process, without\ndetails of the calculations\nb. Basic introduction to generative neural networks (e.g"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-ML__Machine_Learning.txt", ".g., large language models)\n9. Ethics for Machine Learning (See also: SEP-Context)\na. Focus on real data, real scenarios, and case studies\nb. Dataset/algorithmic/evaluation bias and unintended consequences\n71"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Reliability__System_Reliability.txt", "Title: SF-Reliability: System Reliability\n\nCS Core:\n1. Distinction between bugs, faults, and failures (See also: PDC-Coordination, SE-Reliability)\n2. Reliability vs availability\n3. Reliability through redundancy\na. check and retry (See also: OS-Faults, NC-Reliability)\nb. redundant encoding (error correction codes, CRC, FEC, RAID) (See also: AR-Memory, NC-\nReliability, DM-Distributed)\nc. duplication/mirroring/replicas (See also: DM-Distributed)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/HCI-SEP__Society__Ethics__and_the_Profession.txt", "Title: HCI-SEP: Society, Ethics, and the Profession\n\nCS Core:\n1. Universal and user-centered design (See also: HCI-User, SEP-DEIA)\n2. Accountability (See also: HCI-Accountability)\n3. Accessibility and inclusive design (See also: SEP-DEIA, SEP-Security)\n4. Evaluating the design (See also: HCI-Evaluation)\n5. System design (See also: HCI-Design)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AR-Assembly__Assembly_Level_Machine_Organization.txt", "Title: AR-Assembly: Assembly Level Machine Organization\n\nCS Core:\n1. von Neumann machine architecture\n2. Control unit: instruction fetch, decode, and execution (See also: OS-Principles)\n3. Introduction to SIMD vs MIMD and the Flynn taxonomy (See also: PDC-Programs, OS-Scheduling,\nOS-Process)\n103\n4. Shared memory multiprocessors/multicore organization (See also: PDC-Programs, OS-Scheduling)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Security__Data_Security_and_Privacy.txt", "Title: DM-Security: Data Security and Privacy"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Security__Data_Security_and_Privacy.txt", "CS Core:\n1. Differences between data security and data privacy (See also: SEC-Foundations)\n2. Protecting data and database systems from attacks, including injection attacks such as SQL\ninjection (See also: SEC-Foundations)\n3. Personally identifying information (PII) and its protection (See also: SEC-Foundations, SEP-\nSecurity, SEP-Privacy)\n4. Ethical considerations in ensuring the security and privacy of data (See also: SEC-SEP, SEP-\nEthical-Analysis, SEP-Security, SEP-Privacy)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Communication__Communication.txt", "Title: PDC-Communication: Communication"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Communication__Communication.txt", "CS Core:\n1. Media\na. Varieties: channels (message passing or I/O), shared memory, heterogeneous, data stores\nb. Reliance on the availability and nature of underlying hardware, connectivity, and protocols;\nlanguage support, emulation (See also: AR-IO)\n2. Channels\na. Explicit (usually named) party-to-party communication media\nb"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Communication__Communication.txt", ". APIs: Sockets, architectural, language-based, and toolkit constructs, such as Message\nPassing Interface (MPI), and layered constructs such as Remote Procedure Call (RPC) (See\nalso: NC-Fundamentals)\nc. I/O channel APIs\n3. Memory\n220\na"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Communication__Communication.txt", ". I/O channel APIs\n3. Memory\n220\na. Shared memory architectures in which parties directly communicate only with memory at\ngiven addresses, with extensions to heterogeneous memory supporting multiple memory\nstores with explicit data transfer across them; for example, GPU local and shared memory,\nDirect Memory Access (DMA)\nb. Memory hierarchies: Multiple layers of sharing domains, scopes, and caches; locality:\nlatency, false-sharing\nc"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Communication__Communication.txt", ". Consistency properties: Bitwise atomicity limits, coherence, local ordering\n4. Data Stores\na. Cooperatively maintained data structures implementing maps and related ADTs\nb. Varieties: Owned, shared, sharded, replicated, immutable, versioned"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/MSF-Linear__Linear_Algebra.txt", "Title: MSF-Linear: Linear Algebra\n\nCS Core:\n1. Vectors: definitions, vector operations, geometric interpretation, angles: Matrices: definition, matrix\noperations, meaning of Ax=b."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Crypto__Cryptography.txt", "Title: SEC-Crypto: Cryptography"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Crypto__Cryptography.txt", "CS Core:\n1. Differences between algorithmic, applied, and mathematical views of cryptography\n2. Mathematical preliminaries: modular arithmetic, Euclidean algorithm, probabilistic independence,\nlinear algebra basics, number theory, finite fields, complexity, asymptotic analysis (See also: MSF-\nDiscrete, MSF-Linear)\n3. Basic cryptography: symmetric key and public key cryptography (See also: AL-Foundational, MSF-\nDiscrete)\n4"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Crypto__Cryptography.txt", ". Basic cryptographic building blocks, including symmetric encryption, asymmetric encryption,\nhashing, and message authentication (See also: MSF-Discrete)\n5. Classical cryptosystems, such as shift, substitution, transposition ciphers, code books, and\nmachines (See also: MSF-Discrete)\n6. Kerckhoff\u2019s principle and use of vetted libraries (See also: SE-Construction)\n7. Usage of cryptography in real-world applications, e.g"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Crypto__Cryptography.txt", ".g., electronic cash, secure channels between\nclients and servers, secure electronic mail, entity authentication, device pairing, steganography, and\nvoting systems (See also: NC-Security, GIT-Image)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Context__Social_Context.txt", "Title: SEP-Context: Social Context"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Context__Social_Context.txt", "CS Core:\n1. Social implications (e.g., political and cultural ideologies) in a hyper-networked world where the\ncapabilities and impact of social media, artificial intelligence, and computing in general are rapidly\nevolving.\n2. Impact of computing applications (e.g., social media, artificial intelligence applications) on individual\nwell-being, and safety of all kinds (e.g., physical, emotional, economic).\n3"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Context__Social_Context.txt", ".g., physical, emotional, economic).\n3. Consequences of involving computing technologies, particularly artificial intelligence, biometric\ntechnologies, and algorithmic decision-making systems, in civic life (e.g., facial recognition\ntechnology, biometric tags, resource distribution algorithms, policing software) and how human\nagency and oversight is crucial.\n273\n4. How deficits in diversity and accessibility in computing affect society and what steps can be taken to\nimprove equity in computing."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/HCI-Accessibility__Accessibility_and_Inclusive_Design.txt", "Title: HCI-Accessibility: Accessibility and Inclusive Design"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/HCI-Accessibility__Accessibility_and_Inclusive_Design.txt", "CS Core:\n1. Background (See also: SEP-DEIA, SEP-Security)\na. Societal and legal support for and obligations to people with disabilities\nb. Accessible design benefits everyone\n2. Techniques\na. Accessibility standards (e.g., Web Content Accessibility Guidelines) (See also: SPD-Web)\n3. Technologies (See also: SE-Tools)\na. Features and products that enable accessibility and support inclusive development by\ndesigners and engineers\n4. IDFs (Inclusive Design Frameworks) (See also: SEP-DEIA)\na"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/HCI-Accessibility__Accessibility_and_Inclusive_Design.txt", ". Recognizing differences\n5. Universal design"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Privacy__Privacy_and_Civil_Liberties.txt", "Title: SEP-Privacy: Privacy and Civil Liberties\n\nCS Core:\n1. Privacy implications of widespread data collection including but not limited to transactional\ndatabases, data warehouses, surveillance systems, cloud computing, and artificial intelligence\n2. Conceptions of anonymity, pseudonymity, and identity\n3. Technology-based solutions for privacy protection (e.g., end-to-end encryption and differential\nprivacy)\n4. Civil liberties, privacy rights, and cultural differences"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-DEIA__Diversity__Equity__Inclusion__and_Accessibility.txt", "Title: SEP-DEIA: Diversity, Equity, Inclusion, and Accessibility"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-DEIA__Diversity__Equity__Inclusion__and_Accessibility.txt", "CS Core:\n1. How identity impacts and is impacted by computing technologies and environments (academic and\nprofessional)\n2. The benefits of diverse development teams and the impacts of teams that are not diverse\n3. Inclusive language and charged terminology, and why their use matters\n4. Inclusive behaviors and why they matter\n5. Designing and developing technology with accessibility in mind\n6"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-DEIA__Diversity__Equity__Inclusion__and_Accessibility.txt", ". How computing professionals can influence and impact diversity, equity, inclusion and accessibility,\nincluding but not only through the software they create"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/MSF-Statistics__Statistics.txt", "Title: MSF-Statistics: Statistics\n\nCS Core:\n1. Basic definitions and concepts: populations, samples, measures of central tendency, variance\n2. Univariate data: point estimation, confidence intervals"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-Search__Search.txt", "Title: AI-Search: Search"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-Search__Search.txt", "CS Core:\n1. State space representation of a problem\na. Specifying states, goals, and operators\nb. Factoring states into representations (hypothesis spaces)\nc. Problem solving by graph search\ni. e.g., Graphs as a space, and tree traversals as exploration of that space\nii. Dynamic construction of the graph (not given upfront)\n2. Uninformed graph search for problem solving (See also: AL-Foundational)\na. Breadth-first search\nb. Depth-first search\ni. With iterative deepening\nc. Uniform cost search\n3"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-Search__Search.txt", ". Uniform cost search\n3. Heuristic graph search for problem solving (See also: AL-Strategies)\na. Heuristic construction and admissibility\nb. Hill-climbing\nc. Local minima and the search landscape\ni. Local vs global solutions\nd. Greedy best-first search\ne. A* search\n68\n4. Space and time complexities of graph search algorithms"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Teamwork__Teamwork.txt", "Title: SE-Teamwork: Teamwork"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Teamwork__Teamwork.txt", "CS Core:\n1. Effective communication, including oral and written, as well as formal (email, docs, comments,\npresentations) and informal (team chat, meetings). (See also: SEP-Communication)\n2. Common causes of team conflict, and approaches for conflict resolution.\n3. Cooperative programming:\na. Pair programming or Swarming\nb. Code review\nc. Collaboration through version control\n4. Roles and responsibilities in a software team: (See also: SEP-Professional-Ethics)\na. Advantages of teamwork\nb"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Teamwork__Teamwork.txt", ". Advantages of teamwork\nb. Risks and complexity of such collaboration\n5. Team processes \u2013 responsibilities for tasks, effort estimation, meeting structure, work schedule\n6. Importance of team diversity and inclusivity. (See also: SEP-Communication)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Complexity__Complexity.txt", "Title: AL-Complexity: Complexity"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Complexity__Complexity.txt", "CS Core:\n1. Complexity Analysis Framework\na. Best, average, and worst-case performance of an algorithm\nb. Empirical and relative (Order of Growth) measurements\nc. Input size and primitive operations\nd. Time and space efficiency\n2. Asymptotic complexity analysis (average and worst-case bounds)\na. Big-O, Big-Omega, and Big-Theta formal notations\nb. Foundational Complexity Classes and Representative Examples/Problems\ni. O(1) Constant (e.g., array access)\nii. O(log n) Logarithmic (e.g., binary search)\n2\niii"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Complexity__Complexity.txt", ". O(log n) Logarithmic (e.g., binary search)\n2\niii. O(n) Linear (e.g., linear search)\niv. O(n log n) Log Linear (e.g., mergesort)\n2\nv. O(n2) Quadratic (e.g., selection sort)\nvi. O(nc) Polynomial (e.g., O(n3) Gaussian elimination)\nvii. O(2n) Exponential (e.g., Knapsack, Satisfiability (SAT),\nTraveling Sales-Person (TSP), all subsets)\nviii. O(n!) Factorial (e.g., Hamiltonian circuit, all permutations)\n3. Empirical measurements of performance\n4. Tractability and intractability\na"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Complexity__Complexity.txt", ". Tractability and intractability\na. P, NP, and NP-Complete Complexity Classes\nb. NP-Complete Problems (e.g., SAT, Knapsack, TSP)\nc. Reductions\n5. Time and space tradeoffs in algorithms\n91"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-KRR__Fundamental_Knowledge_Representation_and_Reasoning.txt", "Title: AI-KRR: Fundamental Knowledge Representation and Reasoning\n\nCS Core:\n1. Types of representations\na. Symbolic, logical\ni. Creating a representation from a natural language problem statement\nb. Learned subsymbolic representations\nc. Graphical models (e.g., naive Bayes, Bayesian network)\n2. Review of probabilistic reasoning, Bayes theorem (See also: MSF-Probability)\n3. Bayesian reasoning\na. Bayesian inference"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/HCI-Design__System_Design.txt", "Title: HCI-Design: System Design\n\nCS Core:\n1. Prototyping techniques and tools\na. Low-fidelity prototyping\nb. Rapid prototyping\nc. Throw-away prototyping\n179\nd. Granularity of prototyping\n2. Design patterns\na. Iterative design\nb. Universal design (See also: SEP-DEIA)\nc. Interaction design (e.g., data-driven design, event-driven design)\n3. Design constraints\na. Platforms (See also: SPD-Game)\nb. Devices\nc. Resources\nd. Balance among usability, security and privacy (See also: SEC-Foundations)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Foundations__Foundational_Security.txt", "Title: SEC-Foundations: Foundational Security"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Foundations__Foundational_Security.txt", "CS Core:\n22\n1. Developing a security mindset incorporating crosscutting concepts: confidentiality, integrity,\n33\navailability, SSrisk assessment, systems thinking, adversarial thinking, human-centered thinking\n2. Basic conceEEpts of authentication and authorization/access control\nCC\n3. Vulnerabilities, threats, attack surfaces, and attack vectors (See also: OS-Protection)\n..\n4. Denial of Service (DoS) and Distributed Denial of Service (DDoS) (See also: OS-Protection)\n((\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Foundations__Foundational_Security.txt", ". Principles aOOnd practices of protection, e.g., least privilege, open design, fail-safe defaults, defense\nin depth, anttd zero trust; and how they can be implemented (See also: OS-Principles, OS-\nhh\nProtection, SE-Construction, SEP-Security)\nee\nrr\nkk 257\nnn\noo\nww\nll\nee\n6. Optimization considerations between security, privacy, performance, and other design goals (See\nalso: SDF-Practices, SE-Validation, HCI-Design)\n7"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Foundations__Foundational_Security.txt", ". Impact of AI on security and privacy: using AI to bolster defenses as well as address increased\nadversarial capabilities due to AI (See also: AI-SEP, HCI-Design, HCI-SEP)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-SEP__Society__Ethics__and_the_Profession.txt", "Title: SEC-SEP: Society, Ethics, and the Profession"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-SEP__Society__Ethics__and_the_Profession.txt", "CS Core:\n1. Principles and practices of privacy (See also: SEP-Security)\n2. Societal impacts on breakdowns in security and privacy (See also: SEP-Context, SEP-Privacy,\nSEP-Security)\n3. Applicability of laws and regulations on security and privacy (See also: SEP-Security)\n4. Professional ethical considerations when designing secure systems and maintaining privacy; ethical\nhacking (See also: SEP-Professional-Ethics, SEP-Privacy, SEP-Security)\nKA-Core:\n258\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-SEP__Society__Ethics__and_the_Profession.txt", ". Security by design (See also: SF-Security, SF-Design)\n6. Privacy by design and privacy engineering (See also: SEP-Privacy, SEP-Security)\n7. Security and privacy implications of malicious AI/machine learning actors, e.g., identifying deep\nfakes (See also: AI-Introduction, AI-ML, SEP-Privacy, SEP-Security)\n8. Societal impacts of Internet of Things (IoT) devices and other emerging technologies on security\nand privacy (See also: SEP-Privacy, SEP-Security)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Types__Type_Systems.txt", "Title: FPL-Types: Type Systems"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Types__Type_Systems.txt", "CS Core:\n1. Describe, for both a primitive and a compound type, the values that have that type.\n137\n2. Describe, for a language with a static type system, the operations that are forbidden statically, such\nas passing the wrong type of value to a function or method.\n3. Describe examples of program errors detected by a type system.\n4. Identify program properties, for multiple programming languages, that are checked statically and\nprogram properties that are checked dynamically.\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Types__Type_Systems.txt", ".\n5. Describe an example program that does not type-check in a particular language and yet would have\nno error if run.\n6. Use types and type-error messages to write and debug programs."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Performance__System_Performance.txt", "Title: SF-Performance: System Performance"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Performance__System_Performance.txt", "CS Core:\n1. Latencies in computer systems\na. Speed of light and computers (one foot per nanosecond vs one GHz clocks) (See also: AR-\nOrganization)\nb. Memory vs disk latencies vs across-the-network memory (See also: AR-Memory, AR-\nPerformance-Energy)\n2. Caches and the effects of spatial and temporal locality on performance in processors and systems\n(See also: AR-Memory, AR-Performance-Energy, OS-Memory)\n3"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Performance__System_Performance.txt", ". Caches and cache coherency in databases, operating systems, distributed systems, and computer\narchitecture (See also: OS-Memory, AR-Memory, DM-Internals)\n4. Introduction to the processor memory hierarchy (See also: AR-Memory, AR-Performance-Energy)\n294"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Resource__Resource_Management.txt", "Title: SF-Resource: Resource Management\n\nCS Core:\n1. Different types of resources (e.g., processor share, memory, disk, net bandwidth) (See also: OS-\nScheduling, OS-Memory, OS-Files, NC-Fundamentals)\n2. Common resource allocation/scheduling algorithms (e.g., first-come-first-serve, priority-based\nscheduling, fair scheduling, and preemptive scheduling) (See also: OS-Scheduling)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Tools__Tools_and_Environments.txt", "Title: SE-Tools: Tools and Environments\n\nCS Core:\n1. Software configuration management and version control: (See also: SDF-Practices)\na. Configuration in version control, reproducible builds/configuration.\nb. Version control branching strategies. Development branches vs release branches. Trunk-based\ndevelopment.\nc. Merging/rebasing strategies, when relevant."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-IP__Intellectual_Property.txt", "Title: SEP-IP: Intellectual Property\n\nCS Core:\n1. Intellectual property rights\n2. Intangible digital intellectual property (IDIP)\n3. Legal foundations for intellectual property protection\n4. Common software licenses (e.g., MIT, GPL and its variants, Apache, Mozilla, Creative Commons)\n5. Plagiarism and authorship"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/NC-Fundamentals__Fundamentals.txt", "Title: NC-Fundamentals: Fundamentals"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/NC-Fundamentals__Fundamentals.txt", "CS Core:\n1. Importance of networking in contemporary computing, and associated challenges. (See also: SEP-\nContext, SEP-Privacy)\n2. Organization of the internet (e.g., users, Internet Service Providers, autonomous systems, content\nproviders, content delivery networks)\n3. Switching techniques (e.g., circuit and packet)\n4. Layers and their roles (application, transport, network, datalink, and physical)\n5. Layering principles (e.g., encapsulation and hourglass model) (See also: SF-Foundations)\n6"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/NC-Fundamentals__Fundamentals.txt", ". Network elements (e.g., routers, switches, hubs, access points, and hosts)\n7. Basic queueing concepts (e.g., relationship with latency, congestion, service levels, etc.)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Systems__Systems_Execution_and_Memory_Model.txt", "Title: FPL-Systems: Systems Execution and Memory Model\n\nCS Core:\n1. Explain how a core language construct, such as data abstractions and control abstractions, is\nexecuted.\n2. Explain how programming language implementations typically organize memory into global data,\ntext, heap, and stack sections and how features such as recursion and memory management map\nto this memory model.\n3. Explain why memory leaks and dangling pointer problems occur, and what can be done by a\nprogrammer to avoid/fix them."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Foundations__Basic_Concepts.txt", "Title: SF-Foundations: Basic Concepts"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Foundations__Basic_Concepts.txt", "CS Core:\n1. Digital vs Analog/Discrete vs Continuous Systems\n2. Simple logic gates, logical expressions, Boolean logic simplification\n3. Clocks, State, Sequencing\n4. State and state transition (e.g., starting state, final state, life cycle of states) (See also: AL-Models)\n5. Finite state machines (e.g., NFA, DFA) (See also: AL-Models)\n6. Combinational Logic, Sequential Logic, Registers, Memories (See also: AR-Logic)\n7"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Foundations__Basic_Concepts.txt", ". Computers and Network Protocols as examples of State Machines (See also: NC-Fundamentals)\n8. Sequential vs parallel processing. (See also: PDC-Programs, OS-Concurrency)\n9. Application-level sequential processing: single thread (See also: PDC-Programs, OS-Concurrency)\n10. Simple application-level parallel processing: request level (web services/client-server/distributed),\nsingle thread per server, multiple threads with multiple servers, pipelining (See also: PDC-\nPrograms, OS-Concurrency)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Models__Computational_Models_and_Formal_Languages.txt", "Title: AL-Models: Computational Models and Formal Languages"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Models__Computational_Models_and_Formal_Languages.txt", "CS Core:\n1. Formal automata\na. Finite State\nb. Pushdown\nc. Linear Bounded\nd. Turing Machine\n2. Formal languages, grammars and Chomsky Hierarchy\n(See also: FPL-Translation, FPL-Syntax)\na. Regular (Type-3)\ni. Regular Expressions\nb. Context-Free (Type-2)\nc. Context-Sensitive (Type-1)\nd. Recursively Enumerable (Type-0)\n3. Relations among formal automata, languages, and grammars\n4. Decidability, (un)computability, and halting\n5. The Church-Turing thesis\n6. Algorithmic correctness\na. Invariants (e.g"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Models__Computational_Models_and_Formal_Languages.txt", ". Algorithmic correctness\na. Invariants (e.g., in iteration, recursion, tree search)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Construction__Software_Construction.txt", "Title: SE-Construction: Software Construction"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Construction__Software_Construction.txt", "CS Core:\n1. Practical small-scale testing (See also: SDF-Practices)\na. Unit testing\nb. Test-driven development \u2013 This is particularly valuable for students psychologically, as it is far\neasier to engage constructively with the challenge of identifying challenging inputs for a given\nAPI (edge cases, corner cases) a priori"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Construction__Software_Construction.txt", ". If they implement first, the instinct is often to avoid\ntrying to crash their new creation, while a test-first approach gives them the intellectual\nsatisfaction of spotting the problem cases and then watching as more tests pass during the\ndevelopment process.\n2. Documentation (See also: SDF-Practices)\na. Interface documentation \u2013 describe interface requirements, potentially including (formal or\ninformal) contracts, pre and post conditions, invariants.\nb"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Construction__Software_Construction.txt", ".\nb. Implementation documentation should focus on tricky and non-obvious pieces of code, whether\nbecause the code is using advanced language features, or the behavior of the code is complex.\n(Do not add comments that re-state common/obvious operations and simple language features.)\ni. Clarify dataflow, computation, etc., focusing on what the code is.\nii. Identify subtle/tricky pieces of code and refactor to be self-explanatory if possible or provide\nappropriate comments to clarify."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Strategies__Algorithmic_Strategies.txt", "Title: AL-Strategies: Algorithmic Strategies"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Strategies__Algorithmic_Strategies.txt", "CS Core:\n1. Paradigms\na. Brute-Force (e.g., linear search, selection sort, traveling salesperson, knapsack)\nb. Decrease-and-Conquer\ni. By a Constant (e.g., insertion sort, topological sort),\nii. By a Constant Factor (e.g., binary search),\niii. By a Variable Size (e.g., Euclid\u2019s)\nc. Divide-and-Conquer (e.g., binary search, quicksort, mergesort, Strassen\u2019s)\nd. Greedy (e.g., Dijkstra\u2019s, Kruskal\u2019s, Knapsack)\ne. Transform-and-Conquer\ni. Instance simplification (e.g., find duplicates via list presort)\nii"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AL-Strategies__Algorithmic_Strategies.txt", ".g., find duplicates via list presort)\nii. Representation change (e.g., heapsort)\niii. Problem reduction (e.g., least-common-multiple, linear programming)\niv. Dynamic programming (e.g., Floyd\u2019s, Warshall, Bellman-Ford)\nf. Space vs time tradeoffs (e.g., hashing)\n2. Handling exponential growth (e.g., heuristic A*, branch-and-bound, backtracking)\n3. Iteration vs recursion (e.g., factorial, tree search)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/HCI-User__Understanding_the_User__Individual_goals_and_interactions_with_others.txt", "Title: HCI-User: Understanding the User: Individual goals and interactions with others\n\nCS Core:\n1. User-centered design and evaluation methods. (See also: SEP-Context, SEP-Ethical-Analysis,\nSEP-Professional-Ethics)\na. \u201cYou are not the users\u201d\nb. User needs-finding\nc. Formative studies\nd. Interviews\ne. Surveys\nf. Usability tests"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Design__Software_Design.txt", "Title: SE-Design: Software Design"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Design__Software_Design.txt", "CS Core:\n1. System design principles. (See also: SF-Reliability)\na. Levels of abstraction (e.g., architectural design and detailed design)\nb. Separation of concerns\nc. Information hiding\nd. Coupling and cohesion\n2. Software architecture. (See also: SF-Reliability)\na. Design paradigms\ni. Top-down functional decomposition/layered design\nii. Data-oriented architecture\niii. Object-oriented analysis and design\niv. Event-driven design\nb. Standard architectures (e.g"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Design__Software_Design.txt", ". Standard architectures (e.g., client-server and microservice architectures including REST\ndiscussions, n-layer, pipes-and-filters, Model View Controller)\nc. Identifying component boundaries and dependencies\n3. Programming in the large vs programming in the small. (See also: SF-Reliability)\n4. Code smells and other indications of code quality, distinct from correctness. (See also: SEC-\nEngineering)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Engineering__Security_Analysis__Design__and_Engineering.txt", "Title: SEC-Engineering: Security Analysis, Design, and Engineering"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Engineering__Security_Analysis__Design__and_Engineering.txt", "CS Core:\n1. Security engineering goals: building systems that remain dependable despite errors, accidents, or\nmalicious adversaries (See also: SE-Construction, SE-Validation, SEP-Security)\n2. Privacy engineering goals: building systems that design, implement, and deploy privacy features\nand controls (See also: SEP-Privacy)\n3. Problem analysis and situational analysis to address system security (See also: SE-Validation)\n4"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEC-Engineering__Security_Analysis__Design__and_Engineering.txt", ". Engineering tradeoff analysis based on time, cost, risk tolerance, risk acceptance, return on\ninvestment, and so on (See also: PDC-Evaluation, SE-Validation)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Relational__Relational_Databases.txt", "Title: DM-Relational: Relational Databases\n\nCS Core:\n1. Entity and referential integrity: Candidate key, superkeys\n2. Relational database design"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-OOP__Object-Oriented_Programming.txt", "Title: FPL-OOP: Object-Oriented Programming"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-OOP__Object-Oriented_Programming.txt", "CS Core:\n1. Imperative programming as a subset of object-oriented programming.\n2. Object-oriented design:\na. Decomposition into objects carrying state and having behavior.\nb. Class-hierarchy design for modeling.\n3. Definition of classes: fields, methods, and constructors. (See also: SDF-Fundamentals)\n4. Subclasses, inheritance (including multiple inheritance), and method overriding.\n5. Dynamic dispatch: definition of method-call.\n6. Exception handling"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-OOP__Object-Oriented_Programming.txt", ".\n6. Exception handling. (See also: SDF-Fundamentals, PDC-Coordination, SE-Construction)\n7. Object-oriented idioms for encapsulation:\na. Privacy, data hiding, and visibility of class members.\nb. Interfaces revealing only method signatures.\nc. Abstract base classes, traits and mixins.\n130\n8. Dynamic vs static properties.\n9. Composition vs inheritance.\n10. Subtyping:\na. Subtype polymorphism; implicit upcasts in typed languages.\nb. Notion of behavioral replacement: subtypes acting like supertype.\nc"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-OOP__Object-Oriented_Programming.txt", ".\nc. Relationship between subtyping and inheritance."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AR-IO__Interfacing_and_Communication.txt", "Title: AR-IO: Interfacing and Communication"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AR-IO__Interfacing_and_Communication.txt", "CS Core:\n1. I/O fundamentals (See also: OS-Devices, PDC-Communication)\na. Handshaking and buffering\nb. Programmed I/O\nc. Interrupt-driven I/O (See also: OS-Principles)\n2. Interrupt structures: vectored and prioritized, interrupt acknowledgment (See also: OS-Principles)\n3. I/O devices (e.g., mouse, keyboard, display, camera, sensors, actuators) (See also: GIT-\nFundamentals, GIT-Interaction, OS-Advanced-Files, PDC-Programs)\n4. External storage, physical organization, and drives\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AR-IO__Interfacing_and_Communication.txt", ". Buses fundamentals (See also: OS-Devices)\na. Bus protocols\nb. Arbitration\nc. Direct-memory access (DMA)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AR-Memory__Memory_Hierarchy.txt", "Title: AR-Memory: Memory Hierarchy"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AR-Memory__Memory_Hierarchy.txt", "CS Core:\n1. Memory hierarchy: the importance of temporal and spatial locality (See also: SF-Performance, OS-\nMemory)\n2. Main memory organization and operations (See also: OS-Memory)\n3. Persistent memory (e.g., SSD, standard disks)\n4. Latency, cycle time, bandwidth, and interleaving (See also: SF-Performance)\n5. Cache memories (See also: SF-Performance)\na. Address mapping\nb. Block size\n104\nc. Replacement and store policy\nd. Prefetching\n6. Multiprocessor cache coherence (See also: OS-Scheduling)\n7"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AR-Memory__Memory_Hierarchy.txt", ". Virtual memory (hardware support) (See also: OS-Memory)\n8. Fault handling and reliability (See also: SF-Reliability)\n9. Reliability (See also: SF-Reliability, OS-Faults)\na. Error coding\nb. Data compression\nc. Data integrity"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Ethical-Analysis__Methods_for_Ethical_Analysis.txt", "Title: SEP-Ethical-Analysis: Methods for Ethical Analysis\n\nCS Core:\n1. Avoiding fallacies and misrepresentation in argumentation\n2. Ethical theories and decision-making (philosophical and social frameworks, e.g. [1])\n3. Recognition of the role culture plays in our understanding, adoption, design, and use of computing\ntechnology\n4. Why ethics is important in computing, and how ethics is similar to, and different from, laws and\nsocial norms"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Querying__Query_Construction.txt", "Title: DM-Querying: Query Construction\n\nCS Core:\n1. SQL Query Formation\na. Interactive SQL execution\nb. Programmatic execution of an SQL query"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-Introduction__Fundamental_Issues.txt", "Title: AI-Introduction: Fundamental Issues"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-Introduction__Fundamental_Issues.txt", "CS Core:\n1. Overview of AI problems, Examples of successful recent AI applications\n2. Definitions of agents with examples (e.g., reactive, deliberative)\n3. What is intelligent behavior?\na. The Turing test and its flaws\nb. Multimodal input and output\nc. Simulation of intelligent behavior\nd. Rational versus non-rational reasoning\n4. Problem characteristics\na. Fully versus partially observable\nb. Single versus multi-agent\nc. Deterministic versus stochastic\nd. Static versus dynamic\ne"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-Introduction__Fundamental_Issues.txt", ". Static versus dynamic\ne. Discrete versus continuous\n5. Nature of agents\n67\na. Autonomous, semi-autonomous, mixed-initiative autonomy\nb. Reflexive, goal-based, and utility-based\nc. Decision making under uncertainty and with incomplete information\nd. The importance of perception and environmental interactions\ne. Learning-based agents\nf. Embodied agents\ni. sensors, dynamics, effectors\n6. Overview of AI Applications, growth, and impact (economic, societal, ethics)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SDF-Fundamentals__Fundamental_Programming_Concepts_and_Practices.txt", "Title: SDF-Fundamentals: Fundamental Programming Concepts and Practices"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SDF-Fundamentals__Fundamental_Programming_Concepts_and_Practices.txt", "CS Core:\n1. Basic concepts such as variables, primitive data types, expressions, and their evaluation\n230\n2. How imperative programs work: state and state transitions on execution of statements, flow of\ncontrol\n3. Basic constructs such as assignment statements, conditional and iterative statements, basic I/O\n4"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SDF-Fundamentals__Fundamental_Programming_Concepts_and_Practices.txt", ". Key modularity constructs such as functions (and methods and classes, if supported in the\nlanguage) and related concepts like parameter passing, scope, abstraction, data encapsulation\n(See also: FPL-OOP)\n5. Input and output using files and APIs\n6. Structured data types available in the chosen programming language like sequences (e.g., arrays,\nlists), associative containers (e.g., dictionaries, maps), others (e.g., sets, tuples) and when and how\nto use them (See also: AL-Foundational)\n7"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SDF-Fundamentals__Fundamental_Programming_Concepts_and_Practices.txt", ". Libraries and frameworks provided by the language (when/where applicable)\n8. Recursion\n9. Dealing with runtime errors in programs (e.g., exception handling).\n10. Basic concepts of programming errors, testing, and debugging (See also: SE-Construction, SEC-\nCoding)\n11. Documenting/commenting code at the program and module level.(See also: SE-Construction)\n12. Develop a security mindset. (See also: SEC-Foundations)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Concurrency__Concurrency.txt", "Title: OS-Concurrency: Concurrency\n\nCS Core:\n1. Thread abstraction relative to concurrency\n2. Race conditions, critical regions (role of interrupts, if needed) (See also: PDC-Programs)\n3. Deadlocks and starvation (See also: PDC-Coordination)\n4. Multiprocessor issues (spin-locks, reentrancy).\n5. Multiprocess concurrency vs multithreading"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Overview__Overview_of_Computer_Systems.txt", "Title: SF-Overview: Overview of Computer Systems"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Overview__Overview_of_Computer_Systems.txt", "CS Core:\n1. Basic building blocks and components of a computer (gates, flip-flops, registers, interconnections;\ndatapath + control + memory)\n2. Hardware as a computational paradigm: Fundamental logic building blocks; Logic expressions,\nminimization, sum of product forms (See also: AR-Logic)\n3. Programming abstractions, interfaces, use of libraries (See also: PDC-Programs)\n4. Distinction and interaction between application and OS services, remote procedure call (See also:\nOS-Purpose)\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Overview__Overview_of_Computer_Systems.txt", ". Basic concept of pipelining, overlapped processing stages (See also: AR-Organization)\n6. Basic concept of scaling: performance vs problem size"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Functional__Functional_Programming.txt", "Title: FPL-Functional: Functional Programming\n\nCS Core:\n1. Develop basic algorithms that avoid assigning to mutable states or considering reference equality.\n2. Develop useful functions that take and return other functions.\n3. Compare and contrast how computational solutions to a problem differ in procedural, functional,\nand object-oriented approaches.\n4. Compare and contrast mechanisms to define and protect data elements within procedural,\nfunctional, and object-oriented approaches."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AR-Representation__Machine-Level_Data_Representation.txt", "Title: AR-Representation: Machine-Level Data Representation\n\nCS Core:\n1. Overview and history of computer architecture (See also: SPD-Game)\n2. Bits, bytes, and words\n3. Unsigned, signed and two\u2019s complement representations\n4. Numeric data representation and number bases\na. Fixed-point\nb. Floating-point\n5. Representation of non-numeric data\n6. Representation of records, arrays and UTF data types (See also: AL-Foundational)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Evaluation__Evaluation.txt", "Title: PDC-Evaluation: Evaluation"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Evaluation__Evaluation.txt", "CS Core:\n1. Safety and liveness requirements in terms of temporal logic constructs to express \u201calways\u201d and\n\u201ceventually\u201d (See also: FPL-Parallel)\n2. Identifying, testing for, and repairing violations, including common forms of errors such as failure to\nensure necessary ordering (race errors), atomicity (including check-then-act errors), and\ntermination (livelock)\n3"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Evaluation__Evaluation.txt", ". Performance requirements metrics for throughput, responsiveness, latency, availability, energy\nconsumption, scalability, resource usage, communication costs, waiting and rate control, fairness;\nservice level agreements (See also: SF-Performance)\n4. Performance impact of design and implementation choices, including granularity, overhead,\nconsensus costs, and energy consumption (See also: SEP-Sustainability)\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Evaluation__Evaluation.txt", ". Estimating scalability limitations, for example using Amdahl\u2019s Law or Universal Scalability Law (See\nalso: SF-Evaluation)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Sustainability__Sustainability.txt", "Title: SEP-Sustainability: Sustainability"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Sustainability__Sustainability.txt", "CS Core:\n1. Environmental, social, and cultural impacts of implementation decisions (e.g., sustainability goals,\nalgorithmic bias/outcomes, economic viability, and resource consumption)\n2. Local/regional/global social and environmental impacts of computing systems and their use (e.g.,\ncarbon footprints, resource usage, e-waste) due to hardware (e.g., e-waste, data centers, rare\nelement and resource utilization, recycling) and software (e.g., cloud-based services, blockchain,\nAI model training and use)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Sustainability__Sustainability.txt", ". This includes everyday use of hardware (cheap hardware replaced\nfrequently) and software (web-browsing, email, and other services with hidden/remote\ncomputational demands).\n3. Guidelines for sustainable design standards."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Translation__Language_Translation_and_Execution.txt", "Title: FPL-Translation: Language Translation and Execution"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Translation__Language_Translation_and_Execution.txt", "CS Core:\n1. Explain and understand the differences between compiled, JIT, and interpreted language\nimplementations, including the benefits and limitations of each.\n2. Differentiate syntax and parsing from semantics and evaluation.\n139\n3. Use BNF and extended BNF to specify the syntax of simple constructs such as if-then-else, type\ndeclaration and iterative constructs for known languages such as C++ or Python.\n4. Illustrate the parse tree using a simple sentence/arithmetic expression.\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Translation__Language_Translation_and_Execution.txt", ".\n5. Illustrate translation of syntax diagrams to BNF/extended BNF for simple constructs such as if-then-\nelse, type declaration, iterative constructs, etc.\n6. Illustrate ambiguity in parsing using nested if-then-else/arithmetic expression and show resolution\nusing precedence order.\nKA-Core:\n7. Discuss the benefits and limitations of garbage collection, including the notion of reachability."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Data__The_Role_of_Data_and_the_Data_Life_Cycle.txt", "Title: DM-Data: The Role of Data and the Data Life Cycle\n\nCS Core:\n1. The Data Life Cycle: Creation-Processing-Review/Reporting-Retention/Retrieval-Destruction (See\nalso: SEP-Context, SEP-Ethical-Analysis, SEP-Professional-Ethics, SEP-Privacy, SEP-Security,\nSEC-Foundations)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Modeling__Data_Modeling.txt", "Title: DM-Modeling: Data Modeling\n\nCS Core:\n1. Data modeling (See also: SE-Requirements)\n2. Relational data model (See also: MSF-Discrete)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Core__Core_Database_System_Concepts.txt", "Title: DM-Core: Core Database System Concepts"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Core__Core_Database_System_Concepts.txt", "CS Core:\n1. Purpose and advantages of database systems\n2. Components of database systems\n115\n3. Design of core DBMS functions (e.g., query mechanisms, transaction management, buffer\nmanagement, access methods)\n4. Database architecture, data independence, and data abstraction\n5. Transaction management\n6. Normalization\n7. Approaches for managing large volumes of data (e.g., NoSQL database systems, use of\nMapReduce) (See also: PDC-Algorithms)\n8. How to support CRUD-only applications\n9"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-Core__Core_Database_System_Concepts.txt", ". How to support CRUD-only applications\n9. Distributed databases/cloud-based systems\n10. Structured, semi-structured, and unstructured data\n11. Use of a declarative query language"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Design__System_Design.txt", "Title: SF-Design: System Design\n\nCS Core:\n1. Common criteria of system design (e.g., liveness, safety, robustness, scalability, and security) (See\nalso: PDC-Evaluation)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/NC-Applications__Networked_Applications.txt", "Title: NC-Applications: Networked Applications"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/NC-Applications__Networked_Applications.txt", "CS Core:\n1. Naming and address schemes (e.g., DNS, and Uniform Resource Identifiers)\n2. Distributed application paradigms (e.g., client/server, peer-to-peer, cloud, edge, and fog) (See also:\nPDC-Communication, PDC-Coordination)\n3. Diversity of networked application demands (e.g., latency, bandwidth, and loss tolerance) (See\nalso: PDC-Communication, SEP-Sustainability, SEP-Context)\n4. Coverage of application-layer protocols (e.g., HTTP)\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/NC-Applications__Networked_Applications.txt", ".g., HTTP)\n5. Interactions with TCP, UDP, and Socket APIs (See also: PDC-Programs)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Security__Security_Policies__Laws_and_Computer_Crimes.txt", "Title: SEP-Security: Security Policies, Laws and Computer Crimes\n\nCS Core:\n1. Computer crimes, legal redress for computer criminals and impact on victims and society\n2. Social engineering, computing-enabled fraud, identity theft and recovery from these\n3. Cyber terrorism, criminal hacking, and hacktivism\n4. Malware, viruses, worms\n5. Attacks on critical infrastructure such as electrical grids and pipelines\n6. Non-technical fundamentals of security (e.g., human engineering, policy, confidentiality)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Programs__Programs.txt", "Title: PDC-Programs: Programs\n\nCS Core:\n1. Graphically show (as a Directed Acyclic Graph (DAG)) how to parallelize a compound numerical\nexpression; for example, a = (b + c) * (d + e).\n2. Explain why the concepts of consistency and fault tolerance do not arise in purely sequential\nprograms."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Event-Driven__Event-Driven_and_Reactive_Programming.txt", "Title: FPL-Event-Driven: Event-Driven and Reactive Programming\n\nCS Core:\n1. Implement event handlers for use in reactive systems, such as GUIs.\n2. Examine why an event-driven programming style is natural in domains where programs react to\nexternal events."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Protection__Protection_and_Safety.txt", "Title: OS-Protection: Protection and Safety\n\nCS Core:\n1. Overview of operating system security mechanisms (See also: SEC-Foundations)\n2. Attacks and antagonism (scheduling, etc.) (See also: SEC-Foundations)\n3. Review of major vulnerabilities in real operating systems (See also: SEC-Foundations)\n4. Operating systems mitigation strategies such as backups (See also: SF-Reliability)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/HCI-Evaluation__Evaluating_the_Design.txt", "Title: HCI-Evaluation: Evaluating the Design"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/HCI-Evaluation__Evaluating_the_Design.txt", "CS Core:\n1. Methods for evaluation with users\na. Formative (e.g., needs-finding, exploratory analysis) and summative assessment (e.g.,\nfunctionality and usability testing)\nb. Elements to evaluate (e.g., utility, efficiency, learnability, user satisfaction, affective elements\nsuch as pleasure and engagement)\nc. Understanding ethical approval requirements before engaging in user research (See also: SE-\nTools, SEP-Ethical-Analysis, SEP-Security, SEP-Privacy, SEP-Professional-Ethics)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Professional-Ethics__Professional_Ethics.txt", "Title: SEP-Professional-Ethics: Professional Ethics"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Professional-Ethics__Professional_Ethics.txt", "CS Core:\n1. Community values and the laws by which we live\n2. The nature of being a professional including care, attention, discipline, fiduciary responsibility, and\nmentoring\n3. Keeping up to date as a computing professional in terms of familiarity, tools, skills, legal and\nprofessional frameworks as well as the ability and responsibility to self-assess and progress in the\ncomputing field\n4"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Professional-Ethics__Professional_Ethics.txt", ". Professional certification, codes of ethics, conduct, and practice, such as the ACM, IEEE, AAAI,\nand other international societies\n5. Accountability, responsibility, and liability (e.g., software correctness, reliability and safety,\nwarranty, negligence, strict liability, ethical approaches to security vulnerability disclosures)\nincluding whether a product/service should be built, not just doing so because it is technically\npossible.\n6"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SEP-Professional-Ethics__Professional_Ethics.txt", ".\n6. Introduction to theories describing the human creation and use of technology including\ninstrumentalism, sociology of technological systems, disability justice, neutrality thesis,\npragmatism, and decolonial models, including developing and using technology to right wrongs and\ndo good\n7. Strategies for recognizing and reporting designs, systems, software, and professional conduct (or\ntheir outcomes) that may violate law or professional codes of ethics"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SDF-SEP__Society__Ethics__and_the_Profession.txt", "Title: SDF-SEP: Society, Ethics, and the Profession\n\nCS Core:\n1. Intellectual property rights of programmers for programs they develop.\n2. Plagiarism and academic integrity.\n3. Responsibility and liability of programmers regarding code they develop for solutions. (See also:\nSEC-Foundations)\n4. Basic professional work ethics of programmers."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SPD-Common__Common_Aspects_Shared_Concerns.txt", "Title: SPD-Common: Common Aspects/Shared Concerns"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SPD-Common__Common_Aspects_Shared_Concerns.txt", "CS Core:\n1. Overview of development platforms (i.e., web, mobile, game, robotics, embedded, and interactive).\na. Input/sensors/control devices/haptic devices\nb. Resource constraints\ni. Computational\nii. Data storage\niii. Memory\niv. Communication\nc. Requirements \u2013 security, uptime availability, fault tolerance (See also: SE-Reliability, SEC-\nEngineering)\nd. Output/actuators/haptic devices\n2. Programming via platform-specific Application Programming Interface (API) vs traditional\napplication construction\n3"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SPD-Common__Common_Aspects_Shared_Concerns.txt", ". Overview of platform Languages (e.g., Python, Swift, Lua, Kotlin)\n4. Programming under platform constraints and requirements (e.g., available development tools,\ndevelopment, security considerations) (See also: SEC-Foundations)\n5. Techniques for learning and mastering a platform-specific programming language"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Parallel__Parallel_and_Distributed_Computing.txt", "Title: FPL-Parallel: Parallel and Distributed Computing"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Parallel__Parallel_and_Distributed_Computing.txt", "CS Core:\n1. Explain why programming languages do not guarantee sequential consistency in the presence of\ndata races and what programmers must do as a result.\n2. Implement correct concurrent programs using multiple programming models, such as shared\nmemory, actors, futures, synchronization constructs, and data-parallelism primitives.\n3. Use a message-passing model to analyze a communication protocol.\n4. Use synchronization constructions such as monitor/synchronized methods in a simple program.\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Parallel__Parallel_and_Distributed_Computing.txt", ".\n5. Modeling data dependency using simple programming constructs involving variables, read and\nwrite.\n6. Modeling control dependency using simple constructs such as selection and iteration."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/MSF-Probability__Probability.txt", "Title: MSF-Probability: Probability\n\nCS Core:\n188\n1. Basic notions: sample spaces, events, probability, conditional probability, Bayes\u2019 rule\n2. Discrete random variables and distributions\n3. Continuous random variables and distributions\n4. Expectation, variance, law of large numbers, central limit theorem\n5. Conditional distributions and expectation\n6. Applications to computing, the difference between probability and statistics (as subjects)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/DM-SEP__Society__Ethics__and_the_Profession.txt", "Title: DM-SEP: Society, Ethics, and the Profession\n\nCS Core:\n1. Issues related to scale (See also: SEP-Economies)\n2. Data privacy overall (See also: SEP-Privacy, SEP-Ethical-Analysis)\na. Privacy compliance by design (See also: SEP-Privacy)\n3. Data anonymity (See also: SEP-Privacy)\n4. Data ownership/custodianship (See also: SEP-Professional-Ethics)\n5. Intended and unintended applications of stored data (See also: SEP-Professional-Ethics, SEC-\nFoundations)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/FPL-Scripting__Shell_Scripting.txt", "Title: FPL-Scripting: Shell Scripting\n\nCS Core:\n1. Create and execute automated scripts to manage various system tasks.\n2. Solve various text processing problems through scripting."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Validation__Software_Verification_and_Validation.txt", "Title: SE-Validation: Software Verification and Validation"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Validation__Software_Verification_and_Validation.txt", "CS Core:\n1. Verification and validation concepts\na. Verification: Are we building the thing right?\nb. Validation: Did we build the right thing?\n2. Why testing matters: Does the component remain functional as the code evolves?\n3. Testing objectives\na. Usability\nb. Reliability\nc. Conformance to specification\n246\nd. Performance\ne. Security\n4. Test kinds\na. Unit\nb. Integration\nc. Validation\nd. System\n5"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SE-Validation__Software_Verification_and_Validation.txt", ". Unit\nb. Integration\nc. Validation\nd. System\n5. Stylistic differences between tests and production code: DAMP vs DRY \u2013 more duplication is\nwarranted in test code."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/GIT-Fundamentals__Fundamental_Concepts.txt", "Title: GIT-Fundamentals: Fundamental Concepts"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/GIT-Fundamentals__Fundamental_Concepts.txt", "CS Core:\n1. Uses of computer graphics and interactive techniques and their potential risks and abuses.\na. Entertainment, business, and scientific applications: e.g., visual effects, generative imagery,\ncomputer vision, machine learning, user interfaces, video editing, games and game engines,\ncomputer-aided design and manufacturing, data visualization, and virtual/augmented/mixed\nreality\nb"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/GIT-Fundamentals__Fundamental_Concepts.txt", ". Intellectual property, deep fakes, facial recognition, privacy (See also: SEP-DEIA, SEP-Privacy,\nSEP-IP, SEP-Professional-Ethics)\n2. Graphic output\na. Displays (e.g., LCD)\nb. Printers\nc. Analog film\nd. Concepts\ni. Resolution (e.g., pixels, dots)\nii. Aspect ratio\niii. Frame rate\n3. Human vision system\na. Tristimulus reception (RGB)\nb. Eye as a camera (projection)\nc. Persistence of vision (frame rate, motion blur)\nd. Contrast (detection, Mach banding, dithering/aliasing)\ne"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/GIT-Fundamentals__Fundamental_Concepts.txt", ". Non-linear response (dynamic range, tone mapping)\nf. Binocular vision (stereo)\ng. Accessibility (color deficiency, strobing, monocular vision, etc.) (See also: SEP-DEIA, HCI-User)\n4. Standard image formats\na. Raster\ni. Lossless (e.g., TIF)\nii. Lossy (e.g., JPG, GIF, etc.)\nb. Vector (e.g., SVG, Adobe Illustrator)\n5. Digitization of analog data\na. Rasterization\nb. Resolution\nc. Sampling and quantization\n6. Color models: additive (RGB), subtractive (CMYK), and color perception (HSV)\n7"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/GIT-Fundamentals__Fundamental_Concepts.txt", ". Tradeoffs between storing image data and re-computing image data\n8. Spatialization: coordinate systems, absolute and relative positioning\n9. Animation as a sequence of still images\n155"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Coordination__Coordination.txt", "Title: PDC-Coordination: Coordination"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Coordination__Coordination.txt", "CS Core:\n1. Dependencies\na. Initiation or progress of one activity may be dependent on other activities, so as to avoid\nrace conditions, ensure termination, or meet other requirements\nb. Ensuring progress by avoiding dependency cycles, using monotonic conditions, removing\ninessential dependencies\n2. Control constructs and design patterns\na. Completion-based: Barriers, joins, including termination control\nb. Data-enabled: Queues, producer-consumer designs\nc"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Coordination__Coordination.txt", ". Condition-based: Polling, retrying, backoffs, helping, suspension, signaling, timeouts\nd. Reactive: Enabling and triggering continuations\n3. Atomicity\na. Atomic instructions, enforced local access orderings\nb. Locks and mutual exclusion; lock granularity\nc. Using locks in a specific language; maintaining liveness without introducing races\n222\nd. Deadlock avoidance: Ordering, coarsening, randomized retries; backoffs, encapsulation via\nlock managers\ne"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Coordination__Coordination.txt", ". Common errors: Failing to lock or unlock when necessary, holding locks while invoking\nunknown operations\nf. Avoiding locks: replication, read-only, ownership, and non-blocking constructions"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Algorithms__Algorithms.txt", "Title: PDC-Algorithms: Algorithms"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Algorithms__Algorithms.txt", "CS Core:\n1. Expressing and implementing algorithms in given languages and frameworks, to initiate activities\n(for example threads), use shared memory constructs, and channel, socket, and/or remote\nprocedure call APIs. (See also: FPL-Parallel).\na. Data parallel examples including map/reduce.\nb. Using channel, socket, and/or RPC APIs in a given language, with program control for\nsending (usually procedural) vs receiving. (usually reactive or RPC-based).\nc"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Algorithms__Algorithms.txt", ". (usually reactive or RPC-based).\nc. Using locks, barriers, and/or synchronizers to maintain liveness without introducing races.\n2. Survey of common application domains across multicore, reactive, data parallel, cluster, cloud,\nopen distributed systems, and frameworks (with reference to the following table)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Algorithms__Algorithms.txt", ".\nCategory Typical Typical Typical Typical\nExecution agents Communication Algorithmic Engineering\nmechanisms domains goals\nMulticore Threads Shared memory, Resource Throughput,\nAtomics, locks management, latency,\ndata processing energy\nReactive Handlers, threads I/O Channels Services, real- Latency\ntime\nData parallel GPU, SIMD, Heterogeneous Linear algebra, Throughput,\n225\naccelerators, memory graphics, data energy\nhybrid analysis\nCluster Managed hosts Sockets, channels Simulation, data Throughput\nanalysis"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/PDC-Algorithms__Algorithms.txt", "analysis\nCloud Provisioned hosts Service APIs Web Scalability\napplications\nOpen Autonomous hosts Sockets, Data Fault tolerant Reliability\ndistributed stores data stores and\nservices"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Purpose__Role_and_Purpose_of_Operating_Systems.txt", "Title: OS-Purpose: Role and Purpose of Operating Systems"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Purpose__Role_and_Purpose_of_Operating_Systems.txt", "CS Core:\n1. Operating systems mediate between general purpose hardware and application-specific software.\n2. Universal operating system functions (e.g., process, user and device interfaces, persistence of\ndata)\n3. Extended and/or specialized operating system functions (e.g., embedded systems, server types\nsuch as file, web, multimedia, boot loaders and boot security)\n4. Design issues (e.g"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Purpose__Role_and_Purpose_of_Operating_Systems.txt", ". Design issues (e.g., efficiency, robustness, flexibility, portability, security, compatibility, power,\nsafety, tradeoffs between error checking and performance, flexibility and performance, and security\nand performance) (See also: SEC-Engineering)\n5. Influences of security, networking, multimedia, parallel and distributed computing\n6. Overarching concern of security/protection: Neglecting to consider security at every layer creates\nan opportunity to inappropriately access resources.\nExample concepts:\na"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Purpose__Role_and_Purpose_of_Operating_Systems.txt", ".\nExample concepts:\na. Unauthorized access to files on an unencrypted drive can be achieved by moving the media to\nanother computer.\nb. Operating systems enforced security can be defeated by infiltrating the boot layer before the\noperating system is loaded.\nc. Process isolation can be subverted by inadequate authorization checking at API boundaries.\nd. Vulnerabilities in system firmware can provide attack vectors that bypass the operating system\nentirely.\ne"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Purpose__Role_and_Purpose_of_Operating_Systems.txt", ".\ne. Improper isolation of virtual machine memory, computing, and hardware can expose the host\nsystem to attacks from guest systems.\nf. The operating system may need to mitigate exploitation of hardware and firmware\nvulnerabilities, leading to potential performance reductions (e.g., Spectre and Meltdown\nmitigations).\n7. Exposure of operating systems functions in shells and systems programming. (See also: FPL-\nScripting)\n206"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Evaluation__Performance_Evaluation.txt", "Title: SF-Evaluation: Performance Evaluation"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Evaluation__Performance_Evaluation.txt", "CS Core:\n1. Performance figures of merit (See also: AR-Performance-Energy, PDC-Evaluation)\n2. Workloads and representative benchmarks, and methods of collecting and analyzing performance\nfigures of merit (See also: AR-Performance-Energy, PDC-Evaluation)\n3. CPI (Cycles per Instruction) equation as a tool for understanding tradeoffs in the design of\ninstruction sets, processor pipelines, and memory system organizations (See also: AR-\nPerformance-Energy, PDC-Evaluation)\n4"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Evaluation__Performance_Evaluation.txt", ". Amdahl\u2019s Law: the part of the computation that cannot be sped up limits the effect of the parts that\ncan (See also: AR-Performance-Energy, PDC-Evaluation)\n5. Order of magnitude analysis (Big O notation) (See also: AL-Complexity)\n6. Analysis of slow and fast paths of a system (See also: AR-Organization)\n7. Events on their effect on performance (e.g., instruction stalls, cache misses, page faults) (See also:\nOS-Memory, AR-Organization)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Principles__Principles_of_Operating_System.txt", "Title: OS-Principles: Principles of Operating System"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Principles__Principles_of_Operating_System.txt", "CS Core:\n1. Operating system software design and approaches (e.g., monolithic, layered, modular, micro-\nkernel, unikernel)\n2. Abstractions, processes, and resources\n3. Concept of system calls and links to application program interfaces (e.g., Win32, Java, Posix). (See\nalso: AR-Assembly)\n4. The evolution of the link between hardware architecture and the operating system functions\n5. Protection of resources means protecting some machine instructions/functions (See also: AR-\nAssembly)\nExample concepts:\na"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Principles__Principles_of_Operating_System.txt", ". Applications cannot arbitrarily access memory locations or file storage device addresses.\nb. Protection of coprocessors and network devices\n6. Leveraging interrupts from hardware level: service routines and implementations. (See also: AR-\nAssembly)\nExample concepts:\na. Timer interrupts for implementing time slices\nb. I/O interrupts for putting blocking threads to sleep without polling\n7. Concept of user/system state and protection, transition to kernel mode using system calls (See\nalso: AR-Assembly)\n8"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/OS-Principles__Principles_of_Operating_System.txt", ". Mechanism for invoking system calls, the corresponding mode and context switch and return from\ninterrupt (See also: AR-Assembly)\n9. Performance costs of context switches and associated cache flushes when performing process\nswitches in Spectre-mitigated environments."], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-SEP__Applications_and_Societal_Impact.txt", "Title: AI-SEP: Applications and Societal Impact"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-SEP__Applications_and_Societal_Impact.txt", "CS Core:\n1. At least one application of AI to a specific problem and field, such as medicine, health,\nsustainability, social media, economics, education, robotics, etc. (choose at least one for the CS\nCore).\na. Formulating and evaluating a specific application as an AI problem\ni. How to deal with underspecified or ill-posed problems\nb. Data availability/scarcity and cleanliness\ni. Basic data cleaning and preprocessing\nii. Data set bias\nc. Algorithmic bias\nd. Evaluation bias\ne"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-SEP__Applications_and_Societal_Impact.txt", ". Algorithmic bias\nd. Evaluation bias\ne. Assessment of societal implications of the application\n2. Deployed deep generative models\na. High-level overview of deep image generative models (e.g., as of 2023, DALL-E, Midjourney,\nStable Diffusion, etc.), their uses, and their shortcomings/pitfalls.\nb. High-level overview of large language models (e.g., as of 2023, ChatGPT, Bard, etc.), their\nuses, and their shortcomings/pitfalls.\n3. Overview of societal impact of AI\n75\na. Ethics (See also: SEP-Context)\nb"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/AI-SEP__Applications_and_Societal_Impact.txt", ". Ethics (See also: SEP-Context)\nb. Fairness (See also: SEP-Privacy, SEP-DEIA)\nc. Trust/explainability (See also: SEP-Context)\nd. Privacy and usage of training data (See also: SEP-Privacy)\ne. Human autonomy and oversight/regulations/legal requirements (See also: SEP-Context)\nf. Sustainability (See also: SEP-Sustainability)"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/MSF-Discrete__Discrete_Mathematics.txt", "Title: MSF-Discrete: Discrete Mathematics\n\nCS Core:\n1. Sets, relations, functions, cardinality\n2. Recursive mathematical definitions\n3. Proof techniques (induction, proof by contradiction)\n4. Permutations, combinations, counting, pigeonhole principle\n5. Modular arithmetic\n6. Logic: truth tables, connectives (operators), inference rules, formulas, normal forms, simple\npredicate logic\n7. Graphs: basic definitions\n8. Order notation"], ["/home/ilefm/SLM-EXP/data/cs_core_txt/SF-Security__System_Security.txt", "Title: SF-Security: System Security\n\nCS Core:\n1. Common system security issues (e.g., viruses, denial-of-service attacks, and eavesdropping) (See\nalso: OS-Protection, NC-Security, SEC-Foundations, SEC-Engineering)\n2. Countermeasures (See also: OS-Principles, OS-Protection, NC-Security)\na. Cryptography (See also: SEC-Crypto)\nb. Security architecture (See also: SEC-Engineering)"]]