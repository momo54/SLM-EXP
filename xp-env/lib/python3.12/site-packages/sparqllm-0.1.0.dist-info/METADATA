Metadata-Version: 2.4
Name: SPARQLLM
Version: 0.1.0
Summary: Description de SPARQLLM
Home-page: https://github.com/momo54/SPARQLLM
Author: Pascal Molli
Author-email: Pascal.Molli@univ-nantes.fr
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: agate==1.13.0
Requires-Dist: agate-dbf==0.2.3
Requires-Dist: agate-excel==0.4.1
Requires-Dist: agate-sql==0.7.2
Requires-Dist: aiofiles==24.1.0
Requires-Dist: aiohappyeyeballs==2.4.8
Requires-Dist: aiohttp==3.11.13
Requires-Dist: aiosignal==1.3.2
Requires-Dist: altair==5.5.0
Requires-Dist: annotated-types==0.7.0
Requires-Dist: anyio==4.8.0
Requires-Dist: appdirs==1.4.4
Requires-Dist: asttokens==3.0.0
Requires-Dist: attrs==25.1.0
Requires-Dist: babel==2.17.0
Requires-Dist: backoff==2.2.1
Requires-Dist: beautifulsoup4==4.13.3
Requires-Dist: blinker==1.9.0
Requires-Dist: bs4==0.0.2
Requires-Dist: cachetools==5.5.2
Requires-Dist: certifi==2025.1.31
Requires-Dist: cffi==1.17.1
Requires-Dist: chardet==5.2.0
Requires-Dist: charset-normalizer==3.4.1
Requires-Dist: cleaner==0.4.0
Requires-Dist: click==8.1.8
Requires-Dist: clize==5.0.2
Requires-Dist: contourpy==1.3.1
Requires-Dist: cryptography==44.0.2
Requires-Dist: cssselect==1.2.0
Requires-Dist: csvkit==2.1.0
Requires-Dist: cycler==0.12.1
Requires-Dist: dataclasses-json==0.6.7
Requires-Dist: dbfread==2.0.7
Requires-Dist: decorator==5.2.1
Requires-Dist: diskcache==5.6.3
Requires-Dist: distro==1.9.0
Requires-Dist: docutils==0.21.2
Requires-Dist: emoji==2.14.1
Requires-Dist: et_xmlfile==2.0.0
Requires-Dist: eval_type_backport==0.2.2
Requires-Dist: executing==2.2.0
Requires-Dist: faiss-cpu==1.10.0
Requires-Dist: fake-useragent==2.0.3
Requires-Dist: Faker==36.1.1
Requires-Dist: filelock==3.16.1
Requires-Dist: filetype==1.2.0
Requires-Dist: fonttools==4.56.0
Requires-Dist: frozenlist==1.5.0
Requires-Dist: fsspec==2024.10.0
Requires-Dist: gitdb==4.0.12
Requires-Dist: GitPython==3.1.44
Requires-Dist: greenlet==3.1.1
Requires-Dist: h11==0.14.0
Requires-Dist: html2text==2024.2.26
Requires-Dist: html5lib==1.1
Requires-Dist: html5lib-modern==1.2
Requires-Dist: httpcore==1.0.7
Requires-Dist: httpx==0.28.1
Requires-Dist: httpx-sse==0.4.0
Requires-Dist: huggingface-hub==0.26.2
Requires-Dist: idna==3.10
Requires-Dist: importlib_metadata==8.6.1
Requires-Dist: iniconfig==2.0.0
Requires-Dist: ipython==9.0.2
Requires-Dist: ipython_pygments_lexers==1.1.1
Requires-Dist: isodate==0.7.2
Requires-Dist: jedi==0.19.2
Requires-Dist: Jinja2==3.1.4
Requires-Dist: jiter==0.8.2
Requires-Dist: joblib==1.4.2
Requires-Dist: jsonpatch==1.33
Requires-Dist: jsonpath-python==1.0.6
Requires-Dist: jsonpickle==4.0.2
Requires-Dist: jsonpointer==3.0.0
Requires-Dist: jsonschema==4.23.0
Requires-Dist: jsonschema-specifications==2024.10.1
Requires-Dist: kiwisolver==1.4.8
Requires-Dist: langchain==0.3.20
Requires-Dist: langchain-community==0.3.19
Requires-Dist: langchain-core==0.3.41
Requires-Dist: langchain-ollama==0.2.3
Requires-Dist: langchain-text-splitters==0.3.6
Requires-Dist: langdetect==1.0.9
Requires-Dist: langsmith==0.3.11
Requires-Dist: leather==0.4.0
Requires-Dist: llama_cpp_python==0.3.1
Requires-Dist: lxml==5.3.1
Requires-Dist: MarkupSafe==3.0.2
Requires-Dist: marshmallow==3.26.1
Requires-Dist: matplotlib==3.10.1
Requires-Dist: matplotlib-inline==0.1.7
Requires-Dist: mistralai==1.5.1
Requires-Dist: multidict==6.1.0
Requires-Dist: mypy-extensions==1.0.0
Requires-Dist: narwhals==1.30.0
Requires-Dist: nest-asyncio==1.6.0
Requires-Dist: networkx==3.4.2
Requires-Dist: nltk==3.9.1
Requires-Dist: numpy
Requires-Dist: od==2.0.2
Requires-Dist: olefile==0.47
Requires-Dist: ollama==0.4.7
Requires-Dist: openai==1.65.2
Requires-Dist: openpyxl==3.1.5
Requires-Dist: orjson==3.10.15
Requires-Dist: outcome==1.3.0.post0
Requires-Dist: packaging==24.2
Requires-Dist: pandas==2.2.3
Requires-Dist: parse==1.20.2
Requires-Dist: parsedatetime==2.6
Requires-Dist: parso==0.8.4
Requires-Dist: pexpect==4.9.0
Requires-Dist: pillow==11.1.0
Requires-Dist: pluggy==1.5.0
Requires-Dist: prompt_toolkit==3.0.50
Requires-Dist: propcache==0.3.0
Requires-Dist: protobuf==5.29.3
Requires-Dist: psutil==7.0.0
Requires-Dist: ptyprocess==0.7.0
Requires-Dist: pure_eval==0.2.3
Requires-Dist: pyarrow==19.0.1
Requires-Dist: pycparser==2.22
Requires-Dist: pydantic==2.10.6
Requires-Dist: pydantic-settings==2.8.1
Requires-Dist: pydantic_core==2.27.2
Requires-Dist: pydeck==0.9.1
Requires-Dist: pyee==11.1.1
Requires-Dist: Pygments==2.19.1
Requires-Dist: pyparsing==3.2.1
Requires-Dist: pypdf==5.3.1
Requires-Dist: pyppeteer==2.0.0
Requires-Dist: pyquery==2.0.1
Requires-Dist: PySocks==1.7.1
Requires-Dist: pytest==8.3.5
Requires-Dist: python-dateutil==2.9.0.post0
Requires-Dist: python-dotenv==1.0.1
Requires-Dist: python-iso639==2025.2.18
Requires-Dist: python-magic==0.4.27
Requires-Dist: python-oxmsg==0.0.2
Requires-Dist: python-slugify==8.0.4
Requires-Dist: pytimeparse==1.1.8
Requires-Dist: pytz==2025.1
Requires-Dist: pyvis==0.3.2
Requires-Dist: PyYAML==6.0.2
Requires-Dist: RapidFuzz==3.12.2
Requires-Dist: rdflib==7.1.3
Requires-Dist: referencing==0.36.2
Requires-Dist: regex==2024.11.6
Requires-Dist: requests==2.32.3
Requires-Dist: requests-html==0.10.0
Requires-Dist: requests-toolbelt==1.0.0
Requires-Dist: rpds-py==0.23.1
Requires-Dist: selenium==4.29.0
Requires-Dist: setuptools==76.0.0
Requires-Dist: sigtools==4.0.1
Requires-Dist: six==1.17.0
Requires-Dist: smmap==5.0.2
Requires-Dist: sniffio==1.3.1
Requires-Dist: sortedcontainers==2.4.0
Requires-Dist: soupsieve==2.6
Requires-Dist: SQLAlchemy==2.0.38
Requires-Dist: stack-data==0.6.3
Requires-Dist: streamlit==1.43.2
Requires-Dist: tenacity==9.0.0
Requires-Dist: text-unidecode==1.3
Requires-Dist: toml==0.10.2
Requires-Dist: tornado==6.4.2
Requires-Dist: tqdm==4.67.1
Requires-Dist: traitlets==5.14.3
Requires-Dist: trio==0.29.0
Requires-Dist: trio-websocket==0.12.2
Requires-Dist: typing-inspect==0.9.0
Requires-Dist: typing_extensions==4.12.2
Requires-Dist: tzdata==2025.1
Requires-Dist: Unidecode==1.3.8
Requires-Dist: unstructured==0.16.23
Requires-Dist: unstructured-client==0.31.0
Requires-Dist: urllib3
Requires-Dist: w3lib==2.3.1
Requires-Dist: wcwidth==0.2.13
Requires-Dist: webencodings==0.5.1
Requires-Dist: websocket-client==1.8.0
Requires-Dist: websockets==10.4
Requires-Dist: Whoosh==2.7.4
Requires-Dist: wrapt==1.17.2
Requires-Dist: wsproto==1.2.0
Requires-Dist: xlrd==2.0.1
Requires-Dist: yarl==1.18.3
Requires-Dist: zipp==3.21.0
Requires-Dist: zstandard==0.23.0
Requires-Dist: groq>=0.24.0
Requires-Dist: pyshacl>=0.30.1
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

SPARQLLM proposes a new technique to access external sources during SPARQL query execution.
It allows to easily run SPARQL query that can access Search Engines, Large Language Models, or Vector database. 

SPARQL-LM allows to run SPARQL queries like [this one](queries/city-search-faiss-llm.sparql) that search in Wikidata, perform a Vector Search to find URIs and extract cultural events from Uris:
```
## slm-run --config config.ini -f queries/city-search-faiss.sparql --debug
PREFIX wdt: <http://www.wikidata.org/prop/direct/>    # Propriétés directes (ex. wdt:P31 pour "instance de")
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX wd: <http://www.wikidata.org/entity/>  
PREFIX ex: <http://example.org/>

SELECT ?label ?chunk ?label ?uri ?score ?date  WHERE {
    SERVICE <https://query.wikidata.org/sparql> {
        SELECT *  WHERE {
           ?country wdt:P31 wd:Q6256;  # The country (instance of a sovereign state)
           wdt:P30 wd:Q46;    # Located in Europe (Q46)
           wdt:P36 ?capital.  # Has capital
           ?capital rdfs:label ?label.
           FILTER(LANG(?label) = "en")
        } 
    } 
    BIND(CONCAT("I want a cultural event related to cinema that is located in ",STR(?label)) AS ?rag)
    BIND(ex:SLM-SEARCH-FAISS(?rag,?capital,5) AS ?gf).
    GRAPH ?gf {
        ?capital ex:is_aligned_with ?bn .
        ?bn ex:has_chunk ?chunk .
        ?bn ex:has_source ?uri .
        ?bn ex:has_score ?score .
    }
    BIND(ex:SLM-READFILE(?uri) AS ?page)   
    BIND(CONCAT("""
    We consider a type Event with the following properties:
      <http://schema.org/StartDate> : The start date of the event
      <http://schema.org/name> : The name of the event.
    Extract from the text below, the date of the event and the name of the event. 
    Generate only output JSON-LD instance of the Event type with
    this format replacing the 0 with the date of the event, and 1 with the name of the event:
     "@context": "https://schema.org/",
     "@type": "Event",
     "http://schema.org/StartDate": "0",
     "http://schema.org/name": "1",
    <page>""",STR(?page), "</page>") AS ?prompt)
    BIND(ex:SLM-LLMGRAPH_OLLA(?prompt,?uri) AS ?gl)
    GRAPH ?gl {
        ?uri <http://example.org/has_schema_type> ?root . 
        ?root a <http://schema.org/Event>. 
        ?root <http://schema.org/StartDate> ?date.
        ?root <http://schema.org/name> ?name
    }    
} order by DESC(?score) limit 10
```

with output like that:
```
       label                            uri               score              date                           name
0  Amsterdam  file:///Users/molli-p/SPAR...  15.239427663552743     21 March 2025  Cinema in Amsterdam: Switc...
1      Paris  file:///Users/molli-p/SPAR...  16.225315614252626  09 February 2025  Cinema in Paris: Distribut...
2  Amsterdam  file:///Users/molli-p/SPAR...  15.239427663552743     21 March 2025  Cinema in Amsterdam: Switc...
3     Dublin  file:///Users/molli-p/SPAR...  14.531948130739828        2025-03-30  Cinema in Dublin: Multi-la...
4   Budapest  file:///Users/molli-p/SPAR...  15.116024306274257        2025-03-11  Cinema in Budapest: Horizo...
5     Madrid  file:///Users/molli-p/SPAR...  14.380867914788142  24 February 2025  Cinema in Madrid: Open-sou...
6     Madrid  file:///Users/molli-p/SPAR...  13.516983778696542  25 February 2025  Cinema in Madrid: Realigne...
```



# install Basic Software

```
git clone https://github.com/momo54/SPARQLLM
cd SPARQLLM
```
Or  work in:
[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/momo54/SPARQLLM?quickstart=1)



install with virtualenv (recommended):
```
virtualenv venv
source venv/bin/activate
pip install -r requirements.txt
pip install .
```

# Install Search, Vector and LLM capabilities

Need Ollama installed, For Linux, MacOS:
```
curl -fsSL https://ollama.com/install.sh | sh
ollama serve &
ollama pull llama3.1:latest
ollama pull nomic-embed-text
```

Need index and semantic index:
```
slm-index-whoosh
slm-index-faiss
```

Default values of these commands read and write in expected locations. `slm-index-faiss --help` `slm-index-whoosh --help`

You can test your index with `slm-search-whoosh`and `slm-search-faiss`.

# run queries

You should be able to run: `slm-run --help`
```
Usage: slm-run [OPTIONS]

Options:
  -q, --query TEXT          SPARQL query to execute (passed in command-line)
  -f, --file TEXT           File containing a SPARQL query to execute
  -c, --config TEXT         Config File for User Defined Functions
  -l, --load TEXT           RDF data file to load
  -fo, --format TEXT        Format of RDF data file
  -d, --debug               turn on debug.
  -k, --keep-store TEXT     File to store the RDF data collected during the
  -o, --output-result TEXT  File to store the result of the query query. 1
                            line per result
  --help                    Show this message and exit.
```

# Run queries working with the local file system


Run a simple queries using the local file system as external source :
```
slm-run --config config.ini -f queries/simple-csv.sparql --debug
slm-run --config config.ini -f queries/readfile.sparql --debug
slm-run --config config.ini -f queries/ReadDir.sparql --debug
```

We can read files, html-files, csv-files, directories during query processing.


# Run queries working with Search capabilities

Run a simple query with a (local) Search Engine [Whoosh](https://github.com/whoosh-community/whoosh):
```
slm-run --config config.ini -f queries/city-search.sparql --debug
```

# run queries with Search and LLms

Combine Wikidata, Vector Search and LLM in a single query [See the query](queries/city-search-faiss-llm.sparql). It is slow on codespace as there is no GPU:
```
slm-run --config config.ini -f queries/city-search-faiss-llm.sparql --debug
```

Same query with keyword search instead of vector search:
```
slm-run --config config.ini -f queries/city-search-llm.sparql --debug
```

Keep store and replay:
```
slm-run --config config.ini -f queries/city-search-faiss-llm.sparql --keep-store city.nq
slm-run --config config.ini --load city.nq  --format nquads -f queries/city-search-faiss-llm.sparql
```

Your query can be rexecuted quickly with only local access now.


## Working with web search engines

If you want to perform the same query on the WEB with [Google Search API](https://developers.google.com/custom-search), your custom search Google API have
to be  activated and the keys have to be available as environment variables :
```
export GOOGLE_API_KEY=xxxxxxxx_orbIQ302-4NOQhRnxxxxxxx
export GOOGLE_CX=x4x3x5x4xfxxxxxxx
```

You should be able to run the same query than before with Google
as a search engine.
```
slm-run --config config.ini -f queries/city-search.sparql --debug
```


## Working a online LLMs

If you  use GROQ, your GROQ API key should be available as an environment variable:
```
export GROQ_API_KEY=xxxx
```

Model to use should be configured in config.ini:
```
...
[Requests]
...
SLM-GROQ-MODEL=llama3-8b-8192
```


If you  use MISTRAL AI, your MistralAI API key should be available as an environment variable:
```
export MISTRAL_API_KEY='xxxx'
```

Model to use should be configured in config.ini:
```
...
[Requests]
...
SLM-MISTRALAI-MODEL=ministral-8b-latest
```

test the same query with:
```
slm-run --config config.ini -f queries/city-search-llm.sparql --debug
```


If you want to use CHATGPT, your chatGPT api key should be available as an environment variable
```
export OPENAI_API_KEY=xxxxxxxxx
```

Model to use should be configured in config.ini:
```
...
[Requests]
...
SLM-OPENAI-MODEL=gpt-3.5-turbo-0125
```

test the same query with:
```
slm-run --config config.ini -f queries/city-search-llm.sparql --debug
```

# Starting a local StreamLit UI

```
streamlit run scripts/streamlit-slm.py 
```
![SPARQLLM StreamLit Screen](scripts/screenshot.png)


# Developpers

Developping new function is very easy. Just go into SPARQL/udf to see how we wrote User Defined Functions you just used, code is very short and can be used as a template for your custom functions. 

You can run tests by  just typing :
```
pytest
```
